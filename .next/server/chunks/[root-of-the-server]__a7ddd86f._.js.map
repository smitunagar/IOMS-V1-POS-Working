{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/database.ts"],"sourcesContent":["import Database from 'better-sqlite3';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\n// Database configuration\r\nconst DB_PATH = path.join(process.cwd(), 'database', 'ioms.db');\r\n\r\n// Ensure database directory exists\r\nconst dbDir = path.dirname(DB_PATH);\r\nif (!fs.existsSync(dbDir)) {\r\n  fs.mkdirSync(dbDir, { recursive: true });\r\n}\r\n\r\n// Initialize database\r\nconst db = new Database(DB_PATH);\r\n\r\n// Enable foreign keys\r\ndb.pragma('foreign_keys = ON');\r\n\r\n// Database schema\r\nconst schema = `\r\n-- Users table\r\nCREATE TABLE IF NOT EXISTS users (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  username VARCHAR(50) UNIQUE NOT NULL,\r\n  email VARCHAR(100) UNIQUE NOT NULL,\r\n  password_hash VARCHAR(255) NOT NULL,\r\n  full_name VARCHAR(100),\r\n  role VARCHAR(20) DEFAULT 'user',\r\n  phone VARCHAR(20),\r\n  address TEXT,\r\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  is_active BOOLEAN DEFAULT 1\r\n);\r\n\r\n-- Categories table\r\nCREATE TABLE IF NOT EXISTS categories (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  name VARCHAR(100) UNIQUE NOT NULL,\r\n  description TEXT,\r\n  parent_id INTEGER,\r\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  FOREIGN KEY (parent_id) REFERENCES categories(id)\r\n);\r\n\r\n-- Products table\r\nCREATE TABLE IF NOT EXISTS products (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  barcode VARCHAR(50) UNIQUE,\r\n  name VARCHAR(200) NOT NULL,\r\n  brand VARCHAR(100),\r\n  category_id INTEGER NOT NULL,\r\n  weight VARCHAR(50),\r\n  unit VARCHAR(20),\r\n  retail_price DECIMAL(10,2) NOT NULL,\r\n  cost_price DECIMAL(10,2),\r\n  description TEXT,\r\n  image_url VARCHAR(255),\r\n  is_active BOOLEAN DEFAULT 1,\r\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  FOREIGN KEY (category_id) REFERENCES categories(id)\r\n);\r\n\r\n-- Menu items table\r\nCREATE TABLE IF NOT EXISTS menu_items (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  name VARCHAR(200) NOT NULL,\r\n  description TEXT,\r\n  price DECIMAL(10,2) NOT NULL,\r\n  category_id INTEGER NOT NULL,\r\n  ingredients TEXT,\r\n  image VARCHAR(255),\r\n  ai_hint TEXT,\r\n  preparation_time INTEGER,\r\n  is_vegetarian BOOLEAN DEFAULT 0,\r\n  is_vegan BOOLEAN DEFAULT 0,\r\n  is_gluten_free BOOLEAN DEFAULT 0,\r\n  is_active BOOLEAN DEFAULT 1,\r\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  FOREIGN KEY (category_id) REFERENCES categories(id)\r\n);\r\n\r\n-- Inventory table\r\nCREATE TABLE IF NOT EXISTS inventory (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  product_id INTEGER NOT NULL,\r\n  quantity DECIMAL(10,3) NOT NULL DEFAULT 0,\r\n  unit VARCHAR(20),\r\n  min_stock_level DECIMAL(10,3) DEFAULT 0,\r\n  max_stock_level DECIMAL(10,3),\r\n  location VARCHAR(100),\r\n  expiry_date DATE,\r\n  batch_number VARCHAR(50),\r\n  supplier VARCHAR(100),\r\n  cost_per_unit DECIMAL(10,2),\r\n  last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  FOREIGN KEY (product_id) REFERENCES products(id)\r\n);\r\n\r\n-- Orders table\r\nCREATE TABLE IF NOT EXISTS orders (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  order_number VARCHAR(50) UNIQUE NOT NULL,\r\n  customer_name VARCHAR(100),\r\n  customer_phone VARCHAR(20),\r\n  customer_email VARCHAR(100),\r\n  table_number INTEGER,\r\n  order_type VARCHAR(20) DEFAULT 'dine_in',\r\n  status VARCHAR(20) DEFAULT 'pending',\r\n  subtotal DECIMAL(10,2) NOT NULL,\r\n  tax_amount DECIMAL(10,2) DEFAULT 0,\r\n  discount_amount DECIMAL(10,2) DEFAULT 0,\r\n  total_amount DECIMAL(10,2) NOT NULL,\r\n  payment_method VARCHAR(20),\r\n  payment_status VARCHAR(20) DEFAULT 'pending',\r\n  notes TEXT,\r\n  created_by INTEGER,\r\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  FOREIGN KEY (created_by) REFERENCES users(id)\r\n);\r\n\r\n-- Order items table\r\nCREATE TABLE IF NOT EXISTS order_items (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  order_id INTEGER NOT NULL,\r\n  product_id INTEGER,\r\n  menu_item_id INTEGER,\r\n  quantity INTEGER NOT NULL,\r\n  unit_price DECIMAL(10,2) NOT NULL,\r\n  total_price DECIMAL(10,2) NOT NULL,\r\n  notes TEXT,\r\n  FOREIGN KEY (order_id) REFERENCES orders(id),\r\n  FOREIGN KEY (product_id) REFERENCES products(id),\r\n  FOREIGN KEY (menu_item_id) REFERENCES menu_items(id)\r\n);\r\n\r\n-- Transactions table\r\nCREATE TABLE IF NOT EXISTS transactions (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  order_id INTEGER,\r\n  transaction_type VARCHAR(20) NOT NULL,\r\n  amount DECIMAL(10,2) NOT NULL,\r\n  payment_method VARCHAR(20),\r\n  reference_number VARCHAR(100),\r\n  status VARCHAR(20) DEFAULT 'completed',\r\n  notes TEXT,\r\n  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n  FOREIGN KEY (order_id) REFERENCES orders(id)\r\n);\r\n\r\n-- Create indexes for better performance\r\nCREATE INDEX IF NOT EXISTS idx_products_barcode ON products(barcode);\r\nCREATE INDEX IF NOT EXISTS idx_products_category ON products(category_id);\r\nCREATE INDEX IF NOT EXISTS idx_menu_items_category ON menu_items(category_id);\r\nCREATE INDEX IF NOT EXISTS idx_inventory_product ON inventory(product_id);\r\nCREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);\r\nCREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at);\r\nCREATE INDEX IF NOT EXISTS idx_order_items_order ON order_items(order_id);\r\n`;\r\n\r\n// Initialize database with schema\r\ndb.exec(schema);\r\n\r\n// Insert default categories with detailed restaurant menu categories\r\nconst defaultCategories = [\r\n  // Product categories\r\n  { name: 'Tea', description: 'Various types of tea products' },\r\n  { name: 'Sweets and Snacks', description: 'Candies, cookies, and snack items' },\r\n  { name: 'Spices', description: 'Cooking spices and seasonings' },\r\n  { name: 'Pre Mix', description: 'Pre-mixed food products' },\r\n  { name: 'Coffee', description: 'Coffee products' },\r\n  { name: 'Juices', description: 'Fruit and vegetable juices' },\r\n  \r\n  // Alcoholic Beverages\r\n  { name: 'Cocktails', description: 'Mixed alcoholic drinks and cocktails' },\r\n  { name: 'Wines', description: 'Red, white, and rose wines' },\r\n  { name: 'German Wines', description: 'German wine varieties' },\r\n  { name: 'International Wines', description: 'Italian, French, and other international wines' },\r\n  { name: 'Spirits', description: 'Vodka, Rum, Gin, Whiskey, etc.' },\r\n  { name: 'Liqueurs', description: 'Sweet alcoholic beverages' },\r\n  { name: 'Digestifs', description: 'After-dinner drinks' },\r\n  \r\n  // Non-Alcoholic Beverages\r\n  { name: 'Soft Drinks', description: 'Cola, lemonade, and carbonated drinks' },\r\n  { name: 'Fresh Juices', description: 'Fresh fruit and vegetable juices' },\r\n  { name: 'Mocktails', description: 'Non-alcoholic cocktails' },\r\n  { name: 'Hot Beverages', description: 'Tea, coffee, and hot drinks' },\r\n  { name: 'Non-Alcoholic Wine/Sekt', description: 'Non-alcoholic wine and sparkling drinks' },\r\n  \r\n  // Indian Cuisine\r\n  { name: 'Chicken Dishes', description: 'Chicken curry and chicken-based dishes' },\r\n  { name: 'Lamb Dishes', description: 'Lamb curry and lamb-based dishes' },\r\n  { name: 'Fish Dishes', description: 'Fish curry and fish-based dishes' },\r\n  { name: 'Vegetarian Dishes', description: 'Vegetable curry and vegetarian dishes' },\r\n  { name: 'Rice Dishes', description: 'Basmati rice and rice-based dishes' },\r\n  { name: 'Breads', description: 'Naan, roti, and Indian breads' },\r\n  \r\n  // Other Categories\r\n  { name: 'Appetizers', description: 'Starter dishes and appetizers' },\r\n  { name: 'Salads', description: 'Fresh salads and vegetable dishes' },\r\n  { name: 'Desserts', description: 'Sweet dessert items' },\r\n  { name: 'Side Dishes', description: 'Rice, bread, and side accompaniments' }\r\n];\r\n\r\nconst insertCategory = db.prepare(`\r\n  INSERT OR IGNORE INTO categories (name, description) \r\n  VALUES (?, ?)\r\n`);\r\n\r\ndefaultCategories.forEach(category => {\r\n  insertCategory.run(category.name, category.description);\r\n});\r\n\r\nexport default db;\r\n\r\n// Helper functions\r\nexport const dbHelpers = {\r\n  // Get all categories\r\n  getCategories: () => {\r\n    return db.prepare('SELECT * FROM categories ORDER BY name').all();\r\n  },\r\n\r\n  // Get category by name\r\n  getCategoryByName: (name: string) => {\r\n    return db.prepare('SELECT * FROM categories WHERE name = ?').get(name);\r\n  },\r\n\r\n  // Insert or update category\r\n  upsertCategory: (name: string, description?: string) => {\r\n    const existing = db.prepare('SELECT id FROM categories WHERE name = ?').get(name) as { id: number } | undefined;\r\n    if (existing) {\r\n      return existing.id;\r\n    } else {\r\n      const result = db.prepare('INSERT INTO categories (name, description) VALUES (?, ?)').run(name, description);\r\n      return result.lastInsertRowid as number;\r\n    }\r\n  },\r\n\r\n  // Get all products\r\n  getProducts: () => {\r\n    return db.prepare(`\r\n      SELECT p.*, c.name as category_name \r\n      FROM products p \r\n      JOIN categories c ON p.category_id = c.id \r\n      ORDER BY p.name\r\n    `).all();\r\n  },\r\n\r\n  // Get product by barcode\r\n  getProductByBarcode: (barcode: string) => {\r\n    return db.prepare(`\r\n      SELECT p.*, c.name as category_name \r\n      FROM products p \r\n      JOIN categories c ON p.category_id = c.id \r\n      WHERE p.barcode = ?\r\n    `).get(barcode);\r\n  },\r\n\r\n  // Insert product\r\n  insertProduct: (product: any) => {\r\n    return db.prepare(`\r\n      INSERT INTO products (barcode, name, brand, category_id, weight, unit, retail_price, cost_price, description, image_url)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `).run(\r\n      product.barcode,\r\n      product.name,\r\n      product.brand,\r\n      product.category_id,\r\n      product.weight,\r\n      product.unit,\r\n      product.retail_price,\r\n      product.cost_price,\r\n      product.description,\r\n      product.image_url\r\n    );\r\n  },\r\n\r\n  // Get all menu items\r\n  getMenuItems: () => {\r\n    return db.prepare(`\r\n      SELECT m.*, c.name as category_name \r\n      FROM menu_items m \r\n      JOIN categories c ON m.category_id = c.id \r\n      WHERE m.is_active = 1\r\n      ORDER BY m.name\r\n    `).all();\r\n  },\r\n\r\n  // Insert menu item\r\n  insertMenuItem: (item: any) => {\r\n    return db.prepare(`\r\n      INSERT INTO menu_items (name, description, price, category_id, ingredients, preparation_time, is_vegetarian, is_vegan, is_gluten_free)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `).run(\r\n      item.name,\r\n      item.description,\r\n      item.price,\r\n      item.category_id,\r\n      item.ingredients,\r\n      item.preparation_time,\r\n      item.is_vegetarian ? 1 : 0,\r\n      item.is_vegan ? 1 : 0,\r\n      item.is_gluten_free ? 1 : 0\r\n    );\r\n  },\r\n\r\n  // Get inventory for product\r\n  getInventory: (productId: number) => {\r\n    return db.prepare('SELECT * FROM inventory WHERE product_id = ?').get(productId);\r\n  },\r\n\r\n  // Update inventory\r\n  updateInventory: (productId: number, quantity: number, unit?: string) => {\r\n    const existing = db.prepare('SELECT id FROM inventory WHERE product_id = ?').get(productId);\r\n    if (existing) {\r\n      return db.prepare('UPDATE inventory SET quantity = ?, unit = ?, last_updated = CURRENT_TIMESTAMP WHERE product_id = ?').run(quantity, unit, productId);\r\n    } else {\r\n      return db.prepare('INSERT INTO inventory (product_id, quantity, unit) VALUES (?, ?, ?)').run(productId, quantity, unit);\r\n    }\r\n  }\r\n}; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 445, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/pos/floor/layout/activate/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport db from '@/lib/database';\r\n\r\n// Request validation schema\r\nconst ActivateLayoutSchema = z.object({\r\n  tables: z.array(z.object({\r\n    id: z.string(),\r\n    x: z.number(),\r\n    y: z.number(),\r\n    w: z.number(),\r\n    h: z.number(),\r\n    shape: z.enum(['round', 'square', 'rect']),\r\n    capacity: z.number().min(1).max(20),\r\n    seats: z.number().min(1).max(20),\r\n    label: z.string().optional(),\r\n    zoneId: z.string().optional(),\r\n    metadata: z.record(z.any()).optional(),\r\n  })),\r\n  zones: z.array(z.object({\r\n    id: z.string(),\r\n    name: z.string(),\r\n    color: z.string(),\r\n    visible: z.boolean(),\r\n  })),\r\n  metadata: z.object({\r\n    version: z.string(),\r\n    activatedAt: z.string(),\r\n    activatedBy: z.string(),\r\n    tableCount: z.number(),\r\n    zoneCount: z.number(),\r\n  }),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const tenantId = request.headers.get('x-tenant-id') || 'default';\r\n    const body = await request.json();\r\n    \r\n    // Validate request data\r\n    const validatedData = ActivateLayoutSchema.parse(body);\r\n\r\n    // Check for overlapping tables\r\n    const tables = validatedData.tables;\r\n    for (let i = 0; i < tables.length; i++) {\r\n      for (let j = i + 1; j < tables.length; j++) {\r\n        const table1 = tables[i];\r\n        const table2 = tables[j];\r\n        \r\n        // Simple overlap detection\r\n        const overlap = !(\r\n          table1.x + table1.w <= table2.x ||\r\n          table2.x + table2.w <= table1.x ||\r\n          table1.y + table1.h <= table2.y ||\r\n          table2.y + table2.h <= table1.y\r\n        );\r\n        \r\n        if (overlap) {\r\n          return NextResponse.json(\r\n            { \r\n              error: 'Validation Error',\r\n              message: `Tables ${table1.label || table1.id} and ${table2.label || table2.id} overlap`,\r\n              code: 'TABLES_OVERLAP'\r\n            },\r\n            { status: 400 }\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Validate minimum table count\r\n    if (tables.length === 0) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation Error',\r\n          message: 'Layout must contain at least one table',\r\n          code: 'NO_TABLES'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Start transaction\r\n    const transaction = db.transaction(() => {\r\n      // Archive current active layout\r\n      db.prepare(`\r\n        UPDATE FloorLayout \r\n        SET status = 'ARCHIVED', updatedAt = ?\r\n        WHERE tenantId = ? AND status = 'ACTIVE'\r\n      `).run(new Date().toISOString(), tenantId);\r\n\r\n      // Create new active layout\r\n      const layoutData = {\r\n        id: crypto.randomUUID(),\r\n        tenantId,\r\n        status: 'ACTIVE',\r\n        data: JSON.stringify(validatedData),\r\n        metadata: JSON.stringify(validatedData.metadata),\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n\r\n      db.prepare(`\r\n        INSERT INTO FloorLayout (\r\n          id, tenantId, status, data, metadata, createdAt, updatedAt\r\n        ) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n      `).run(\r\n        layoutData.id,\r\n        layoutData.tenantId,\r\n        layoutData.status,\r\n        layoutData.data,\r\n        layoutData.metadata,\r\n        layoutData.createdAt,\r\n        layoutData.updatedAt\r\n      );\r\n\r\n      // Initialize table status records for all tables\r\n      const deleteExistingStatuses = db.prepare(`\r\n        DELETE FROM TableStatus WHERE tenantId = ?\r\n      `);\r\n      deleteExistingStatuses.run(tenantId);\r\n\r\n      const insertTableStatus = db.prepare(`\r\n        INSERT INTO TableStatus (\r\n          id, tableId, tenantId, status, updatedAt, metadata\r\n        ) VALUES (?, ?, ?, ?, ?, ?)\r\n      `);\r\n\r\n      tables.forEach(table => {\r\n        insertTableStatus.run(\r\n          crypto.randomUUID(),\r\n          table.id,\r\n          tenantId,\r\n          'FREE', // Default status\r\n          new Date().toISOString(),\r\n          JSON.stringify({\r\n            capacity: table.capacity || table.seats || 4,\r\n            label: table.label || `Table ${table.id}`,\r\n            shape: table.shape,\r\n            zoneId: table.zoneId,\r\n          })\r\n        );\r\n      });\r\n\r\n      // Remove draft layout if exists\r\n      db.prepare(`\r\n        DELETE FROM FloorLayout \r\n        WHERE tenantId = ? AND status = 'DRAFT'\r\n      `).run(tenantId);\r\n\r\n      return layoutData;\r\n    });\r\n\r\n    const result = transaction();\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Layout activated successfully',\r\n      layoutId: result.id,\r\n      tableCount: tables.length,\r\n      zoneCount: validatedData.zones.length,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error activating layout:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Validation Error',\r\n          message: 'Invalid layout data',\r\n          details: error.errors\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { \r\n        error: 'Internal Server Error',\r\n        message: 'Failed to activate layout'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}