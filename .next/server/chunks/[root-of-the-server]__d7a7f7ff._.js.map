{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-1.5-flash',\r\n}); "],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,MAAM,KAAK,IAAA,mJAAM,EAAC;IACvB,SAAS;QAAC,IAAA,yLAAQ;KAAG;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/inventoryService.ts"],"sourcesContent":["// Inventory Service\r\n// Provides functions to manage inventory in localStorage\r\n\r\nexport interface InventoryItem {\r\n  id: string;\r\n  name: string;\r\n  quantity: number;\r\n  unit: string;\r\n  category?: string;\r\n  lowStockThreshold?: number;\r\n  expiryDate?: string;\r\n  image?: string;\r\n  aiHint?: string;\r\n  quantityUsed?: number;\r\n  totalUsed?: number;\r\n}\r\n\r\nconst INVENTORY_KEY_PREFIX = 'inventory_';\r\n\r\nexport function getInventory(userId: string): InventoryItem[] {\r\n  if (typeof window === 'undefined') return [];\r\n  const data = localStorage.getItem(INVENTORY_KEY_PREFIX + userId);\r\n  if (!data) return [];\r\n  try {\r\n    return JSON.parse(data) as InventoryItem[];\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport function addInventoryItem(userId: string, item: InventoryItem): InventoryItem | null {\r\n  if (typeof window === 'undefined') return null;\r\n  const inventory = getInventory(userId);\r\n  const newItem = { ...item, id: item.id || Date.now().toString(), quantityUsed: item.quantityUsed || 0, totalUsed: item.totalUsed || 0 };\r\n  inventory.push(newItem);\r\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\r\n  return newItem;\r\n}\r\n\r\nexport function updateInventoryItem(userId: string, item: InventoryItem): boolean {\r\n  if (typeof window === 'undefined') return false;\r\n  const inventory = getInventory(userId);\r\n  const idx = inventory.findIndex(i => i.id === item.id);\r\n  if (idx === -1) return false;\r\n  inventory[idx] = item;\r\n  // Always persist the updated inventory array\r\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\r\n  return true;\r\n}\r\n\r\nexport function removeInventoryItem(userId: string, itemId: string): boolean {\r\n  if (typeof window === 'undefined') return false;\r\n  const inventory = getInventory(userId);\r\n  const newInventory = inventory.filter(i => i.id !== itemId);\r\n  if (newInventory.length === inventory.length) return false;\r\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(newInventory));\r\n  return true;\r\n}\r\n\r\nexport function addOrUpdateIngredientInInventory(userId: string, ingredient: InventoryItem): InventoryItem {\r\n  const inventory = getInventory(userId);\r\n  const idx = inventory.findIndex(i => i.name.toLowerCase() === ingredient.name.toLowerCase());\r\n  if (idx !== -1) {\r\n    inventory[idx] = { ...inventory[idx], ...ingredient, quantityUsed: inventory[idx].quantityUsed || 0, totalUsed: inventory[idx].totalUsed || 0 };\r\n  } else {\r\n    inventory.push({ ...ingredient, id: ingredient.id || Date.now().toString(), quantityUsed: ingredient.quantityUsed || 0, totalUsed: ingredient.totalUsed || 0 });\r\n  }\r\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\r\n  return ingredient;\r\n}\r\n\r\nexport function addIngredientToInventoryIfNotExists(userId: string, ingredient: InventoryItem): boolean {\r\n  const inventory = getInventory(userId);\r\n  const exists = inventory.some(i => i.name.toLowerCase() === ingredient.name.toLowerCase());\r\n  if (!exists) {\r\n    addInventoryItem(userId, ingredient);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getInventoryAlerts(userId: string): string[] {\r\n  const inventory = getInventory(userId);\r\n  return inventory.filter(i => i.lowStockThreshold && i.quantity <= i.lowStockThreshold)\r\n    .map(i => `Low stock: ${i.name} (${i.quantity} ${i.unit})`);\r\n}\r\n\r\nexport function updateInventoryAlerts(userId: string): void {\r\n  if (typeof window === 'undefined') return;\r\n  // Placeholder: In a real app, this would update alert state in a DB or context\r\n  // For now, just triggers a localStorage event\r\n  localStorage.setItem('inventory_alerts_' + userId, Date.now().toString());\r\n}\r\n\r\nexport function saveInventory(userId: string, inventory: InventoryItem[]): void {\r\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\r\n}\r\n\r\n// Inventory alert type for low stock notifications\r\nexport interface InventoryAlert {\r\n  itemId: string;\r\n  itemName: string;\r\n  quantity: number;\r\n  unit: string;\r\n  message: string;\r\n}\r\n\r\n// Generate inventory alerts for low stock items\r\nexport function getInventoryAlertsDetailed(userId: string): InventoryAlert[] {\r\n  const inventory = getInventory(userId);\r\n  return inventory\r\n    .filter(i => i.lowStockThreshold !== undefined && i.quantity <= (i.lowStockThreshold ?? 0))\r\n    .map(i => ({\r\n      itemId: i.id,\r\n      itemName: i.name,\r\n      quantity: i.quantity,\r\n      unit: i.unit,\r\n      message: `Low stock: ${i.name} (${i.quantity} ${i.unit})`,\r\n    }));\r\n}\r\n\r\n// Placeholder for recordIngredientUsage to resolve import in posInventoryIntegration\r\nexport function recordIngredientUsage(userId: string, dish: any, quantity: number): void {\r\n  // No-op placeholder\r\n} "],"names":[],"mappings":"AAAA,oBAAoB;AACpB,yDAAyD;;;;;;;;;;;;;;;;;;;;;;;;;AAgBzD,MAAM,uBAAuB;AAEtB,SAAS,aAAa,MAAc;IACzC,wCAAmC,OAAO,EAAE;;;IAC5C,MAAM;AAOR;AAEO,SAAS,iBAAiB,MAAc,EAAE,IAAmB;IAClE,wCAAmC,OAAO;;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,oBAAoB,MAAc,EAAE,IAAmB;IACrE,wCAAmC,OAAO;;;IAC1C,MAAM;IACN,MAAM;AAMR;AAEO,SAAS,oBAAoB,MAAc,EAAE,MAAc;IAChE,wCAAmC,OAAO;;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,iCAAiC,MAAc,EAAE,UAAyB;IACxF,MAAM,YAAY,aAAa;IAC/B,MAAM,MAAM,UAAU,SAAS,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,WAAW,OAAO,WAAW,IAAI,CAAC,WAAW;IACzF,IAAI,QAAQ,CAAC,GAAG;QACd,SAAS,CAAC,IAAI,GAAG;YAAE,GAAG,SAAS,CAAC,IAAI;YAAE,GAAG,UAAU;YAAE,cAAc,SAAS,CAAC,IAAI,CAAC,YAAY,IAAI;YAAG,WAAW,SAAS,CAAC,IAAI,CAAC,SAAS,IAAI;QAAE;IAChJ,OAAO;QACL,UAAU,IAAI,CAAC;YAAE,GAAG,UAAU;YAAE,IAAI,WAAW,EAAE,IAAI,KAAK,GAAG,GAAG,QAAQ;YAAI,cAAc,WAAW,YAAY,IAAI;YAAG,WAAW,WAAW,SAAS,IAAI;QAAE;IAC/J;IACA,aAAa,OAAO,CAAC,uBAAuB,QAAQ,KAAK,SAAS,CAAC;IACnE,OAAO;AACT;AAEO,SAAS,oCAAoC,MAAc,EAAE,UAAyB;IAC3F,MAAM,YAAY,aAAa;IAC/B,MAAM,SAAS,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,WAAW,OAAO,WAAW,IAAI,CAAC,WAAW;IACvF,IAAI,CAAC,QAAQ;QACX,iBAAiB,QAAQ;QACzB,OAAO;IACT;IACA,OAAO;AACT;AAEO,SAAS,mBAAmB,MAAc;IAC/C,MAAM,YAAY,aAAa;IAC/B,OAAO,UAAU,MAAM,CAAC,CAAA,IAAK,EAAE,iBAAiB,IAAI,EAAE,QAAQ,IAAI,EAAE,iBAAiB,EAClF,GAAG,CAAC,CAAA,IAAK,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;AAC9D;AAEO,SAAS,sBAAsB,MAAc;IAClD,wCAAmC;;;AAIrC;AAEO,SAAS,cAAc,MAAc,EAAE,SAA0B;IACtE,aAAa,OAAO,CAAC,uBAAuB,QAAQ,KAAK,SAAS,CAAC;AACrE;AAYO,SAAS,2BAA2B,MAAc;IACvD,MAAM,YAAY,aAAa;IAC/B,OAAO,UACJ,MAAM,CAAC,CAAA,IAAK,EAAE,iBAAiB,KAAK,aAAa,EAAE,QAAQ,IAAI,CAAC,EAAE,iBAAiB,IAAI,CAAC,GACxF,GAAG,CAAC,CAAA,IAAK,CAAC;YACT,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,IAAI;YAChB,UAAU,EAAE,QAAQ;YACpB,MAAM,EAAE,IAAI;YACZ,SAAS,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3D,CAAC;AACL;AAGO,SAAS,sBAAsB,MAAc,EAAE,IAAS,EAAE,QAAgB;AAC/E,oBAAoB;AACtB","debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/menuService.ts"],"sourcesContent":["// Menu Service\r\n// Provides functions to manage menu items in localStorage\r\n\r\nexport interface IngredientQuantity {\r\n  inventoryItemName: string;\r\n  quantityPerDish: number;\r\n  unit: string;\r\n}\r\n\r\nexport interface MenuItem {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  category?: string;\r\n  ingredients?: (string | IngredientQuantity)[];\r\n  image?: string;\r\n  aiHint?: string;\r\n}\r\n\r\nexport interface Dish {\r\n  id: string;\r\n  name: string;\r\n  price: number;\r\n  category?: string;\r\n  ingredients?: (string | IngredientQuantity)[];\r\n  image?: string;\r\n  aiHint?: string;\r\n}\r\n\r\nconst MENU_KEY_PREFIX = 'menu_';\r\n\r\nexport function getDishes(userId: string): MenuItem[] {\r\n  if (typeof window === 'undefined') return [];\r\n  const data = localStorage.getItem(MENU_KEY_PREFIX + userId);\r\n  if (!data) return [];\r\n  try {\r\n    return JSON.parse(data) as MenuItem[];\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport function saveDishes(userId: string, dishes: MenuItem[]): void {\r\n  localStorage.setItem(MENU_KEY_PREFIX + userId, JSON.stringify(dishes));\r\n}\r\n\r\nexport function addDish(userId: string, dish: MenuItem): MenuItem | null {\r\n  if (typeof window === 'undefined') return null;\r\n  const dishes = getDishes(userId);\r\n  const newDish = { ...dish, id: dish.id || Date.now().toString() };\r\n  dishes.push(newDish);\r\n  saveDishes(userId, dishes);\r\n  return newDish;\r\n}\r\n\r\nexport function updateDish(userId: string, dish: MenuItem): boolean {\r\n  if (typeof window === 'undefined') return false;\r\n  const dishes = getDishes(userId);\r\n  const idx = dishes.findIndex(d => d.id === dish.id);\r\n  if (idx === -1) return false;\r\n  dishes[idx] = dish;\r\n  saveDishes(userId, dishes);\r\n  return true;\r\n}\r\n\r\nexport function removeDish(userId: string, dishId: string): boolean {\r\n  if (typeof window === 'undefined') return false;\r\n  const dishes = getDishes(userId);\r\n  const newDishes = dishes.filter(d => d.id !== dishId);\r\n  if (newDishes.length === dishes.length) return false;\r\n  saveDishes(userId, newDishes);\r\n  return true;\r\n}\r\n\r\nexport const addDishToMenu = addDish; "],"names":[],"mappings":"AAAA,eAAe;AACf,0DAA0D;;;;;;;;;;;;;;;AA4B1D,MAAM,kBAAkB;AAEjB,SAAS,UAAU,MAAc;IACtC,wCAAmC,OAAO,EAAE;;;IAC5C,MAAM;AAOR;AAEO,SAAS,WAAW,MAAc,EAAE,MAAkB;IAC3D,aAAa,OAAO,CAAC,kBAAkB,QAAQ,KAAK,SAAS,CAAC;AAChE;AAEO,SAAS,QAAQ,MAAc,EAAE,IAAc;IACpD,wCAAmC,OAAO;;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,WAAW,MAAc,EAAE,IAAc;IACvD,wCAAmC,OAAO;;;IAC1C,MAAM;IACN,MAAM;AAKR;AAEO,SAAS,WAAW,MAAc,EAAE,MAAc;IACvD,wCAAmC,OAAO;;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,MAAM,gBAAgB","debugId":null}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/ai/flows/ingredient-types.ts"],"sourcesContent":["import { z } from 'genkit';\r\n\r\nexport const GenerateIngredientsListInputSchema = z.object({\r\n  dishName: z.string().describe('The name of the dish to generate ingredients for.'),\r\n  numberOfServings: z.number().describe('The number of servings the ingredients should be for.'),\r\n});\r\nexport type GenerateIngredientsListInput = z.infer<typeof GenerateIngredientsListInputSchema>;\r\n\r\nexport const IngredientSchema = z.object({\r\n  name: z.string().describe('The name of the ingredient.'),\r\n  quantity: z.number().describe('The quantity of the ingredient (numeric value).'),\r\n  unit: z.string().describe('The unit for the quantity (e.g., \"g\", \"ml\", \"pcs\", \"kg\").'),\r\n});\r\n\r\nexport const GenerateIngredientsListOutputSchema = z.object({\r\n  ingredients: z.array(IngredientSchema).describe('A list of ingredients with their names, quantities, and units.'),\r\n});\r\nexport type GenerateIngredientsListOutput = z.infer<typeof GenerateIngredientsListOutputSchema>;\r\n\r\n// New schemas for expiry date suggestion\r\nexport const SuggestExpiryDateInputSchema = z.object({\r\n  productName: z.string().describe('The name of the product.'),\r\n  productCategory: z.string().optional().describe('The category of the product (e.g., \"Tea\", \"Spices\", \"Sweets\").'),\r\n  productWeight: z.string().optional().describe('The weight/unit of the product (e.g., \"500g\", \"1000g\", \"20 pkt\").'),\r\n  manufacturingDate: z.string().optional().describe('The manufacturing date if available.'),\r\n});\r\nexport type SuggestExpiryDateInput = z.infer<typeof SuggestExpiryDateInputSchema>;\r\n\r\nexport const SuggestExpiryDateOutputSchema = z.object({\r\n  suggestedExpiryDate: z.string().describe('The suggested expiry date in YYYY-MM-DD format.'),\r\n  shelfLifeDays: z.number().describe('The estimated shelf life in days.'),\r\n  storageRecommendation: z.string().describe('Storage recommendation for the product.'),\r\n  confidence: z.string().describe('Confidence level of the suggestion (High, Medium, Low).'),\r\n});\r\nexport type SuggestExpiryDateOutput = z.infer<typeof SuggestExpiryDateOutputSchema>;\r\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AAAA;;AAEO,MAAM,qCAAqC,8IAAC,CAAC,MAAM,CAAC;IACzD,UAAU,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,kBAAkB,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACxC;AAGO,MAAM,mBAAmB,8IAAC,CAAC,MAAM,CAAC;IACvC,MAAM,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,UAAU,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,MAAM,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAEO,MAAM,sCAAsC,8IAAC,CAAC,MAAM,CAAC;IAC1D,aAAa,8IAAC,CAAC,KAAK,CAAC,kBAAkB,QAAQ,CAAC;AAClD;AAIO,MAAM,+BAA+B,8IAAC,CAAC,MAAM,CAAC;IACnD,aAAa,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,iBAAiB,8IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAChD,eAAe,8IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,8IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAGO,MAAM,gCAAgC,8IAAC,CAAC,MAAM,CAAC;IACpD,qBAAqB,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,eAAe,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,uBAAuB,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3C,YAAY,8IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/ai/flows/generate-ingredients-list.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { ai } from '@/ai/genkit';\r\nimport {\r\n  GenerateIngredientsListInput,\r\n  GenerateIngredientsListOutput,\r\n  GenerateIngredientsListInputSchema,\r\n  GenerateIngredientsListOutputSchema,\r\n  IngredientSchema\r\n} from './ingredient-types';\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateIngredientsListPrompt',\r\n  input: { schema: GenerateIngredientsListInputSchema },\r\n  output: { schema: GenerateIngredientsListOutputSchema },\r\n  prompt: `You are a chef. Generate a list of ingredients needed for the dish \"{{dishName}}\" for {{numberOfServings}} servings.\r\n\r\nIMPORTANT:\r\n- The language of the ingredient names and units must always match the language of the dish name. If the dish name is in German, all ingredient names and units must be in German. If the dish name is in English, use English. Do not translate or mix languages.\r\n- Always include the main protein or key ingredient (e.g., if the dish is \"Palak Chicken\" or \"Chicken Palak\", always include \"Chicken\" as an ingredient).\r\n\r\nFor each ingredient, provide its name, quantity (as a number), and unit (e.g., \"g\", \"ml\", \"pcs\", \"kg\").\r\nNever return a quantity of 0. If unsure, estimate a typical amount for one serving based on common recipes or chef experience.\r\nReturn the output as a JSON object with a single key \"ingredients\".\r\nThe \"ingredients\" key should have a value of an array of objects, where each object has \"name\" (string), \"quantity\" (number), and \"unit\" (string) fields.\r\nBe as accurate as possible.\r\n\r\nExample (English):\r\n{\r\n  \"ingredients\": [\r\n    { \"name\": \"Chicken Breast\", \"quantity\": 200, \"unit\": \"g\" },\r\n    { \"name\": \"Spinach\", \"quantity\": 150, \"unit\": \"g\" },\r\n    { \"name\": \"Onion\", \"quantity\": 50, \"unit\": \"g\" }\r\n  ]\r\n}\r\n\r\nExample (German):\r\n{\r\n  \"ingredients\": [\r\n    { \"name\": \"Hähnchenbrust\", \"quantity\": 200, \"unit\": \"g\" },\r\n    { \"name\": \"Spinat\", \"quantity\": 150, \"unit\": \"g\" },\r\n    { \"name\": \"Zwiebel\", \"quantity\": 50, \"unit\": \"g\" }\r\n  ]\r\n}\r\n\r\nEnsure the output strictly follows this JSON format.`,\r\n});\r\n\r\nconst generateIngredientsListFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateIngredientsListFlow',\r\n    inputSchema: GenerateIngredientsListInputSchema,\r\n    outputSchema: GenerateIngredientsListOutputSchema,\r\n  },\r\n  async input => {\r\n    const { output } = await prompt(input);\r\n    if (!output) {\r\n      throw new Error('AI did not return an output.');\r\n    }\r\n    return output;\r\n  }\r\n);\r\n\r\nexport async function generateIngredientsList(input: GenerateIngredientsListInput): Promise<GenerateIngredientsListOutput> {\r\n  return generateIngredientsListFlow(input);\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;AAQA,MAAM,SAAS,2HAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,iLAAkC;IAAC;IACpD,QAAQ;QAAE,QAAQ,kLAAmC;IAAC;IACtD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDA8ByC,CAAC;AACrD;AAEA,MAAM,8BAA8B,2HAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa,iLAAkC;IAC/C,cAAc,kLAAmC;AACnD,GACA,OAAM;IACJ,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAGK,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;;;IAFsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/aiMenuExtractor.ts"],"sourcesContent":["import { ai } from '@/ai/genkit';\r\nimport { jsonrepair } from 'jsonrepair';\r\nimport { getInventory } from './inventoryService';\r\nimport { getDishes } from './menuService';\r\nimport { generateIngredientsList } from '@/ai/flows/generate-ingredients-list';\r\n\r\n/**\r\n * Last-ditch recovery for broken, truncated Gemini arrays.\r\n * Cuts off after last valid object and closes with a bracket.\r\n */\r\nfunction recoverLongestValidArray(jsonString: string): string {\r\n  console.log('🔧 Attempting array recovery for truncated JSON...');\r\n  \r\n  // Remove any trailing commas\r\n  jsonString = jsonString.replace(/,\\s*([\\]}])/g, '$1');\r\n  \r\n  // Find the start of the array\r\n  let arrStart = jsonString.indexOf('[');\r\n  if (arrStart === -1) {\r\n    console.log('❌ No opening bracket found');\r\n    return '[]';\r\n  }\r\n  \r\n  // Find all complete objects by looking for closing braces\r\n  const completeObjects: string[] = [];\r\n  let currentPos = arrStart + 1;\r\n  let braceCount = 0;\r\n  let currentObject = '';\r\n  let inString = false;\r\n  let escapeNext = false;\r\n  \r\n  for (let i = currentPos; i < jsonString.length; i++) {\r\n    const char = jsonString[i];\r\n    \r\n    if (escapeNext) {\r\n      escapeNext = false;\r\n      currentObject += char;\r\n      continue;\r\n    }\r\n    \r\n    if (char === '\\\\') {\r\n      escapeNext = true;\r\n      currentObject += char;\r\n      continue;\r\n    }\r\n    \r\n    if (char === '\"' && !escapeNext) {\r\n      inString = !inString;\r\n      currentObject += char;\r\n      continue;\r\n    }\r\n    \r\n    if (inString) {\r\n      currentObject += char;\r\n      continue;\r\n    }\r\n    \r\n    if (char === '{') {\r\n      braceCount++;\r\n      currentObject += char;\r\n    } else if (char === '}') {\r\n      braceCount--;\r\n      currentObject += char;\r\n      \r\n      if (braceCount === 0) {\r\n        // We have a complete object\r\n        const trimmed = currentObject.trim();\r\n        if (trimmed.length > 0) {\r\n          completeObjects.push(trimmed);\r\n          console.log(`✅ Found complete object ${completeObjects.length}`);\r\n        }\r\n        currentObject = '';\r\n        \r\n        // Skip any whitespace and commas\r\n        while (i + 1 < jsonString.length && /[\\s,]/.test(jsonString[i + 1])) {\r\n          i++;\r\n        }\r\n      }\r\n    } else if (braceCount > 0) {\r\n      currentObject += char;\r\n    }\r\n  }\r\n  \r\n  if (completeObjects.length === 0) {\r\n    console.log('❌ No complete objects found');\r\n    return '[]';\r\n  }\r\n  \r\n  const recovered = '[' + completeObjects.join(',') + ']';\r\n  console.log(`✅ Recovered ${completeObjects.length} complete objects`);\r\n  return recovered;\r\n}\r\n\r\n/**\r\n * Helper for batching with concurrency limit\r\n */\r\nasync function batchWithConcurrencyLimit<T, R>(items: T[], fn: (item: T) => Promise<R>, limit: number): Promise<R[]> {\r\n  const results: R[] = [];\r\n  let idx = 0;\r\n  const executing: Promise<void>[] = [];\r\n  async function run(item: T, i: number) {\r\n    results[i] = await fn(item);\r\n  }\r\n  while (idx < items.length) {\r\n    const i = idx;\r\n    const p = run(items[i], i);\r\n    executing.push(p);\r\n    idx++;\r\n    if (executing.length >= limit) {\r\n      await Promise.race(executing);\r\n      // Remove finished\r\n      for (let j = executing.length - 1; j >= 0; j--) {\r\n        if (typeof executing[j]?.then === 'function') {\r\n          executing.splice(j, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  await Promise.all(executing);\r\n  return results;\r\n}\r\n\r\n/**\r\n * Extracts menu data from a PDF using Gemini and robust post-processing.\r\n */\r\nexport async function extractMenuFromPdf({ \r\n  pdfDataUri, \r\n  userId, \r\n  numberOfServings = 1, \r\n  skipIngredients = false \r\n}: { \r\n  pdfDataUri: string, \r\n  userId?: string, \r\n  numberOfServings?: number,\r\n  skipIngredients?: boolean \r\n}) {\r\n  const prompt = `\r\nYou are an expert at reading restaurant menu PDFs in any language (e.g., German, English, French, etc.). Extract every dish, drink, or menu item as a JSON object.\r\n\r\nFor each menu item, extract:\r\n- \"name\": Dish or beverage name, exactly as printed, but **never include the price or currency in the name**. The name must NOT contain any price or currency. Only the actual name, in the original language.\r\n- \"price\": The price string for the item (e.g., \"3,20 €\", \"2.50 EUR\", \"$4.00\"). If no price, use an empty string.\r\n- \"category\": Section/category name (e.g., \"Pizza\", \"Biere\", \"Salate\", \"Getränke (Drinks)\"). If not shown, use \"Other\". Always preserve the original language.\r\n- \"ingredients\": Array of ingredient names if shown in menu. If not listed, use [].\r\n\r\n**If a menu item has multiple variants (e.g., sizes or volumes with different prices), group all variants under a single menu item object. Add a 'sizes' array: each entry should have 'size' (exactly as shown in the menu, e.g., '0.3 l') and 'price'. Do not convert, round, or change the size string.**\r\n\r\n**Return only a single valid JSON array of objects.** No explanations, no markdown, no text before or after the array.\r\n\r\nExample output:\r\n[\r\n  {\"name\":\"Coca-Cola\",\"category\":\"Soft Drinks\",\"sizes\":[{\"size\":\"0.3 l\",\"price\":\"2,00 €\"},{\"size\":\"0.5 l\",\"price\":\"3,00 €\"},{\"size\":\"1.0 l\",\"price\":\"5,00 €\"}],\"ingredients\":[]},\r\n  {\"name\":\"Zwiefalter-Engele, helles Bier\",\"price\":\"3,20 €\",\"category\":\"Biere\",\"ingredients\":[], \"size\": \"0,33l\"},\r\n  {\"name\":\"Zwiefalter-Urweizen Dunkel\",\"price\":\"4,20 €\",\"category\":\"Biere\",\"ingredients\":[], \"size\": \"0,5l\"},\r\n  {\"name\":\"Water Bottle\",\"price\":\"2,00 €\",\"category\":\"Getränke (Drinks)\",\"ingredients\":[], \"size\": \"0,3l\"},\r\n  {\"name\":\"Water Bottle\",\"price\":\"3,00 €\",\"category\":\"Getränke (Drinks)\",\"ingredients\":[], \"size\": \"0,5l\"},\r\n  {\"name\":\"Chicken Curry\",\"price\":\"10,00 €\",\"category\":\"Spezialitäten vom Huhn mit Reis\",\"ingredients\":[]},\r\n  {\"name\":\"Chicken Korma\",\"price\":\"10,00 €\",\"category\":\"Spezialitäten vom Huhn mit Reis\",\"ingredients\":[\"Mandeln\", \"Sahne\", \"Kokosnuss\", \"feinen Gewürzen\"]},\r\n  {\"name\":\"Glas Prosecco 15% vol\",\"price\":\"5,90 €\",\"category\":\"Aperitifs\",\"ingredients\":[], \"size\": \"0,2l\"},\r\n  {\"name\":\"Indischer Weißwein\",\"price\":\"6,90 €\",\"category\":\"Indische Weine\",\"ingredients\":[], \"size\": \"0,2l\"},\r\n  {\"name\":\"Indischer Weißwein\",\"price\":\"21,00 €\",\"category\":\"Indische Weine\",\"ingredients\":[], \"size\": \"0,75l\"}\r\n]\r\n\r\n// BAD EXAMPLE (do NOT do this!):\r\n// {\"name\": \"Water Bottle (0,3l) 2,00 € (0,5l) 3,00 €\", \"price\": \"\", ...}\r\n`;\r\n\r\n  // Call Gemini via Genkit\r\n  const result = await ai.generate([\r\n    { text: prompt },\r\n    { media: { url: pdfDataUri } }\r\n  ]);\r\n  console.log('GENKIT RAW RESULT type:', typeof result);\r\n  console.log('GENKIT RAW RESULT keys:', result ? Object.keys(result) : 'null');\r\n  console.log('GENKIT RAW RESULT text length:', result?.text ? result.text.length : 0);\r\n\r\n  // Extract text, from code block or raw\r\n  let text = typeof result.text === 'string' ? result.text : '';\r\n  let cleanText = '';\r\n  const jsonMatch = text.match(/```json([\\s\\S]*?)```/) || text.match(/```([\\s\\S]*?)```/);\r\n  if (jsonMatch) {\r\n    cleanText = jsonMatch[1].trim();\r\n  } else {\r\n    cleanText = text.trim();\r\n  }\r\n\r\n  // Remove trailing code fences and comments, just in case\r\n  cleanText = cleanText\r\n    .replace(/```/g, '')\r\n    .replace(/^\\s*\\/\\/.*$/gm, '')\r\n    .trim();\r\n\r\n  // IMPORTANT: Remove the \"json\" prefix that Gemini sometimes adds\r\n  if (cleanText.startsWith('json\\n')) {\r\n    console.log('🔧 Removing \"json\" prefix from response');\r\n    cleanText = cleanText.substring(5).trim();\r\n  } else if (cleanText.startsWith('json ')) {\r\n    console.log('🔧 Removing \"json \" prefix from response');\r\n    cleanText = cleanText.substring(5).trim();\r\n  }\r\n\r\n  // DEBUG: See what we are trying to parse (first 500 chars only)\r\n  console.log('CLEAN JSON TO PARSE (first 500 chars):', cleanText.substring(0, 500));\r\n  console.log('CLEAN JSON TO PARSE length:', cleanText.length);\r\n  \r\n  // Check if it looks like a valid JSON start\r\n  if (!cleanText.startsWith('[') && !cleanText.startsWith('{')) {\r\n    console.log('⚠️ Text does not start with JSON bracket, full text (first 1000 chars):', cleanText.substring(0, 1000));\r\n  }\r\n\r\n  let items: any[] = [];\r\n  let parseSuccess = false;\r\n  \r\n  try {\r\n    // 1. Try straight parse\r\n    items = JSON.parse(cleanText);\r\n    console.log('✅ Successfully parsed JSON directly, items count:', Array.isArray(items) ? items.length : 'not an array');\r\n    parseSuccess = true;\r\n  } catch (e) {\r\n    console.log('❌ Direct JSON parse failed:', e instanceof Error ? e.message.substring(0, 200) : 'unknown error');\r\n    // 2. Try jsonrepair\r\n    try {\r\n      const repairedJson = jsonrepair(cleanText);\r\n      console.log('🔧 JSON repair attempted, repaired length:', repairedJson.length);\r\n      console.log('🔧 Repaired JSON (first 200 chars):', repairedJson.substring(0, 200));\r\n      items = JSON.parse(repairedJson);\r\n      console.log('✅ Successfully parsed repaired JSON, items count:', Array.isArray(items) ? items.length : 'not an array');\r\n      parseSuccess = true;\r\n    } catch (e2) {\r\n      console.log('❌ JSON repair also failed:', e2 instanceof Error ? e2.message.substring(0, 200) : 'unknown error');\r\n      // 3. Try best-effort recovery for truncation\r\n      try {\r\n        const partial = recoverLongestValidArray(cleanText);\r\n        console.log('🔧 Array recovery attempted, recovered length:', partial.length);\r\n        console.log('🔧 Recovered JSON (first 200 chars):', partial.substring(0, 200));\r\n        items = JSON.parse(partial);\r\n        console.log('✅ Successfully parsed recovered array, items count:', Array.isArray(items) ? items.length : 'not an array');\r\n        parseSuccess = true;\r\n      } catch (e3) {\r\n        console.log('❌ Array recovery also failed:', e3 instanceof Error ? e3.message.substring(0, 200) : 'unknown error');\r\n        // 4. Give up, show nothing\r\n        items = [];\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Log what we actually got\r\n  if (parseSuccess) {\r\n    console.log('🎉 JSON parsing succeeded!');\r\n    if (Array.isArray(items)) {\r\n      console.log(`📊 Parsed array with ${items.length} items`);\r\n      if (items.length > 0) {\r\n        console.log('🔍 First item sample:', JSON.stringify(items[0]).substring(0, 100));\r\n        \r\n        // Check if this is the [\"json\", actual_menu_array] structure\r\n        if (items.length === 2 && \r\n            items[0] === 'json' && \r\n            Array.isArray(items[1])) {\r\n          console.log('🔧 Detected [\"json\", menu_array] structure, extracting menu from second element');\r\n          items = items[1];\r\n          console.log(`✅ Extracted actual menu array with ${items.length} items`);\r\n        }\r\n      }\r\n    } else {\r\n      console.log('⚠️ Parsed successfully but result is not an array, type:', typeof items);\r\n      console.log('🔍 Result sample:', JSON.stringify(items, null, 2).substring(0, 500));\r\n    }\r\n  } else {\r\n    console.log('💥 All JSON parsing attempts failed');\r\n  }\r\n\r\n  // Post-process: If a single item contains multiple variants in price or name, split them into separate items\r\n  const variantRegex = /([0-9]+[\\.,][0-9]+\\s*(l|cl|ml|g|kg|L|CL|ML|G|KG)?)[^\\d]*(\\d+[\\.,]\\d+\\s*(€|EUR|USD|GBP|\\$))/gi;\r\n  let expanded: any[] = [];\r\n  for (const item of items) {\r\n    if (item && typeof item.price === 'string' && variantRegex.test(item.price)) {\r\n      // e.g. price: \"(0,3l) 2,00 € (0,5l) 3,00 €\"\r\n      const matches = [...item.price.matchAll(variantRegex)];\r\n      if (matches.length > 1) {\r\n        for (const match of matches) {\r\n          expanded.push({\r\n            ...item,\r\n            price: match[3].trim(),\r\n            size: match[1].trim(),\r\n          });\r\n        }\r\n        continue;\r\n      }\r\n    }\r\n    expanded.push(item);\r\n  }\r\n\r\n  // Post-process: If price is missing but name contains a price, extract it\r\n  const priceRegex = /[-–—]\\s*(\\d+[\\.,]\\d+)\\s*(EUR|USD|GBP|€|\\$)?/i;\r\n  const processed = Array.isArray(expanded) ? expanded.map((item) => {\r\n    if (item && typeof item.name === 'string' && (!item.price || item.price === '')) {\r\n      const match = item.name.match(priceRegex);\r\n      if (match) {\r\n        const priceStr = match[1] + (match[2] ? ' ' + match[2] : '');\r\n        return {\r\n          ...item,\r\n          price: priceStr.trim(),\r\n          name: item.name.replace(priceRegex, '').trim().replace(/[-–—]\\s*$/, '').trim(),\r\n        };\r\n      }\r\n    }\r\n    return item;\r\n  }) : [];\r\n\r\n  // Only filter for valid name field\r\n  const filtered = Array.isArray(processed) ? processed.filter(\r\n    (item) => item && typeof item.name === 'string' && item.name.length > 0\r\n  ) : [];\r\n\r\n  // Merge items with same name/category into a single object with sizes array\r\n  const mergedMap = new Map();\r\n  for (const item of filtered) {\r\n    const key = `${item.name}||${item.category}`;\r\n    if (!mergedMap.has(key)) {\r\n      // Start new entry\r\n      mergedMap.set(key, {\r\n        ...item,\r\n        sizes: item.size || item.sizes ? [] : undefined,\r\n      });\r\n    }\r\n    const merged = mergedMap.get(key);\r\n    // If item has size/price, add to sizes array\r\n    if (item.size || (item.price && item.price !== '')) {\r\n      if (!merged.sizes) merged.sizes = [];\r\n      merged.sizes.push({\r\n        size: item.size || (item.sizes && item.sizes[0]?.size) || '',\r\n        price: item.price || (item.sizes && item.sizes[0]?.price) || '',\r\n      });\r\n    }\r\n  }\r\n  // Finalize merged list\r\n  const merged = Array.from(mergedMap.values()).map(item => {\r\n    if (item.sizes && item.sizes.length === 1 && (!item.sizes[0].size || item.sizes[0].size.trim() === '')) {\r\n      // Only one size and it's empty: move price to top-level\r\n      return { ...item, price: item.sizes[0].price, sizes: undefined };\r\n    } else if (item.sizes && item.sizes.length > 0) {\r\n      // Remove top-level price/size if multiple sizes\r\n      const { price, size, ...rest } = item;\r\n      return { ...rest, sizes: item.sizes };\r\n    } else {\r\n      // Single size or no sizes\r\n      return item;\r\n    }\r\n  });\r\n\r\n  // After merging and before returning, ensure every item has a unique id\r\n  const mergedWithIds = merged.map(item => {\r\n    if (item.id && typeof item.id === 'string' && item.id.length > 0) return item;\r\n    // Generate a unique id from name, category, price, and size (if present)\r\n    let id = `${item.name}__${item.category}`;\r\n    if (item.price) id += `__${item.price}`;\r\n    if (item.size) id += `__${item.size}`;\r\n    if (item.sizes && Array.isArray(item.sizes) && item.sizes.length > 0) {\r\n      id += '__' + item.sizes.map((sz: { size: string; price: string }) => `${sz.size}_${sz.price}`).join('__');\r\n    }\r\n    return { ...item, id };\r\n  });\r\n\r\n  // Ingredient enrichment logic (only if not skipped)\r\n  if (!skipIngredients) {\r\n    let inventory: any[] = [];\r\n    let menuDishes: any[] = [];\r\n    if (userId) {\r\n      try { inventory = getInventory(userId); } catch {}\r\n      try { menuDishes = getDishes(userId); } catch {}\r\n    }\r\n\r\n    // Helper to find ingredient with quantity in inventory or menu\r\n    function findIngredientWithQuantity(ingredientName: string): { name: string, quantity: number, unit: string } | null {\r\n      // Check inventory\r\n      if (inventory && Array.isArray(inventory)) {\r\n        const inv = inventory.find(i => i.name.toLowerCase() === ingredientName.toLowerCase());\r\n        if (inv && inv.quantity && inv.unit) {\r\n          return { name: inv.name, quantity: inv.quantity, unit: inv.unit };\r\n        }\r\n      }\r\n      // Check menu\r\n      if (menuDishes && Array.isArray(menuDishes)) {\r\n        for (const dish of menuDishes) {\r\n          if (dish.ingredients && Array.isArray(dish.ingredients)) {\r\n            for (const ing of dish.ingredients) {\r\n              if (typeof ing === 'object' && ing.inventoryItemName && ing.inventoryItemName.toLowerCase() === ingredientName.toLowerCase()) {\r\n                return { name: ing.inventoryItemName, quantity: ing.quantityPerDish, unit: ing.unit };\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Collect all AI ingredient generation tasks\r\n    const aiTasks: { idx: number, name: string, missing: string[] }[] = [];\r\n    for (let i = 0; i < mergedWithIds.length; i++) {\r\n      const item = mergedWithIds[i];\r\n      if (item.ingredients && Array.isArray(item.ingredients) && item.ingredients.length > 0) {\r\n        const missing: string[] = [];\r\n        for (const ing of item.ingredients) {\r\n          let found = findIngredientWithQuantity(ing);\r\n          if (!found) missing.push(ing);\r\n        }\r\n        if (missing.length > 0) {\r\n          aiTasks.push({ idx: i, name: item.name, missing });\r\n        }\r\n      } else if (item.name) {\r\n        aiTasks.push({ idx: i, name: item.name, missing: [] });\r\n      }\r\n    }\r\n\r\n    // Batch AI calls for ingredient generation (concurrency limit 5)\r\n    try {\r\n      const aiResults = await batchWithConcurrencyLimit(aiTasks, async (task) => {\r\n        try {\r\n          return await generateIngredientsList({ dishName: task.name, numberOfServings });\r\n        } catch {\r\n          return { ingredients: [] };\r\n        }\r\n      }, 5);\r\n\r\n      // Map AI results back to menu items\r\n      for (let i = 0; i < aiTasks.length; i++) {\r\n        const { idx, missing } = aiTasks[i];\r\n        const aiResult = aiResults[i];\r\n        if (!mergedWithIds[idx].ingredients || mergedWithIds[idx].ingredients.length === 0) {\r\n          // No ingredients, use full AI list\r\n          // Normalize to { inventoryItemName, quantityPerDish, unit }\r\n          if (aiResult && aiResult.ingredients && Array.isArray(aiResult.ingredients)) {\r\n            mergedWithIds[idx].ingredients = aiResult.ingredients.map((ing: any) => ({\r\n              inventoryItemName: ing.name,\r\n              quantityPerDish: ing.quantity,\r\n              unit: ing.unit\r\n            }));\r\n          } else {\r\n            mergedWithIds[idx].ingredients = [];\r\n          }\r\n        } else {\r\n          // If original ingredients are just names (strings), and AI returns objects, use AI's list directly\r\n          if (aiResult && aiResult.ingredients && Array.isArray(aiResult.ingredients) && \r\n              mergedWithIds[idx].ingredients.every((ing: any) => typeof ing === 'string')) {\r\n            mergedWithIds[idx].ingredients = aiResult.ingredients.map((ing: any) => ({\r\n              inventoryItemName: ing.name,\r\n              quantityPerDish: ing.quantity,\r\n              unit: ing.unit\r\n            }));\r\n          } else {\r\n            // Mix and match\r\n            for (const missingName of missing) {\r\n              const found = aiResult && aiResult.ingredients && Array.isArray(aiResult.ingredients) ?\r\n                aiResult.ingredients.find((ing: any) => ing.name.toLowerCase() === missingName.toLowerCase()) : null;\r\n              if (found) {\r\n                mergedWithIds[idx].ingredients.push({\r\n                  inventoryItemName: found.name,\r\n                  quantityPerDish: found.quantity,\r\n                  unit: found.unit\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (ingredientError) {\r\n      console.warn('⚠️ Ingredient enrichment failed, continuing with basic menu items:', ingredientError);\r\n    }\r\n  }\r\n\r\n  return mergedWithIds;\r\n}\r\n\r\n// Alias for compatibility with API handler\r\nexport async function extractMenuItemsFromPdfWithGemini(buffer: Buffer): Promise<any[]> {\r\n  // Convert buffer to data URI\r\n  const pdfDataUri = `data:application/pdf;base64,${buffer.toString('base64')}`;\r\n  const items = await extractMenuFromPdf({ pdfDataUri });\r\n  return items;\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 989, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/uploadMenu/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { extractMenuFromPdf } from '@/lib/aiMenuExtractor';\r\nimport { generateIngredientsList } from '@/ai/flows/generate-ingredients-list';\r\n\r\nexport const runtime = 'nodejs';\r\n\r\n// Retry utilities for AI quota handling\r\nasync function delay(ms: number) { \r\n  return new Promise(res => setTimeout(res, ms)); \r\n}\r\n\r\nasync function callWithRetry<T>(fn: () => Promise<T>, retries = 2, baseDelayMs = 5000): Promise<T> {\r\n  let attempt = 0;\r\n  let lastErr: any;\r\n  \r\n  while (attempt <= retries) {\r\n    try { \r\n      return await fn(); \r\n    } catch (err: any) {\r\n      lastErr = err;\r\n      const msg = String(err?.message || err);\r\n      const isQuota = msg.includes('429') || msg.toLowerCase().includes('quota');\r\n      const isTransient = isQuota || msg.toLowerCase().includes('timeout');\r\n      \r\n      if (attempt === retries || !isTransient) break;\r\n      \r\n      const jitter = Math.floor(Math.random() * 1000);\r\n      const delayMs = baseDelayMs * Math.pow(2, attempt) + jitter;\r\n      \r\n      console.log(`Retrying AI call in ${delayMs}ms (attempt ${attempt+1}/${retries+1}) - ${msg}`);\r\n      await delay(delayMs);\r\n      attempt++;\r\n    }\r\n  }\r\n  throw lastErr;\r\n}\r\n\r\nfunction ensureExportsDir() {\r\n  const exportDir = path.join(process.cwd(), 'exports');\r\n  if (!fs.existsSync(exportDir)) fs.mkdirSync(exportDir, { recursive: true });\r\n  return exportDir;\r\n}\r\n\r\n// Enhanced heuristic text extraction with multiple patterns\r\nfunction extractHeuristicFromText(text: string): any[] {\r\n  const items: any[] = [];\r\n  const lines = text.split('\\n').filter(line => line.trim().length > 2);\r\n  \r\n  // Enhanced regex patterns for food detection\r\n  const foodPatterns = [\r\n    /^([A-Z][a-z\\s&'-]+)\\s*[\\$£€₹]?\\s*(\\d+(?:\\.\\d{1,2})?)/,\r\n    /([A-Z][a-z\\s&'-]+)[\\s\\t]*(\\d+(?:\\.\\d{1,2})?)/,\r\n    /(.+?)\\s*[\\$£€₹]\\s*(\\d+(?:\\.\\d{1,2})?)/,\r\n    /^(\\d+)\\.\\s*([A-Za-z][a-z\\s&'-]+)\\s*[\\$£€₹]?\\s*(\\d+(?:\\.\\d{1,2})?)/\r\n  ];\r\n  \r\n  lines.forEach((line, idx) => {\r\n    line = line.trim();\r\n    if (line.length < 3) return;\r\n    \r\n    for (const pattern of foodPatterns) {\r\n      const match = line.match(pattern);\r\n      if (match) {\r\n        let name = match[1] || match[2] || '';\r\n        let price = match[2] || match[3] || '';\r\n        \r\n        // If pattern has 3 groups, price is in group 3\r\n        if (match.length === 4) {\r\n          name = match[2];\r\n          price = match[3];\r\n        }\r\n        \r\n        name = name.trim().replace(/[\\.\\d]+$/, '').trim();\r\n        \r\n        if (name.length > 2 && name.length < 50 && /[a-zA-Z]/.test(name)) {\r\n          items.push({\r\n            id: `heuristic-${Date.now()}-${idx}`,\r\n            name: name,\r\n            price: price,\r\n            category: 'Extracted',\r\n            image: '',\r\n            ingredients: ['water', 'salt'],\r\n            extractionMethod: 'heuristic'\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  return items;\r\n}\r\n\r\n// Three-tier extraction strategy: AI → pdf-parse → pdfjs-dist\r\nasync function extractWithFallback(file: string): Promise<any[]> {\r\n  const exportDir = ensureExportsDir();\r\n  const logPath = path.join(exportDir, 'extraction-debug.log');\r\n  \r\n  // Tier 1: AI extraction with retry\r\n  try {\r\n    const pdfUri = `data:application/pdf;base64,${file}`;\r\n    const extracted = await callWithRetry(() => extractMenuFromPdf(pdfUri));\r\n    if (extracted && Array.isArray(extracted) && extracted.length > 0) {\r\n      fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 1 (AI) success: ${extracted.length} items\\n`);\r\n      return extracted;\r\n    }\r\n  } catch (err) {\r\n    fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 1 (AI) failed: ${err}\\n`);\r\n  }\r\n  \r\n  // Tier 2: pdf-parse fallback\r\n  try {\r\n    const pdfBuffer = Buffer.from(file, 'base64');\r\n    const pdfParse = await import('pdf-parse');\r\n    const parsed = await pdfParse.default(pdfBuffer);\r\n    const text = parsed?.text || '';\r\n    const extractedItems = extractHeuristicFromText(text);\r\n    if (extractedItems.length > 0) {\r\n      fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 2 (pdf-parse) success: ${extractedItems.length} items\\n`);\r\n      return extractedItems;\r\n    }\r\n  } catch (err) {\r\n    fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 2 (pdf-parse) failed: ${err}\\n`);\r\n  }\r\n  \r\n  // Tier 3: pdfjs-dist fallback (simplified for Node.js)\r\n  try {\r\n    // Note: pdfjs-dist has Node.js compatibility issues, so we'll skip this tier for now\r\n    fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 3 (pdfjs-dist) skipped due to Node.js compatibility\\n`);\r\n  } catch (err) {\r\n    fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 3 (pdfjs-dist) failed: ${err}\\n`);\r\n  }\r\n  \r\n  return [];\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('==> /api/uploadMenu POST received');\r\n    \r\n    const body = await request.json();\r\n    console.log('payload keys:', Object.keys(body || {}));\r\n    \r\n    const { manualMenuData, file, userId, textData } = body;\r\n    \r\n    let menuItems: any[] = [];\r\n    \r\n    if (manualMenuData && Array.isArray(manualMenuData)) {\r\n      menuItems = manualMenuData;\r\n    } else if (textData && typeof textData === 'string') {\r\n      // Direct text extraction\r\n      menuItems = extractHeuristicFromText(textData);\r\n    } else if (file && typeof file === 'string') {\r\n      // Three-tier extraction with retry and fallback\r\n      menuItems = await extractWithFallback(file);\r\n    }\r\n    \r\n    // Normalize menu items\r\n    menuItems = menuItems.map((item: any, idx: number) => ({\r\n      id: item.id || `menu-${Date.now()}-${idx}`,\r\n      name: item.name || item.title || `Item ${idx+1}`,\r\n      price: item.price || '',\r\n      category: item.category || 'Uncategorized',\r\n      image: item.image || '',\r\n      ingredients: Array.isArray(item.ingredients) ? item.ingredients : ['water', 'salt'],\r\n      extractionMethod: item.extractionMethod || 'manual'\r\n    }));\r\n    \r\n    // Batch ingredient enrichment for extracted items\r\n    if (menuItems.length > 0 && menuItems.some(item => item.extractionMethod !== 'manual')) {\r\n      try {\r\n        const itemsForEnrichment = menuItems.filter(item => \r\n          item.extractionMethod !== 'manual' && \r\n          Array.isArray(item.ingredients) && \r\n          item.ingredients.length <= 2\r\n        );\r\n        \r\n        if (itemsForEnrichment.length > 0) {\r\n          const batchNames = itemsForEnrichment.map(item => item.name).join(', ');\r\n          const enrichedIngredients = await callWithRetry(() => generateIngredientsList(batchNames));\r\n          \r\n          if (enrichedIngredients && Array.isArray(enrichedIngredients)) {\r\n            itemsForEnrichment.forEach((item, idx) => {\r\n              if (enrichedIngredients[idx] && Array.isArray(enrichedIngredients[idx])) {\r\n                item.ingredients = enrichedIngredients[idx];\r\n              }\r\n            });\r\n          }\r\n        }\r\n      } catch (enrichErr) {\r\n        console.log('Batch ingredient enrichment failed:', enrichErr);\r\n      }\r\n    }\r\n    \r\n    // Export to CSV with enhanced data\r\n    let csvExported = false;\r\n    let csvPath = '';\r\n    \r\n    try {\r\n      const exportsDir = ensureExportsDir();\r\n      csvPath = path.join(exportsDir, `menu-export-${Date.now()}.csv`);\r\n      \r\n      let csvContent = 'ID,Name,Price,Category,Image,Ingredients,ExtractionMethod,IngredientCount\\n';\r\n      menuItems.forEach(item => {\r\n        const ingredients = Array.isArray(item.ingredients) ? item.ingredients.join(';') : '';\r\n        const ingredientCount = Array.isArray(item.ingredients) ? item.ingredients.length : 0;\r\n        const escapedName = String(item.name || '').replace(/\"/g, '\"\"');\r\n        const escapedCategory = String(item.category || '').replace(/\"/g, '\"\"');\r\n        csvContent += `\"${item.id}\",\"${escapedName}\",\"${item.price}\",\"${escapedCategory}\",\"${item.image}\",\"${ingredients}\",\"${item.extractionMethod}\",\"${ingredientCount}\"\\n`;\r\n      });\r\n      \r\n      fs.writeFileSync(csvPath, csvContent, 'utf8');\r\n      csvExported = true;\r\n    } catch (csvErr) {\r\n      console.log('CSV export failed:', csvErr);\r\n    }\r\n    \r\n    const result = {\r\n      success: true,\r\n      count: menuItems.length,\r\n      csvExported,\r\n      csvPath,\r\n      extractionAccuracy: menuItems.length > 0 ? 100 : 0,\r\n      extractionTier: menuItems.length > 0 ? (menuItems[0].extractionMethod === 'ai' ? 1 : 2) : 0,\r\n      menu: menuItems\r\n    };\r\n    \r\n    return new Response(JSON.stringify(result), { \r\n      status: 200, \r\n      headers: { 'Content-Type': 'application/json' } \r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Upload Menu API error:', error);\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      message: error instanceof Error ? error.message : 'Internal server error'\r\n    }), { \r\n      status: 500, \r\n      headers: { 'Content-Type': 'application/json' } \r\n    });\r\n  }\r\n}\r\n\r\nexport const runtime = 'nodejs';\r\n\r\n// Retry utilities for AI quota handling\r\nasync function delay(ms: number) { \r\n  return new Promise(res => setTimeout(res, ms)); \r\n}\r\n\r\nasync function callWithRetry<T>(fn: () => Promise<T>, retries = 2, baseDelayMs = 5000): Promise<T> {\r\n  let attempt = 0;\r\n  let lastErr: any;\r\n  \r\n  while (attempt <= retries) {\r\n    try { \r\n      return await fn(); \r\n    } catch (err: any) {\r\n      lastErr = err;\r\n      const msg = String(err?.message || err);\r\n      const isQuota = msg.includes('429') || msg.toLowerCase().includes('quota');\r\n      const isTransient = isQuota || msg.toLowerCase().includes('timeout');\r\n      \r\n      if (attempt === retries || !isTransient) break;\r\n      \r\n      const jitter = Math.floor(Math.random() * 1000);\r\n      const delayMs = baseDelayMs * Math.pow(2, attempt) + jitter;\r\n      \r\n      console.log(`Retrying AI call in ${delayMs}ms (attempt ${attempt+1}/${retries+1}) - ${msg}`);\r\n      await delay(delayMs);\r\n      attempt++;\r\n    }\r\n  }\r\n  throw lastErr;\r\n}\r\n\r\nfunction ensureExportsDir() {\r\n  const exportDir = path.join(process.cwd(), 'exports');\r\n  if (!fs.existsSync(exportDir)) fs.mkdirSync(exportDir, { recursive: true });\r\n  return exportDir;\r\n}\r\n\r\n// Enhanced heuristic text extraction with multiple patterns\r\nfunction extractHeuristicFromText(text: string): any[] {\r\n  const items: any[] = [];\r\n  const lines = text.split('\\n').filter(line => line.trim().length > 2);\r\n  \r\n  // Enhanced regex patterns for food detection\r\n  const foodPatterns = [\r\n    /^([A-Z][a-z\\s&'-]+)\\s*[\\$£€₹]?\\s*(\\d+(?:\\.\\d{1,2})?)/,\r\n    /([A-Z][a-z\\s&'-]+)[\\s\\t]*(\\d+(?:\\.\\d{1,2})?)/,\r\n    /(.+?)\\s*[\\$£€₹]\\s*(\\d+(?:\\.\\d{1,2})?)/,\r\n    /^(\\d+)\\.\\s*([A-Za-z][a-z\\s&'-]+)\\s*[\\$£€₹]?\\s*(\\d+(?:\\.\\d{1,2})?)/\r\n  ];\r\n  \r\n  lines.forEach((line, idx) => {\r\n    line = line.trim();\r\n    if (line.length < 3) return;\r\n    \r\n    for (const pattern of foodPatterns) {\r\n      const match = line.match(pattern);\r\n      if (match) {\r\n        let name = match[1] || match[2] || '';\r\n        let price = match[2] || match[3] || '';\r\n        \r\n        // If pattern has 3 groups, price is in group 3\r\n        if (match.length === 4) {\r\n          name = match[2];\r\n          price = match[3];\r\n        }\r\n        \r\n        name = name.trim().replace(/[\\.\\d]+$/, '').trim();\r\n        \r\n        if (name.length > 2 && name.length < 50 && /[a-zA-Z]/.test(name)) {\r\n          items.push({\r\n            id: `heuristic-${Date.now()}-${idx}`,\r\n            name: name,\r\n            price: price,\r\n            category: 'Extracted',\r\n            image: '',\r\n            ingredients: ['water', 'salt'],\r\n            extractionMethod: 'heuristic'\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  return items;\r\n}\r\n\r\n// Three-tier extraction strategy: AI → pdf-parse → pdfjs-dist\r\nasync function extractWithFallback(file: string): Promise<any[]> {\r\n  const exportDir = ensureExportsDir();\r\n  const logPath = path.join(exportDir, 'extraction-debug.log');\r\n  \r\n  // Tier 1: AI extraction with retry\r\n  try {\r\n    const pdfUri = `data:application/pdf;base64,${file}`;\r\n    const extracted = await callWithRetry(() => extractMenuFromPdf(pdfUri));\r\n    if (extracted && Array.isArray(extracted) && extracted.length > 0) {\r\n      fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 1 (AI) success: ${extracted.length} items\\n`);\r\n      return extracted;\r\n    }\r\n  } catch (err) {\r\n    fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 1 (AI) failed: ${err}\\n`);\r\n  }\r\n  \r\n  // Tier 2: pdf-parse fallback\r\n  try {\r\n    const pdfBuffer = Buffer.from(file, 'base64');\r\n    const pdfParse = await import('pdf-parse');\r\n    const parsed = await pdfParse.default(pdfBuffer);\r\n    const text = parsed?.text || '';\r\n    const extractedItems = extractHeuristicFromText(text);\r\n    if (extractedItems.length > 0) {\r\n      fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 2 (pdf-parse) success: ${extractedItems.length} items\\n`);\r\n      return extractedItems;\r\n    }\r\n  } catch (err) {\r\n    fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 2 (pdf-parse) failed: ${err}\\n`);\r\n  }\r\n  \r\n  // Tier 3: pdfjs-dist fallback (simplified for Node.js)\r\n  try {\r\n    // Note: pdfjs-dist has Node.js compatibility issues, so we'll skip this tier for now\r\n    fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 3 (pdfjs-dist) skipped due to Node.js compatibility\\n`);\r\n  } catch (err) {\r\n    fs.appendFileSync(logPath, `[${new Date().toISOString()}] Tier 3 (pdfjs-dist) failed: ${err}\\n`);\r\n  }\r\n  \r\n  return [];\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('==> /api/uploadMenu POST received');\r\n    \r\n    const body = await request.json();\r\n    console.log('payload keys:', Object.keys(body || {}));\r\n    \r\n    const { manualMenuData, file, userId, textData } = body;\r\n    \r\n    let menuItems: any[] = [];\r\n    \r\n    if (manualMenuData && Array.isArray(manualMenuData)) {\r\n      menuItems = manualMenuData;\r\n    } else if (textData && typeof textData === 'string') {\r\n      // Direct text extraction\r\n      menuItems = extractHeuristicFromText(textData);\r\n    } else if (file && typeof file === 'string') {\r\n      // Three-tier extraction with retry and fallback\r\n      menuItems = await extractWithFallback(file);\r\n    }\r\n    \r\n    // Normalize menu items\r\n    menuItems = menuItems.map((item: any, idx: number) => ({\r\n      id: item.id || `menu-${Date.now()}-${idx}`,\r\n      name: item.name || item.title || `Item ${idx+1}`,\r\n      price: item.price || '',\r\n      category: item.category || 'Uncategorized',\r\n      image: item.image || '',\r\n      ingredients: Array.isArray(item.ingredients) ? item.ingredients : ['water', 'salt'],\r\n      extractionMethod: item.extractionMethod || 'manual'\r\n    }));\r\n    \r\n    // Batch ingredient enrichment for extracted items\r\n    if (menuItems.length > 0 && menuItems.some(item => item.extractionMethod !== 'manual')) {\r\n      try {\r\n        const itemsForEnrichment = menuItems.filter(item => \r\n          item.extractionMethod !== 'manual' && \r\n          Array.isArray(item.ingredients) && \r\n          item.ingredients.length <= 2\r\n        );\r\n        \r\n        if (itemsForEnrichment.length > 0) {\r\n          const batchNames = itemsForEnrichment.map(item => item.name).join(', ');\r\n          const enrichedIngredients = await callWithRetry(() => generateIngredientsList(batchNames));\r\n          \r\n          if (enrichedIngredients && Array.isArray(enrichedIngredients)) {\r\n            itemsForEnrichment.forEach((item, idx) => {\r\n              if (enrichedIngredients[idx] && Array.isArray(enrichedIngredients[idx])) {\r\n                item.ingredients = enrichedIngredients[idx];\r\n              }\r\n            });\r\n          }\r\n        }\r\n      } catch (enrichErr) {\r\n        console.log('Batch ingredient enrichment failed:', enrichErr);\r\n      }\r\n    }\r\n    \r\n    // Export to CSV with enhanced data\r\n    let csvExported = false;\r\n    let csvPath = '';\r\n    \r\n    try {\r\n      const exportsDir = ensureExportsDir();\r\n      csvPath = path.join(exportsDir, `menu-export-${Date.now()}.csv`);\r\n      \r\n      let csvContent = 'ID,Name,Price,Category,Image,Ingredients,ExtractionMethod,IngredientCount\\n';\r\n      menuItems.forEach(item => {\r\n        const ingredients = Array.isArray(item.ingredients) ? item.ingredients.join(';') : '';\r\n        const ingredientCount = Array.isArray(item.ingredients) ? item.ingredients.length : 0;\r\n        const escapedName = String(item.name || '').replace(/\"/g, '\"\"');\r\n        const escapedCategory = String(item.category || '').replace(/\"/g, '\"\"');\r\n        csvContent += `\"${item.id}\",\"${escapedName}\",\"${item.price}\",\"${escapedCategory}\",\"${item.image}\",\"${ingredients}\",\"${item.extractionMethod}\",\"${ingredientCount}\"\\n`;\r\n      });\r\n      \r\n      fs.writeFileSync(csvPath, csvContent, 'utf8');\r\n      csvExported = true;\r\n    } catch (csvErr) {\r\n      console.log('CSV export failed:', csvErr);\r\n    }\r\n    \r\n    const result = {\r\n      success: true,\r\n      count: menuItems.length,\r\n      csvExported,\r\n      csvPath,\r\n      extractionAccuracy: menuItems.length > 0 ? 100 : 0,\r\n      extractionTier: menuItems.length > 0 ? (menuItems[0].extractionMethod === 'ai' ? 1 : 2) : 0,\r\n      menu: menuItems\r\n    };\r\n    \r\n    return new Response(JSON.stringify(result), { \r\n      status: 200, \r\n      headers: { 'Content-Type': 'application/json' } \r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Upload Menu API error:', error);\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      message: error instanceof Error ? error.message : 'Internal server error'\r\n    }), { \r\n      status: 500, \r\n      headers: { 'Content-Type': 'application/json' } \r\n    });\r\n  }\r\n}\r\n\r\n// Utils\r\nasync function delay(ms: number) { return new Promise(res => setTimeout(res, ms)); }\r\n\r\nasync function callWithRetry<T>(fn: () => Promise<T>, retries = 2, baseDelayMs = 5000): Promise<T> {\r\n  let attempt = 0;\r\n  let lastErr: any;\r\n  while (attempt <= retries) {\r\n    try { return await fn(); } catch (err: any) {\r\n      lastErr = err;\r\n      const msg = String(err?.message || err);\r\n      const isQuota = msg.includes('429') || msg.toLowerCase().includes('quota');\r\n      const isTransient = isQuota || msg.toLowerCase().includes('timeout');\r\n      if (attempt === retries || !isTransient) break;\r\n      const jitter = Math.floor(Math.random() * 1000);\r\n      const delayMs = baseDelayMs * Math.pow(2, attempt) + jitter;\r\n      try { fs.appendFileSync(path.join(process.cwd(),'exports','uploadMenu-debug.log'), `[${new Date().toISOString()}] retrying AI in ${delayMs}ms (attempt ${attempt+1}/${retries}) msg=${msg}\\n`, 'utf8'); } catch {}\r\n      await delay(delayMs);\r\n      attempt++;\r\n    }\r\n  }\r\n  throw lastErr;\r\n}\r\n\r\nfunction ensureExportsDir() {\r\n  const exportDir = path.join(process.cwd(), 'exports');\r\n  if (!fs.existsSync(exportDir)) fs.mkdirSync(exportDir, { recursive: true });\r\n  return exportDir;\r\n}\r\n\r\nfunction exportToCSV(items: any[]) {\r\n  const header = ['id', 'name', 'category', 'price', 'ingredients', 'image', 'extractionMethod'];\r\n  const escape = (v: any) => '\"' + String(v ?? '').replace(/\"/g, '\"\"') + '\"';\r\n  const csvRows = [header.join(',')];\r\n  for (const it of items) {\r\n    const row = [it.id, it.name, it.category, it.price, Array.isArray(it.ingredients) ? it.ingredients.join('; ') : it.ingredients, it.image || '', it.extractionMethod || ''];\r\n    csvRows.push(row.map(escape).join(','));\r\n  }\r\n  return csvRows.join('\\n');\r\n}\r\n\r\nasync function saveCSVFile(content: string, filename: string) {\r\n  const dir = ensureExportsDir();\r\n  const full = path.join(dir, filename);\r\n  await fs.promises.writeFile(full, content, 'utf8');\r\n  return full;\r\n}\r\n\r\nasync function processBatch<T, R>(items: T[], batchSize: number, processor: (chunk: T[]) => Promise<R[]>, delayMs = 500) {\r\n  const results: R[] = [];\r\n  for (let i = 0; i < items.length; i += batchSize) {\r\n    const chunk = items.slice(i, i + batchSize);\r\n    const res = await processor(chunk);\r\n    if (Array.isArray(res)) results.push(...res as any);\r\n    await delay(delayMs);\r\n  }\r\n  return results;\r\n}\r\n\r\nfunction getFallbackIngredients(name: string, category?: string) {\r\n  const lower = (name || '').toLowerCase();\r\n  if (lower.includes('chicken')) return ['chicken', 'salt', 'pepper'];\r\n  if (lower.includes('rice') || lower.includes('biryani')) return ['rice', 'onion', 'spices'];\r\n  if (lower.includes('dal') || lower.includes('lentil')) return ['lentils', 'turmeric', 'salt'];\r\n  if (lower.includes('soup')) return ['water', 'salt', 'vegetables'];\r\n  if (category && category.toLowerCase().includes('dessert')) return ['sugar', 'milk'];\r\n  return ['water', 'salt'];\r\n}\r\n\r\nfunction calculateAccuracy(items: any[]) {\r\n  if (!Array.isArray(items) || items.length === 0) return 0;\r\n  const score = items.reduce((acc, it) => acc + (Array.isArray(it.ingredients) && it.ingredients.length > 0 ? 1 : 0), 0);\r\n  return Math.round((score / items.length) * 100);\r\n}\r\n\r\nfunction extractHeuristicFromText(text: string) {\r\n  const lines = text.split(/\\r?\\n/).map((s: string) => s.trim()).filter(Boolean);\r\n  const priceRe = /(\\d+[\\.,]\\d{1,2})(\\s*(€|EUR|USD|\\$|GBP))?/;\r\n  const extractedItems: any[] = [];\r\n  for (const line of lines) {\r\n    const m = line.match(priceRe);\r\n    if (m) {\r\n      const price = m[0].trim();\r\n      let name = line.replace(priceRe, '').replace(/[\\.]{2,}.*$/, '').replace(/[-–—]+\\s*$/, '').trim();\r\n      if (name && name.length > 1) {\r\n        extractedItems.push({ id: `menu-${Date.now()}-${extractedItems.length}`, name, price, category: 'Uncategorized', image: '', ingredients: [], extractionMethod: 'text-heuristic' });\r\n      }\r\n    }\r\n  }\r\n  return extractedItems;\r\n}\r\n\r\n// Startup probe\r\ntry {\r\n  const startupDir = path.join(process.cwd(), 'exports');\r\n  if (!fs.existsSync(startupDir)) fs.mkdirSync(startupDir, { recursive: true });\r\n  fs.appendFileSync(path.join(startupDir, 'uploadMenu-startup.log'), `[${new Date().toISOString()}] route.ts loaded\\n`, 'utf8');\r\n} catch {}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const rawText = await req.text().catch(() => '');\r\n    let body: any = {};\r\n    try { body = rawText ? JSON.parse(rawText) : {}; } catch (parseErr) {\r\n      try {\r\n        const dbgDir = ensureExportsDir();\r\n        const dbgFile = path.join(dbgDir, 'uploadMenu-raw-request.log');\r\n        const snippet = rawText.substring(0, 2000);\r\n        const entry = `[${new Date().toISOString()}] parseError=${String((parseErr as any)?.message||'')} rawLength=${rawText.length} snippet=${snippet}\\n`;\r\n        fs.appendFileSync(dbgFile, entry, 'utf8');\r\n      } catch {}\r\n      body = {};\r\n    }\r\n\r\n    console.log('==> /api/uploadMenu POST received');\r\n    try { console.log('payload keys:', Object.keys(body || {})); } catch {}\r\n    try {\r\n      const tempFile = path.join(os.tmpdir(), `ioms-uploadMenu-${Date.now()}.json`);\r\n      const payloadForFile = { timestamp: new Date().toISOString(), keys: Object.keys(body||{}), rawLength: rawText.length, sample: rawText.substring(0,2000) };\r\n      try { fs.writeFileSync(tempFile, JSON.stringify(payloadForFile, null, 2), 'utf8'); } catch {}\r\n      try { fs.appendFileSync(path.join(process.cwd(),'exports','uploadMenu-raw-request.log'), JSON.stringify(payloadForFile).substring(0,2000)+'\\n', 'utf8'); } catch {}\r\n      try { fs.writeFileSync(path.join(process.cwd(),'exports','uploadMenu-last-temp.log'), tempFile, 'utf8'); } catch {}\r\n    } catch {}\r\n\r\n    const { manualMenuData, pdfDataUri, file, userId } = body as any;\r\n\r\n    let menuItems: any[] = [];\r\n\r\n    // Build Data URI from various payload shapes\r\n    let pdfUri: string | undefined = pdfDataUri;\r\n    if (!pdfUri && file) {\r\n      if (typeof file === 'string' && file.startsWith('data:application/pdf')) {\r\n        pdfUri = file;\r\n      } else if (typeof file === 'string') {\r\n        pdfUri = `data:application/pdf;base64,${file}`;\r\n      } else if (typeof file === 'object' && file !== null) {\r\n        const candidate = (file as any).data || (file as any).base64 || (file as any).b64;\r\n        if (candidate && typeof candidate === 'string') pdfUri = candidate.startsWith('data:') ? candidate : `data:application/pdf;base64,${candidate}`;\r\n      }\r\n    }\r\n\r\n    try {\r\n      const dbgDir = ensureExportsDir();\r\n      const dbgFile = path.join(dbgDir, 'uploadMenu-debug.log');\r\n      const entry = `[${new Date().toISOString()}] foundPdf=${!!pdfUri} keys=${JSON.stringify(Object.keys(body||{}))} userId=${String(userId||'')}\\n`;\r\n      fs.appendFileSync(dbgFile, entry, 'utf8');\r\n    } catch {}\r\n\r\n    if (manualMenuData && Array.isArray(manualMenuData)) {\r\n      menuItems = manualMenuData;\r\n    } else if (pdfUri) {\r\n      // Step 1: pdf-parse first\r\n      try {\r\n        const base64Part = pdfUri.includes('base64,') ? pdfUri.split('base64,')[1] : pdfUri;\r\n        const pdfBuffer = Buffer.from(base64Part || '', 'base64');\r\n        const pdfParse = await import('pdf-parse');\r\n        const parsed = await pdfParse.default(pdfBuffer as any);\r\n        const text = parsed?.text || '';\r\n        const extractedItems = extractHeuristicFromText(text);\r\n        if (extractedItems.length > 0) {\r\n          menuItems = extractedItems;\r\n          try { fs.appendFileSync(path.join(process.cwd(),'exports','uploadMenu-debug.log'), `[${new Date().toISOString()}] pdf-parse primary found ${extractedItems.length} items\\n`, 'utf8'); } catch {}\r\n        }\r\n      } catch (pfErr) {\r\n        try { fs.appendFileSync(path.join(process.cwd(),'exports','uploadMenu-debug.log'), `[${new Date().toISOString()}] pdf-parse primary failed: ${String((pfErr as any)?.message||pfErr)}\\n`, 'utf8'); } catch {}\r\n      }\r\n\r\n      // Step 2: AI with retry/backoff if still empty\r\n      if (!menuItems || menuItems.length === 0) {\r\n        try {\r\n          const extracted = await callWithRetry(() => extractMenuFromPdf({ pdfDataUri: pdfUri!, userId, skipIngredients: true } as any), 2, 5000);\r\n          menuItems = Array.isArray(extracted) ? extracted as any[] : [];\r\n        } catch (e) {\r\n          console.warn('AI extraction failed after retries, will try pdfjs fallback if available', e);\r\n          menuItems = [];\r\n        }\r\n      }\r\n\r\n      // Step 3: pdfjs-dist fallback if still empty (with proper Node.js setup)\r\n      if ((!menuItems || menuItems.length === 0) && pdfUri) {\r\n        try {\r\n          const base64Part2 = pdfUri.includes('base64,') ? pdfUri.split('base64,')[1] : pdfUri;\r\n          const pdfBuffer2 = Buffer.from(base64Part2 || '', 'base64');\r\n          \r\n          // Use pdfjs-dist for Node.js environments - try legacy first\r\n          let pdfjs: any;\r\n          try {\r\n            pdfjs = await import('pdfjs-dist/legacy/build/pdf.mjs');\r\n          } catch {\r\n            // Fallback to regular build\r\n            pdfjs = await import('pdfjs-dist/build/pdf.mjs');\r\n          }\r\n          \r\n          // Disable worker for server-side\r\n          pdfjs.GlobalWorkerOptions.workerSrc = null;\r\n          \r\n          const loadingTask = pdfjs.getDocument({ \r\n            data: new Uint8Array(pdfBuffer2),\r\n            useSystemFonts: true \r\n          });\r\n          const doc = await loadingTask.promise;\r\n          let fullText = '';\r\n          for (let p = 1; p <= doc.numPages; p++) {\r\n            const page = await doc.getPage(p);\r\n            const content = await page.getTextContent();\r\n            const strings = content.items.map((it: any) => it.str || '').join(' ');\r\n            fullText += '\\n' + strings;\r\n          }\r\n          const extracted2 = extractHeuristicFromText(fullText);\r\n          if (extracted2.length > 0) {\r\n            menuItems = extracted2;\r\n            try { fs.appendFileSync(path.join(process.cwd(),'exports','uploadMenu-debug.log'), `[${new Date().toISOString()}] pdfjs fallback found ${extracted2.length} items\\n`, 'utf8'); } catch {}\r\n          } else {\r\n            try { fs.appendFileSync(path.join(process.cwd(),'exports','uploadMenu-debug.log'), `[${new Date().toISOString()}] pdfjs fallback found 0 items\\n`, 'utf8'); } catch {}\r\n          }\r\n        } catch (e2) {\r\n          try { fs.appendFileSync(path.join(process.cwd(),'exports','uploadMenu-debug.log'), `[${new Date().toISOString()}] pdfjs fallback failed: ${String((e2 as any)?.message||e2)}\\n`, 'utf8'); } catch {}\r\n        }\r\n      }\r\n    } else {\r\n      const details = { success: false, message: 'No menu data provided', receivedKeys: Object.keys(body||{}), rawLength: (typeof rawText === 'string' ? rawText.length : 0) };\r\n      console.warn('uploadMenu missing pdf/manual data:', details);\r\n      try {\r\n        const dbgDir = ensureExportsDir();\r\n        const dbgFile = path.join(dbgDir, 'uploadMenu-debug.log');\r\n        fs.appendFileSync(dbgFile, `[${new Date().toISOString()}] missingData ${JSON.stringify(details)}\\n`, 'utf8');\r\n      } catch {}\r\n      return new Response(JSON.stringify(details), { status: 400, headers: { 'Content-Type': 'application/json' } });\r\n    }\r\n\r\n    // Normalize\r\n    menuItems = (menuItems || []).map((it: any, idx: number) => ({\r\n      id: it.id || `menu-${Date.now()}-${idx}`,\r\n      name: it.name || it.title || `Item ${idx+1}`,\r\n      price: it.price || '',\r\n      category: it.category || 'Uncategorized',\r\n      image: it.image || '',\r\n      ingredients: Array.isArray(it.ingredients) ? it.ingredients : [],\r\n      extractionMethod: it.extractionMethod || (pdfUri ? 'ai' : 'manual')\r\n    }));\r\n\r\n    // Enrich empty ingredients in batches\r\n    const needEnrichment = menuItems.filter((x: any) => !Array.isArray(x.ingredients) || x.ingredients.length === 0);\r\n    if (needEnrichment.length > 0) {\r\n      try {\r\n        const { generateIngredientsList } = await import('@/ai/flows/generate-ingredients-list');\r\n        const batchSize = 5;\r\n        const enriched = await processBatch(needEnrichment, batchSize, async (chunk) => {\r\n          const results: any[] = [];\r\n          for (const item of chunk as any[]) {\r\n            try {\r\n              const out = await callWithRetry(() => generateIngredientsList({ dishName: item.name, numberOfServings: 1 }), 2, 4000);\r\n              const list = Array.isArray(out?.ingredients) ? out.ingredients : [];\r\n              results.push({ id: item.id, ok: true, ingredients: list });\r\n            } catch (err) {\r\n              const fallback = getFallbackIngredients(item.name, item.category);\r\n              results.push({ id: item.id, ok: false, ingredients: fallback, error: String((err as any)?.message || err) });\r\n            }\r\n          }\r\n          return results;\r\n        }, 750);\r\n        const byId: Record<string, any> = Object.create(null);\r\n        for (const r of enriched) byId[r.id] = r;\r\n        menuItems = menuItems.map((it: any) => {\r\n          const upd = byId[it.id];\r\n          if (upd && Array.isArray(upd.ingredients) && upd.ingredients.length) return { ...it, ingredients: upd.ingredients };\r\n          return it;\r\n        });\r\n      } catch (e) {\r\n        try { fs.appendFileSync(path.join(process.cwd(),'exports','uploadMenu-debug.log'), `[${new Date().toISOString()}] enrichment failed, using heuristics: ${String((e as any)?.message||e)}\\n`, 'utf8'); } catch {}\r\n        menuItems = menuItems.map((it: any) => {\r\n          if (!Array.isArray(it.ingredients) || it.ingredients.length === 0) return { ...it, ingredients: getFallbackIngredients(it.name, it.category) };\r\n          return it;\r\n        });\r\n      }\r\n    }\r\n\r\n    // Export CSV\r\n    const csv = exportToCSV(menuItems);\r\n    const fileName = `menu-export-${Date.now()}.csv`;\r\n    const csvPath = await saveCSVFile(csv, fileName).catch(() => fileName);\r\n\r\n    const accuracy = calculateAccuracy(menuItems);\r\n    const resp = { success: true, count: menuItems.length, csvExported: true, csvPath, extractionAccuracy: accuracy, menu: menuItems };\r\n    return new Response(JSON.stringify(resp), { status: 200, headers: { 'Content-Type': 'application/json' } });\r\n  } catch (err: any) {\r\n    console.error('uploadMenu fatal error:', err);\r\n    return new Response(JSON.stringify({ success: false, message: 'Internal Server Error', error: String(err?.message || err) }), { status: 500, headers: { 'Content-Type': 'application/json' } });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}