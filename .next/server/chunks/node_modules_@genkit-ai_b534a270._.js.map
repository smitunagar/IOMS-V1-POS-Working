{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/max.js"],"sourcesContent":["export default 'ffffffff-ffff-ffff-ffff-ffffffffffff';"],"names":[],"mappings":";;;uCAAe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/nil.js"],"sourcesContent":["export default '00000000-0000-0000-0000-000000000000';"],"names":[],"mappings":";;;uCAAe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/regex.js"],"sourcesContent":["export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;"],"names":[],"mappings":";;;uCAAe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/validate.js"],"sourcesContent":["import REGEX from './regex.js';\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\nexport default validate;"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,SAAS,IAAI;IACpB,OAAO,OAAO,SAAS,YAAY,8LAAA,CAAA,UAAK,CAAC,IAAI,CAAC;AAChD;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/parse.js"],"sourcesContent":["import validate from './validate.js';\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Parse ########-....-....-....-............\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff;\n\n  // Parse ........-####-....-....-............\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Parse ........-....-####-....-............\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Parse ........-....-....-####-............\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\nexport default parse;"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,MAAM,IAAI;IACjB,IAAI,CAAC,CAAA,GAAA,iMAAA,CAAA,UAAQ,AAAD,EAAE,OAAO;QACnB,MAAM,UAAU;IAClB;IACA,IAAI;IACJ,MAAM,MAAM,IAAI,WAAW;IAE3B,6CAA6C;IAC7C,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,SAAS,KAAK,KAAK,CAAC,GAAG,IAAI,GAAG,MAAM;IAClD,GAAG,CAAC,EAAE,GAAG,MAAM,KAAK;IACpB,GAAG,CAAC,EAAE,GAAG,MAAM,IAAI;IACnB,GAAG,CAAC,EAAE,GAAG,IAAI;IAEb,6CAA6C;IAC7C,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG,MAAM;IACnD,GAAG,CAAC,EAAE,GAAG,IAAI;IAEb,6CAA6C;IAC7C,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,SAAS,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,MAAM;IACpD,GAAG,CAAC,EAAE,GAAG,IAAI;IAEb,6CAA6C;IAC7C,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,SAAS,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,MAAM;IACpD,GAAG,CAAC,EAAE,GAAG,IAAI;IAEb,6CAA6C;IAC7C,0EAA0E;IAC1E,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,SAAS,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,IAAI,gBAAgB;IACnE,GAAG,CAAC,GAAG,GAAG,IAAI,cAAc;IAC5B,GAAG,CAAC,GAAG,GAAG,MAAM,KAAK;IACrB,GAAG,CAAC,GAAG,GAAG,MAAM,KAAK;IACrB,GAAG,CAAC,GAAG,GAAG,MAAM,IAAI;IACpB,GAAG,CAAC,GAAG,GAAG,IAAI;IACd,OAAO;AACT;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/stringify.js"],"sourcesContent":["import validate from './validate.js';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\nexport default stringify;"],"names":[],"mappings":";;;;AAAA;;AAEA;;;CAGC,GACD,MAAM,YAAY,EAAE;AACpB,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,EAAE,EAAG;IAC5B,UAAU,IAAI,CAAC,CAAC,IAAI,KAAK,EAAE,QAAQ,CAAC,IAAI,KAAK,CAAC;AAChD;AACO,SAAS,gBAAgB,GAAG,EAAE,SAAS,CAAC;IAC7C,uEAAuE;IACvE,oFAAoF;IACpF,EAAE;IACF,sEAAsE;IACtE,uEAAuE;IACvE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,EAAE,WAAW;AAClgB;AACA,SAAS,UAAU,GAAG,EAAE,SAAS,CAAC;IAChC,MAAM,OAAO,gBAAgB,KAAK;IAClC,4EAA4E;IAC5E,oBAAoB;IACpB,wEAAwE;IACxE,2BAA2B;IAC3B,mEAAmE;IACnE,IAAI,CAAC,CAAA,GAAA,iMAAA,CAAA,UAAQ,AAAD,EAAE,OAAO;QACnB,MAAM,UAAU;IAClB;IACA,OAAO;AACT;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/rng.js"],"sourcesContent":["import crypto from 'node:crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,YAAY,IAAI,WAAW,MAAM,qCAAqC;AAC5E,IAAI,UAAU,UAAU,MAAM;AACf,SAAS;IACtB,IAAI,UAAU,UAAU,MAAM,GAAG,IAAI;QACnC,qHAAA,CAAA,UAAM,CAAC,cAAc,CAAC;QACtB,UAAU;IACZ;IACA,OAAO,UAAU,KAAK,CAAC,SAAS,WAAW;AAC7C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v1.js"],"sourcesContent":["import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\nlet _clockseq;\n\n// Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node;\n  let clockseq = options.clockseq;\n\n  // v1 only: Use cached `node` and `clockseq` values\n  if (!options._v6) {\n    if (!node) {\n      node = _nodeId;\n    }\n    if (clockseq == null) {\n      clockseq = _clockseq;\n    }\n  }\n\n  // Handle cases where we need entropy.  We do this lazily to minimize issues\n  // related to insufficient system entropy.  See #189\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    // Randomize node\n    if (node == null) {\n      node = [seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n\n      // v1 only: cache node value for reuse\n      if (!_nodeId && !options._v6) {\n        // per RFC4122 4.5: Set MAC multicast bit (v1 only)\n        node[0] |= 0x01; // Set multicast bit\n\n        _nodeId = node;\n      }\n    }\n\n    // Randomize clockseq\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n      if (_clockseq === undefined && !options._v6) {\n        _clockseq = clockseq;\n      }\n    }\n  }\n\n  // v1 & v6 timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so time is\n  // handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n  return buf || unsafeStringify(b);\n}\nexport default v1;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v1ToV6.js"],"sourcesContent":["import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\n\n/**\n * Convert a v1 UUID to a v6 UUID\n *\n * @param {string|Uint8Array} uuid - The v1 UUID to convert to v6\n * @returns {string|Uint8Array} The v6 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nexport default function v1ToV6(uuid) {\n  const v1Bytes = typeof uuid === 'string' ? parse(uuid) : uuid;\n  const v6Bytes = _v1ToV6(v1Bytes);\n  return typeof uuid === 'string' ? unsafeStringify(v6Bytes) : v6Bytes;\n}\n\n// Do the field transformation needed for v1 -> v6\nfunction _v1ToV6(v1Bytes, randomize = false) {\n  return Uint8Array.of((v1Bytes[6] & 0x0f) << 4 | v1Bytes[7] >> 4 & 0x0f, (v1Bytes[7] & 0x0f) << 4 | (v1Bytes[4] & 0xf0) >> 4, (v1Bytes[4] & 0x0f) << 4 | (v1Bytes[5] & 0xf0) >> 4, (v1Bytes[5] & 0x0f) << 4 | (v1Bytes[0] & 0xf0) >> 4, (v1Bytes[0] & 0x0f) << 4 | (v1Bytes[1] & 0xf0) >> 4, (v1Bytes[1] & 0x0f) << 4 | (v1Bytes[2] & 0xf0) >> 4, 0x60 | v1Bytes[2] & 0x0f, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AASe,SAAS,OAAO,IAAI;IACjC,MAAM,UAAU,OAAO,SAAS,WAAW,CAAA,GAAA,8LAAA,CAAA,UAAK,AAAD,EAAE,QAAQ;IACzD,MAAM,UAAU,QAAQ;IACxB,OAAO,OAAO,SAAS,WAAW,CAAA,GAAA,kMAAA,CAAA,kBAAe,AAAD,EAAE,WAAW;AAC/D;AAEA,kDAAkD;AAClD,SAAS,QAAQ,OAAO,EAAE,YAAY,KAAK;IACzC,OAAO,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,OAAO,CAAC,EAAE,IAAI,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,OAAO,OAAO,CAAC,EAAE,GAAG,MAAM,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG;AAC7d","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v35.js"],"sourcesContent":["import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n  return bytes;\n}\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    }\n\n    // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    if (buf) {\n      offset = offset || 0;\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n      return buf;\n    }\n    return unsafeStringify(bytes);\n  }\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch (err) {}\n\n  // For CommonJS default export support\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;AACA,SAAS,cAAc,GAAG;IACxB,MAAM,SAAS,mBAAmB,OAAO,cAAc;IAEvD,MAAM,QAAQ,EAAE;IAChB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,EAAE,EAAG;QACnC,MAAM,IAAI,CAAC,IAAI,UAAU,CAAC;IAC5B;IACA,OAAO;AACT;AACO,MAAM,MAAM;AACZ,MAAM,MAAM;AACJ,SAAS,IAAI,IAAI,EAAE,OAAO,EAAE,QAAQ;IACjD,SAAS,aAAa,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM;QACjD,IAAI;QACJ,IAAI,OAAO,UAAU,UAAU;YAC7B,QAAQ,cAAc;QACxB;QACA,IAAI,OAAO,cAAc,UAAU;YACjC,YAAY,CAAA,GAAA,8LAAA,CAAA,UAAK,AAAD,EAAE;QACpB;QACA,IAAI,CAAC,CAAC,aAAa,SAAS,MAAM,QAAQ,eAAe,KAAK,IAAI,KAAK,IAAI,WAAW,MAAM,MAAM,IAAI;YACpG,MAAM,UAAU;QAClB;QAEA,+CAA+C;QAC/C,2EAA2E;QAC3E,uCAAuC;QACvC,IAAI,QAAQ,IAAI,WAAW,KAAK,MAAM,MAAM;QAC5C,MAAM,GAAG,CAAC;QACV,MAAM,GAAG,CAAC,OAAO,UAAU,MAAM;QACjC,QAAQ,SAAS;QACjB,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,OAAO;QAC7B,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,GAAG,OAAO;QAC7B,IAAI,KAAK;YACP,SAAS,UAAU;YACnB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,EAAG;gBAC3B,GAAG,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,EAAE;YAC5B;YACA,OAAO;QACT;QACA,OAAO,CAAA,GAAA,kMAAA,CAAA,kBAAe,AAAD,EAAE;IACzB;IAEA,yDAAyD;IACzD,IAAI;QACF,aAAa,IAAI,GAAG;IACtB,EAAE,OAAO,KAAK,CAAC;IAEf,sCAAsC;IACtC,aAAa,GAAG,GAAG;IACnB,aAAa,GAAG,GAAG;IACnB,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 389, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/md5.js"],"sourcesContent":["import crypto from 'node:crypto';\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n  return crypto.createHash('md5').update(bytes).digest();\n}\nexport default md5;"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,IAAI,KAAK;IAChB,IAAI,MAAM,OAAO,CAAC,QAAQ;QACxB,QAAQ,OAAO,IAAI,CAAC;IACtB,OAAO,IAAI,OAAO,UAAU,UAAU;QACpC,QAAQ,OAAO,IAAI,CAAC,OAAO;IAC7B;IACA,OAAO,qHAAA,CAAA,UAAM,CAAC,UAAU,CAAC,OAAO,MAAM,CAAC,OAAO,MAAM;AACtD;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v3.js"],"sourcesContent":["import v35 from './v35.js';\nimport md5 from './md5.js';\nconst v3 = v35('v3', 0x30, md5);\nexport default v3;"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,KAAK,CAAA,GAAA,4LAAA,CAAA,UAAG,AAAD,EAAE,MAAM,MAAM,4LAAA,CAAA,UAAG;uCACf","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/native.js"],"sourcesContent":["import crypto from 'node:crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};"],"names":[],"mappings":";;;AAAA;;uCACe;IACb,YAAY,qHAAA,CAAA,UAAM,CAAC,UAAU;AAC/B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v4.js"],"sourcesContent":["import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(rnds);\n}\nexport default v4;"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,SAAS,GAAG,OAAO,EAAE,GAAG,EAAE,MAAM;IAC9B,IAAI,+LAAA,CAAA,UAAM,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,SAAS;QACzC,OAAO,+LAAA,CAAA,UAAM,CAAC,UAAU;IAC1B;IACA,UAAU,WAAW,CAAC;IACtB,MAAM,OAAO,QAAQ,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,4LAAA,CAAA,UAAG;IAElD,gEAAgE;IAChE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,OAAO;IAC3B,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,OAAO;IAE3B,oCAAoC;IACpC,IAAI,KAAK;QACP,SAAS,UAAU;QACnB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,EAAG;YAC3B,GAAG,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,EAAE;QAC3B;QACA,OAAO;IACT;IACA,OAAO,CAAA,GAAA,kMAAA,CAAA,kBAAe,AAAD,EAAE;AACzB;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/sha1.js"],"sourcesContent":["import crypto from 'node:crypto';\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n  return crypto.createHash('sha1').update(bytes).digest();\n}\nexport default sha1;"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,KAAK,KAAK;IACjB,IAAI,MAAM,OAAO,CAAC,QAAQ;QACxB,QAAQ,OAAO,IAAI,CAAC;IACtB,OAAO,IAAI,OAAO,UAAU,UAAU;QACpC,QAAQ,OAAO,IAAI,CAAC,OAAO;IAC7B;IACA,OAAO,qHAAA,CAAA,UAAM,CAAC,UAAU,CAAC,QAAQ,MAAM,CAAC,OAAO,MAAM;AACvD;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v5.js"],"sourcesContent":["import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,KAAK,CAAA,GAAA,4LAAA,CAAA,UAAG,AAAD,EAAE,MAAM,MAAM,6LAAA,CAAA,UAAI;uCAChB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 508, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v6.js"],"sourcesContent":["import { unsafeStringify } from './stringify.js';\nimport v1 from './v1.js';\nimport v1ToV6 from './v1ToV6.js';\n\n/**\n *\n * @param {object} options\n * @param {Uint8Array=} buf\n * @param {number=} offset\n * @returns\n */\nexport default function v6(options = {}, buf, offset = 0) {\n  // v6 is v1 with different field layout, so we start with a v1 UUID, albeit\n  // with slightly different behavior around how the clock_seq and node fields\n  // are randomized, which is why we call v1 with _v6: true.\n  let bytes = v1({\n    ...options,\n    _v6: true\n  }, new Uint8Array(16));\n\n  // Reorder the fields to v6 layout.\n  bytes = v1ToV6(bytes);\n\n  // Return as a byte array if requested\n  if (buf) {\n    for (let i = 0; i < 16; i++) {\n      buf[offset + i] = bytes[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(bytes);\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AASe,SAAS,GAAG,UAAU,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC;IACtD,2EAA2E;IAC3E,4EAA4E;IAC5E,0DAA0D;IAC1D,IAAI,QAAQ,CAAA,GAAA,2LAAA,CAAA,UAAE,AAAD,EAAE;QACb,GAAG,OAAO;QACV,KAAK;IACP,GAAG,IAAI,WAAW;IAElB,mCAAmC;IACnC,QAAQ,CAAA,GAAA,+LAAA,CAAA,UAAM,AAAD,EAAE;IAEf,sCAAsC;IACtC,IAAI,KAAK;QACP,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YAC3B,GAAG,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC,EAAE;QAC5B;QACA,OAAO;IACT;IACA,OAAO,CAAA,GAAA,kMAAA,CAAA,kBAAe,AAAD,EAAE;AACzB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 542, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v6ToV1.js"],"sourcesContent":["import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\n\n/**\n * Convert a v6 UUID to a v1 UUID\n *\n * @param {string|Uint8Array} uuid - The v6 UUID to convert to v6\n * @returns {string|Uint8Array} The v1 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nexport default function v6ToV1(uuid) {\n  const v6Bytes = typeof uuid === 'string' ? parse(uuid) : uuid;\n  const v1Bytes = _v6ToV1(v6Bytes);\n  return typeof uuid === 'string' ? unsafeStringify(v1Bytes) : v1Bytes;\n}\n\n// Do the field transformation needed for v6 -> v1\nfunction _v6ToV1(v6Bytes) {\n  return Uint8Array.of((v6Bytes[3] & 0x0f) << 4 | v6Bytes[4] >> 4 & 0x0f, (v6Bytes[4] & 0x0f) << 4 | (v6Bytes[5] & 0xf0) >> 4, (v6Bytes[5] & 0x0f) << 4 | v6Bytes[6] & 0x0f, v6Bytes[7], (v6Bytes[1] & 0x0f) << 4 | (v6Bytes[2] & 0xf0) >> 4, (v6Bytes[2] & 0x0f) << 4 | (v6Bytes[3] & 0xf0) >> 4, 0x10 | (v6Bytes[0] & 0xf0) >> 4, (v6Bytes[0] & 0x0f) << 4 | (v6Bytes[1] & 0xf0) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AASe,SAAS,OAAO,IAAI;IACjC,MAAM,UAAU,OAAO,SAAS,WAAW,CAAA,GAAA,8LAAA,CAAA,UAAK,AAAD,EAAE,QAAQ;IACzD,MAAM,UAAU,QAAQ;IACxB,OAAO,OAAO,SAAS,WAAW,CAAA,GAAA,kMAAA,CAAA,kBAAe,AAAD,EAAE,WAAW;AAC/D;AAEA,kDAAkD;AAClD,SAAS,QAAQ,OAAO;IACtB,OAAO,WAAW,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,OAAO,CAAC,EAAE,IAAI,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,OAAO,CAAC,EAAE,GAAG,MAAM,OAAO,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,KAAK,GAAG,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG;AAC7d","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/v7.js"],"sourcesContent":["import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\n/**\n * UUID V7 - Unix Epoch time-based UUID\n *\n * The IETF has published RFC9562, introducing 3 new UUID versions (6,7,8). This\n * implementation of V7 is based on the accepted, though not yet approved,\n * revisions.\n *\n * RFC 9562:https://www.rfc-editor.org/rfc/rfc9562.html Universally Unique\n * IDentifiers (UUIDs)\n\n *\n * Sample V7 value:\n * https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv7-value\n *\n * Monotonic Bit Layout: RFC rfc9562.6.2 Method 1, Dedicated Counter Bits ref:\n *     https://www.rfc-editor.org/rfc/rfc9562.html#section-6.2-5.1\n *\n *   0                   1                   2                   3 0 1 2 3 4 5 6\n *   7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                          unix_ts_ms                           |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |          unix_ts_ms           |  ver  |        seq_hi         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |var|               seq_low               |        rand         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                             rand                              |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *\n * seq is a 31 bit serialized counter; comprised of 12 bit seq_hi and 19 bit\n * seq_low, and randomly initialized upon timestamp change. 31 bit counter size\n * was selected as any bitwise operations in node are done as _signed_ 32 bit\n * ints. we exclude the sign bit.\n */\n\nlet _seqLow = null;\nlet _seqHigh = null;\nlet _msecs = 0;\nfunction v7(options, buf, offset) {\n  options = options || {};\n\n  // initialize buffer and pointer\n  let i = buf && offset || 0;\n  const b = buf || new Uint8Array(16);\n\n  // rnds is Uint8Array(16) filled with random bytes\n  const rnds = options.random || (options.rng || rng)();\n\n  // milliseconds since unix epoch, 1970-01-01 00:00\n  const msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // seq is user provided 31 bit counter\n  let seq = options.seq !== undefined ? options.seq : null;\n\n  // initialize local seq high/low parts\n  let seqHigh = _seqHigh;\n  let seqLow = _seqLow;\n\n  // check if clock has advanced and user has not provided msecs\n  if (msecs > _msecs && options.msecs === undefined) {\n    _msecs = msecs;\n\n    // unless user provided seq, reset seq parts\n    if (seq !== null) {\n      seqHigh = null;\n      seqLow = null;\n    }\n  }\n\n  // if we have a user provided seq\n  if (seq !== null) {\n    // trim provided seq to 31 bits of value, avoiding overflow\n    if (seq > 0x7fffffff) {\n      seq = 0x7fffffff;\n    }\n\n    // split provided seq into high/low parts\n    seqHigh = seq >>> 19 & 0xfff;\n    seqLow = seq & 0x7ffff;\n  }\n\n  // randomly initialize seq\n  if (seqHigh === null || seqLow === null) {\n    seqHigh = rnds[6] & 0x7f;\n    seqHigh = seqHigh << 8 | rnds[7];\n    seqLow = rnds[8] & 0x3f; // pad for var\n    seqLow = seqLow << 8 | rnds[9];\n    seqLow = seqLow << 5 | rnds[10] >>> 3;\n  }\n\n  // increment seq if within msecs window\n  if (msecs + 10000 > _msecs && seq === null) {\n    if (++seqLow > 0x7ffff) {\n      seqLow = 0;\n      if (++seqHigh > 0xfff) {\n        seqHigh = 0;\n\n        // increment internal _msecs. this allows us to continue incrementing\n        // while staying monotonic. Note, once we hit 10k milliseconds beyond system\n        // clock, we will reset breaking monotonicity (after (2^31)*10000 generations)\n        _msecs++;\n      }\n    }\n  } else {\n    // resetting; we have advanced more than\n    // 10k milliseconds beyond system clock\n    _msecs = msecs;\n  }\n  _seqHigh = seqHigh;\n  _seqLow = seqLow;\n\n  // [bytes 0-5] 48 bits of local timestamp\n  b[i++] = _msecs / 0x10000000000 & 0xff;\n  b[i++] = _msecs / 0x100000000 & 0xff;\n  b[i++] = _msecs / 0x1000000 & 0xff;\n  b[i++] = _msecs / 0x10000 & 0xff;\n  b[i++] = _msecs / 0x100 & 0xff;\n  b[i++] = _msecs & 0xff;\n\n  // [byte 6] - set 4 bits of version (7) with first 4 bits seq_hi\n  b[i++] = seqHigh >>> 4 & 0x0f | 0x70;\n\n  // [byte 7] remaining 8 bits of seq_hi\n  b[i++] = seqHigh & 0xff;\n\n  // [byte 8] - variant (2 bits), first 6 bits seq_low\n  b[i++] = seqLow >>> 13 & 0x3f | 0x80;\n\n  // [byte 9] 8 bits seq_low\n  b[i++] = seqLow >>> 5 & 0xff;\n\n  // [byte 10] remaining 5 bits seq_low, 3 bits random\n  b[i++] = seqLow << 3 & 0xff | rnds[10] & 0x07;\n\n  // [bytes 11-15] always random\n  b[i++] = rnds[11];\n  b[i++] = rnds[12];\n  b[i++] = rnds[13];\n  b[i++] = rnds[14];\n  b[i++] = rnds[15];\n  return buf || unsafeStringify(b);\n}\nexport default v7;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 699, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/ai/node_modules/uuid/dist/esm-node/version.js"],"sourcesContent":["import validate from './validate.js';\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n  return parseInt(uuid.slice(14, 15), 16);\n}\nexport default version;"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,QAAQ,IAAI;IACnB,IAAI,CAAC,CAAA,GAAA,iMAAA,CAAA,UAAQ,AAAD,EAAE,OAAO;QACnB,MAAM,UAAU;IAClB;IACA,OAAO,SAAS,KAAK,KAAK,CAAC,IAAI,KAAK;AACtC;uCACe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 777, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/auth.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { logger } from 'genkit/logging';\nimport { GoogleAuth, auth, type CredentialBody } from 'google-auth-library';\nimport type { GcpPrincipal, GcpTelemetryConfig } from './types.js';\n\n/**\n * Allows Google Cloud credentials to be to passed in \"raw\" as an environment\n * variable. This is helpful in environments where the developer has limited\n * ability to configure their compute environment, but does have the ablilty to\n * set environment variables.\n *\n * This is different from the GOOGLE_APPLICATION_CREDENTIALS used by ADC, which\n * represents a path to a credential file on disk. In *most* cases, even for\n * 3rd party cloud providers, developers *should* attempt to use ADC, which\n * searches for credential files in standard locations, before using this\n * method.\n *\n * See also: https://github.com/googleapis/google-auth-library-nodejs?tab=readme-ov-file#loading-credentials-from-environment-variables\n */\nexport async function credentialsFromEnvironment(): Promise<\n  Partial<GcpTelemetryConfig>\n> {\n  let authClient: GoogleAuth;\n  const options: Partial<GcpTelemetryConfig> = {};\n\n  if (process.env.GCLOUD_SERVICE_ACCOUNT_CREDS) {\n    logger.debug('Retrieving credentials from GCLOUD_SERVICE_ACCOUNT_CREDS');\n    const serviceAccountCreds = JSON.parse(\n      process.env.GCLOUD_SERVICE_ACCOUNT_CREDS\n    );\n    const authOptions = { credentials: serviceAccountCreds };\n    authClient = new GoogleAuth(authOptions);\n    options.credentials = await authClient.getCredentials();\n  } else {\n    authClient = new GoogleAuth();\n  }\n  try {\n    const projectId = await authClient.getProjectId();\n    if (projectId && projectId.length > 0) {\n      options.projectId = projectId;\n    }\n  } catch (error) {\n    logger.warn(error);\n  }\n  return options;\n}\n\n/**\n * Resolve the currently configured principal, either from the Genkit specific\n * GCLOUD_SERVICE_ACCOUNT_CREDS environment variable, or from ADC.\n *\n * Since the Google Cloud Telemetry Exporter will discover credentials on its\n * own, we don't immediately have access to the current principal. This method\n * can be handy to get access to the current credential for logging debugging\n * information or other purposes.\n **/\nexport async function resolveCurrentPrincipal(): Promise<GcpPrincipal> {\n  const envCredentials = await credentialsFromEnvironment();\n  let adcCredentials = {} as CredentialBody;\n  try {\n    adcCredentials = await auth.getCredentials();\n  } catch (e) {\n    logger.debug('Could not retrieve client_email from ADC.');\n  }\n\n  // TODO(michaeldoyle): How to look up if the user provided credentials in the\n  // plugin config (i.e. GcpTelemetryOptions)\n  const serviceAccountEmail =\n    envCredentials.credentials?.client_email ?? adcCredentials.client_email;\n\n  return {\n    projectId: envCredentials.projectId,\n    serviceAccountEmail,\n  };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,eAAA,CAAA;AAAA,SAAA,cAAA;IAAA,4BAAA,IAAA;IAAA,yBAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAeA,IAAA,iBAAuB;AACvB,IAAA,6BAAsD;AAiBtD,eAAsB,6BAEpB;IACA,IAAI;IACJ,MAAM,UAAuC,CAAC;IAE9C,IAAI,QAAQ,GAAA,CAAI,4BAAA,EAA8B;QAC5C,eAAA,MAAA,CAAO,KAAA,CAAM,0DAA0D;QACvE,MAAM,sBAAsB,KAAK,KAAA,CAC/B,QAAQ,GAAA,CAAI,4BAAA;QAEd,MAAM,cAAc;YAAE,aAAa;QAAoB;QACvD,aAAa,IAAI,2BAAA,UAAA,CAAW,WAAW;QACvC,QAAQ,WAAA,GAAc,MAAM,WAAW,cAAA,CAAe;IACxD,OAAO;QACL,aAAa,IAAI,2BAAA,UAAA,CAAW;IAC9B;IACA,IAAI;QACF,MAAM,YAAY,MAAM,WAAW,YAAA,CAAa;QAChD,IAAI,aAAa,UAAU,MAAA,GAAS,GAAG;YACrC,QAAQ,SAAA,GAAY;QACtB;IACF,EAAA,OAAS,OAAO;QACd,eAAA,MAAA,CAAO,IAAA,CAAK,KAAK;IACnB;IACA,OAAO;AACT;AAWA,eAAsB,0BAAiD;IACrE,MAAM,iBAAiB,MAAM,2BAA2B;IACxD,IAAI,iBAAiB,CAAC;IACtB,IAAI;QACF,iBAAiB,MAAM,2BAAA,IAAA,CAAK,cAAA,CAAe;IAC7C,EAAA,OAAS,GAAG;QACV,eAAA,MAAA,CAAO,KAAA,CAAM,2CAA2C;IAC1D;IAIA,MAAM,sBACJ,eAAe,WAAA,EAAa,gBAAgB,eAAe,YAAA;IAE7D,OAAO;QACL,WAAW,eAAe,SAAA;QAC1B;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 856, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/utils.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TraceFlags } from '@opentelemetry/api';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport { resolveCurrentPrincipal } from './auth.js';\n\n/**\n * The maximum length (in characters) of a logged input or output.\n * This limit exists to align the logs with GCP logging size limits.\n * */\nconst MAX_LOG_CONTENT_CHARS = 128_000;\n\n/**\n * The maximum length (in characters) of a flow path.\n */\nconst MAX_PATH_CHARS = 4096;\n\nexport function extractOuterFlowNameFromPath(path: string) {\n  if (!path || path === '<unknown>') {\n    return '<unknown>';\n  }\n\n  const flowName = path.match('/{(.+),t:flow}+');\n  return flowName ? flowName[1] : '<unknown>';\n}\n\nexport function truncate(\n  text: string,\n  limit: number = MAX_LOG_CONTENT_CHARS\n): string {\n  return text ? text.substring(0, limit) : text;\n}\n\nexport function truncatePath(path: string) {\n  return truncate(path, MAX_PATH_CHARS);\n}\n\n/**\n * Extract first feature name from a path\n * e.g. for /{myFlow,t:flow}/{myStep,t:flowStep}/{googleai/gemini-pro,t:action,s:model}\n * returns \"myFlow\"\n */\nexport function extractOuterFeatureNameFromPath(path: string) {\n  if (!path || path === '<unknown>') {\n    return '<unknown>';\n  }\n  const first = path.split('/')[1];\n  const featureName = first?.match(\n    '{(.+),t:(flow|action|prompt|dotprompt|helper)'\n  );\n  return featureName ? featureName[1] : '<unknown>';\n}\n\nexport function extractErrorName(events: TimedEvent[]): string | undefined {\n  return events\n    .filter((event) => event.name === 'exception')\n    .map((event) => {\n      const attributes = event.attributes;\n      return attributes\n        ? truncate(attributes['exception.type'] as string, 1024)\n        : '<unknown>';\n    })\n    .at(0);\n}\n\nexport function extractErrorMessage(events: TimedEvent[]): string | undefined {\n  return events\n    .filter((event) => event.name === 'exception')\n    .map((event) => {\n      const attributes = event.attributes;\n      return attributes\n        ? truncate(attributes['exception.message'] as string, 4096)\n        : '<unknown>';\n    })\n    .at(0);\n}\n\nexport function extractErrorStack(events: TimedEvent[]): string | undefined {\n  return events\n    .filter((event) => event.name === 'exception')\n    .map((event) => {\n      const attributes = event.attributes;\n      return attributes\n        ? truncate(attributes['exception.stacktrace'] as string, 32_768)\n        : '<unknown>';\n    })\n    .at(0);\n}\n\nexport function createCommonLogAttributes(\n  span: ReadableSpan,\n  projectId?: string\n) {\n  const spanContext = span.spanContext();\n  const isSampled = !!(spanContext.traceFlags & TraceFlags.SAMPLED);\n  return {\n    'logging.googleapis.com/spanId': spanContext.spanId,\n    'logging.googleapis.com/trace': `projects/${projectId}/traces/${spanContext.traceId}`,\n    'logging.googleapis.com/trace_sampled': isSampled ? '1' : '0',\n  };\n}\n\nexport function requestDenied(\n  err: Error & {\n    code?: number;\n    statusDetails?: Record<string, any>[];\n  }\n) {\n  return err.code === 7;\n}\n\nexport function loggingDenied(\n  err: Error & {\n    code?: number;\n    statusDetails?: Record<string, any>[];\n  }\n) {\n  return (\n    requestDenied(err) &&\n    err.statusDetails?.some((details) => {\n      return details?.metadata?.permission === 'logging.logEntries.create';\n    })\n  );\n}\n\nexport function tracingDenied(\n  err: Error & {\n    code?: number;\n    statusDetails?: Record<string, any>[];\n  }\n) {\n  // Looks like we don't get status details like we do with logging\n  return requestDenied(err);\n}\n\nexport function metricsDenied(\n  err: Error & {\n    code?: number;\n    statusDetails?: Record<string, any>[];\n  }\n) {\n  // Looks like we don't get status details like we do with logging\n  return requestDenied(err);\n}\n\nexport async function permissionDeniedHelpText(role: string) {\n  const principal = await resolveCurrentPrincipal();\n  return `Add the role '${role}' to your Service Account in the IAM & Admin page on the Google Cloud console, or use the following command:\\n\\ngcloud projects add-iam-policy-binding ${principal.projectId ?? '${PROJECT_ID}'} \\\\\\n    --member=serviceAccount:${principal.serviceAccountEmail || '${SERVICE_ACCT}'} \\\\\\n    --role=${role}`;\n}\n\nexport async function loggingDeniedHelpText() {\n  return permissionDeniedHelpText('roles/logging.logWriter');\n}\n\nexport async function tracingDeniedHelpText() {\n  return permissionDeniedHelpText('roles/cloudtrace.agent');\n}\n\nexport async function metricsDeniedHelpText() {\n  return permissionDeniedHelpText('roles/monitoring.metricWriter');\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1006, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/gcpLogger.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggingWinston } from '@google-cloud/logging-winston';\nimport { getCurrentEnv } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport type { Writable } from 'stream';\nimport type { GcpTelemetryConfig } from './types.js';\nimport { loggingDenied, loggingDeniedHelpText } from './utils.js';\n\n/**\n * Additional streams for writing log data to. Useful for unit testing.\n */\nlet additionalStream: Writable;\nlet useJsonFormatOverride = false;\n\n/**\n * Provides a logger for exporting Genkit debug logs to GCP Cloud\n * logs.\n */\nexport class GcpLogger {\n  constructor(private readonly config: GcpTelemetryConfig) {}\n\n  async getLogger(env: string) {\n    // Dynamically importing winston here more strictly controls\n    // the import order relative to registering instrumentation\n    // with OpenTelemetry. Incorrect import order will trigger\n    // an internal OT warning and will result in logs not being\n    // associated with correct spans/traces.\n    const winston = await import('winston');\n\n    const format =\n      useJsonFormatOverride || this.shouldExport(env)\n        ? { format: winston.format.json() }\n        : {\n            format: winston.format.printf((info): string => {\n              return `[${info.level}] ${info.message}`;\n            }),\n          };\n\n    const transports: any[] = [];\n    transports.push(\n      this.shouldExport(env)\n        ? new LoggingWinston({\n            labels: { module: 'genkit' },\n            prefix: 'genkit',\n            logName: 'genkit_log',\n            projectId: this.config.projectId,\n            credentials: this.config.credentials,\n            autoRetry: true,\n            defaultCallback: await this.getErrorHandler(),\n          })\n        : new winston.transports.Console()\n    );\n    if (additionalStream) {\n      transports.push(\n        new winston.transports.Stream({ stream: additionalStream })\n      );\n    }\n    return winston.createLogger({\n      transports: transports,\n      ...format,\n      exceptionHandlers: [new winston.transports.Console()],\n    });\n  }\n\n  private async getErrorHandler(): Promise<(err: Error | null) => void> {\n    // only log the first time\n    let instructionsLogged = false;\n    const helpInstructions = await loggingDeniedHelpText();\n\n    return async (err: Error | null) => {\n      // Use the defaultLogger so that logs don't get swallowed by\n      // the open telemetry exporter\n      const defaultLogger = logger.defaultLogger;\n      if (err && loggingDenied(err)) {\n        if (!instructionsLogged) {\n          instructionsLogged = true;\n          defaultLogger.error(\n            `Unable to send logs to Google Cloud: ${err.message}\\n\\n${helpInstructions}\\n`\n          );\n        }\n      } else if (err) {\n        defaultLogger.error(`Unable to send logs to Google Cloud: ${err}`);\n      }\n\n      if (err) {\n        // Assume the logger is compromised, and we need a new one\n        // Reinitialize the genkit logger with a new instance with the same config\n        logger.init(\n          await new GcpLogger(this.config).getLogger(getCurrentEnv())\n        );\n        defaultLogger.info('Initialized a new GcpLogger.');\n      }\n    };\n  }\n\n  private shouldExport(env?: string) {\n    return this.config.export;\n  }\n}\n\n/** @hidden */\nexport function __addTransportStreamForTesting(stream: Writable) {\n  additionalStream = stream;\n}\n\n/** @hidden */\nexport function __useJsonFormatForTesting() {\n  useJsonFormatOverride = true;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,oBAAA,CAAA;AAAA,SAAA,mBAAA;IAAA,WAAA,IAAA;IAAA,gCAAA,IAAA;IAAA,2BAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBA,IAAA,yBAA+B;AAC/B,IAAA,gBAA8B;AAC9B,IAAA,iBAAuB;AAGvB,IAAA,eAAqD;AAKrD,IAAI;AACJ,IAAI,wBAAwB;AAMrB,MAAM,UAAU;IACrB,YAA6B,MAAA,CAA4B;QAA5B,IAAA,CAAA,MAAA,GAAA;IAA6B;IAE1D,MAAM,UAAU,GAAA,EAAa;QAM3B,MAAM,UAAU,MAAM,OAAO,SAAS;QAEtC,MAAM,SACJ,yBAAyB,IAAA,CAAK,YAAA,CAAa,GAAG,IAC1C;YAAE,QAAQ,QAAQ,MAAA,CAAO,IAAA,CAAK;QAAE,IAChC;YACE,QAAQ,QAAQ,MAAA,CAAO,MAAA,CAAO,CAAC,SAAiB;gBAC9C,OAAO,CAAA,CAAA,EAAI,KAAK,KAAK,CAAA,EAAA,EAAK,KAAK,OAAO,EAAA;YACxC,CAAC;QACH;QAEN,MAAM,aAAoB,CAAC,CAAA;QAC3B,WAAW,IAAA,CACT,IAAA,CAAK,YAAA,CAAa,GAAG,IACjB,IAAI,uBAAA,cAAA,CAAe;YACjB,QAAQ;gBAAE,QAAQ;YAAS;YAC3B,QAAQ;YACR,SAAS;YACT,WAAW,IAAA,CAAK,MAAA,CAAO,SAAA;YACvB,aAAa,IAAA,CAAK,MAAA,CAAO,WAAA;YACzB,WAAW;YACX,iBAAiB,MAAM,IAAA,CAAK,eAAA,CAAgB;QAC9C,CAAC,IACD,IAAI,QAAQ,UAAA,CAAW,OAAA,CAAQ;QAErC,IAAI,kBAAkB;YACpB,WAAW,IAAA,CACT,IAAI,QAAQ,UAAA,CAAW,MAAA,CAAO;gBAAE,QAAQ;YAAiB,CAAC;QAE9D;QACA,OAAO,QAAQ,YAAA,CAAa;YAC1B;YACA,GAAG,MAAA;YACH,mBAAmB;gBAAC,IAAI,QAAQ,UAAA,CAAW,OAAA,CAAQ,CAAC;aAAA;QACtD,CAAC;IACH;IAEA,MAAc,kBAAwD;QAEpE,IAAI,qBAAqB;QACzB,MAAM,mBAAmB,MAAA,CAAA,GAAM,aAAA,qBAAA,EAAsB;QAErD,OAAO,OAAO,QAAsB;YAGlC,MAAM,gBAAgB,eAAA,MAAA,CAAO,aAAA;YAC7B,IAAI,OAAA,CAAA,GAAO,aAAA,aAAA,EAAc,GAAG,GAAG;gBAC7B,IAAI,CAAC,oBAAoB;oBACvB,qBAAqB;oBACrB,cAAc,KAAA,CACZ,CAAA,qCAAA,EAAwC,IAAI,OAAO,CAAA;;AAAA,EAAO,gBAAgB,CAAA;AAAA,CAAA;gBAE9E;YACF,OAAA,IAAW,KAAK;gBACd,cAAc,KAAA,CAAM,CAAA,qCAAA,EAAwC,GAAG,EAAE;YACnE;YAEA,IAAI,KAAK;gBAGP,eAAA,MAAA,CAAO,IAAA,CACL,MAAM,IAAI,UAAU,IAAA,CAAK,MAAM,EAAE,SAAA,CAAA,CAAA,GAAU,cAAA,aAAA,EAAc,CAAC;gBAE5D,cAAc,IAAA,CAAK,8BAA8B;YACnD;QACF;IACF;IAEQ,aAAa,GAAA,EAAc;QACjC,OAAO,IAAA,CAAK,MAAA,CAAO,MAAA;IACrB;AACF;AAGO,SAAS,+BAA+B,MAAA,EAAkB;IAC/D,mBAAmB;AACrB;AAGO,SAAS,4BAA4B;IAC1C,wBAAwB;AAC1B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1133, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/telemetry/action.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { logger } from 'genkit/logging';\nimport { toDisplayPath } from 'genkit/tracing';\nimport { type Telemetry } from '../metrics.js';\nimport {\n  createCommonLogAttributes,\n  extractOuterFeatureNameFromPath,\n  truncate,\n  truncatePath,\n} from '../utils.js';\n\nclass ActionTelemetry implements Telemetry {\n  tick(\n    span: ReadableSpan,\n    logInputAndOutput: boolean,\n    projectId?: string\n  ): void {\n    if (!logInputAndOutput) {\n      return;\n    }\n    const attributes = span.attributes;\n    const actionName = (attributes['genkit:name'] as string) || '<unknown>';\n    const subtype = attributes['genkit:metadata:subtype'] as string;\n\n    if (subtype === 'tool' || actionName === 'generate') {\n      const path = (attributes['genkit:path'] as string) || '<unknown>';\n      const input = truncate(attributes['genkit:input'] as string);\n      const output = truncate(attributes['genkit:output'] as string);\n      const sessionId = attributes['genkit:sessionId'] as string;\n      const threadName = attributes['genkit:threadName'] as string;\n      let featureName = extractOuterFeatureNameFromPath(path);\n      if (!featureName || featureName === '<unknown>') {\n        featureName = actionName;\n      }\n\n      if (input) {\n        this.writeLog(\n          span,\n          'Input',\n          featureName,\n          path,\n          input,\n          projectId,\n          sessionId,\n          threadName\n        );\n      }\n      if (output) {\n        this.writeLog(\n          span,\n          'Output',\n          featureName,\n          path,\n          output,\n          projectId,\n          sessionId,\n          threadName\n        );\n      }\n    }\n  }\n\n  private writeLog(\n    span: ReadableSpan,\n    tag: string,\n    featureName: string,\n    qualifiedPath: string,\n    content: string,\n    projectId?: string,\n    sessionId?: string,\n    threadName?: string\n  ) {\n    const path = truncatePath(toDisplayPath(qualifiedPath));\n    const sharedMetadata = {\n      ...createCommonLogAttributes(span, projectId),\n      path,\n      qualifiedPath,\n      featureName,\n      sessionId,\n      threadName,\n    };\n    logger.logStructured(`${tag}[${path}, ${featureName}]`, {\n      ...sharedMetadata,\n      content,\n    });\n  }\n}\n\nconst actionTelemetry = new ActionTelemetry();\nexport { actionTelemetry };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,iBAAA,CAAA;AAAA,SAAA,gBAAA;IAAA,iBAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAiBA,IAAA,iBAAuB;AACvB,IAAA,iBAA8B;AAE9B,IAAA,eAKO;AAEP,MAAM,gBAAqC;IACzC,KACE,IAAA,EACA,iBAAA,EACA,SAAA,EACM;QACN,IAAI,CAAC,mBAAmB;YACtB;QACF;QACA,MAAM,aAAa,KAAK,UAAA;QACxB,MAAM,aAAc,UAAA,CAAW,aAAa,CAAA,IAAgB;QAC5D,MAAM,UAAU,UAAA,CAAW,yBAAyB,CAAA;QAEpD,IAAI,YAAY,UAAU,eAAe,YAAY;YACnD,MAAM,OAAQ,UAAA,CAAW,aAAa,CAAA,IAAgB;YACtD,MAAM,QAAA,CAAA,GAAQ,aAAA,QAAA,EAAS,UAAA,CAAW,cAAc,CAAW;YAC3D,MAAM,SAAA,CAAA,GAAS,aAAA,QAAA,EAAS,UAAA,CAAW,eAAe,CAAW;YAC7D,MAAM,YAAY,UAAA,CAAW,kBAAkB,CAAA;YAC/C,MAAM,aAAa,UAAA,CAAW,mBAAmB,CAAA;YACjD,IAAI,cAAA,CAAA,GAAc,aAAA,+BAAA,EAAgC,IAAI;YACtD,IAAI,CAAC,eAAe,gBAAgB,aAAa;gBAC/C,cAAc;YAChB;YAEA,IAAI,OAAO;gBACT,IAAA,CAAK,QAAA,CACH,MACA,SACA,aACA,MACA,OACA,WACA,WACA;YAEJ;YACA,IAAI,QAAQ;gBACV,IAAA,CAAK,QAAA,CACH,MACA,UACA,aACA,MACA,QACA,WACA,WACA;YAEJ;QACF;IACF;IAEQ,SACN,IAAA,EACA,GAAA,EACA,WAAA,EACA,aAAA,EACA,OAAA,EACA,SAAA,EACA,SAAA,EACA,UAAA,EACA;QACA,MAAM,OAAA,CAAA,GAAO,aAAA,YAAA,EAAA,CAAA,GAAa,eAAA,aAAA,EAAc,aAAa,CAAC;QACtD,MAAM,iBAAiB;YACrB,GAAA,CAAA,GAAG,aAAA,yBAAA,EAA0B,MAAM,SAAS,CAAA;YAC5C;YACA;YACA;YACA;YACA;QACF;QACA,eAAA,MAAA,CAAO,aAAA,CAAc,GAAG,GAAG,CAAA,CAAA,EAAI,IAAI,CAAA,EAAA,EAAK,WAAW,CAAA,CAAA,CAAA,EAAK;YACtD,GAAG,cAAA;YACH;QACF,CAAC;IACH;AACF;AAEA,MAAM,kBAAkB,IAAI,gBAAgB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1216, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/metrics.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  metrics,\n  type Counter,\n  type Histogram,\n  type Meter,\n} from '@opentelemetry/api';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\n\nexport const METER_NAME = 'genkit';\nexport const METRIC_NAME_PREFIX = 'genkit';\nconst METRIC_DIMENSION_MAX_CHARS = 256;\n\nexport function internalMetricNamespaceWrap(...namespaces) {\n  return [METRIC_NAME_PREFIX, ...namespaces].join('/');\n}\n\ntype MetricCreateFn<T> = (meter: Meter) => T;\n\n/**\n * Wrapper for OpenTelemetry metrics.\n *\n * The OpenTelemetry {MeterProvider} can only be accessed through the metrics\n * API after the NodeSDK library has been initialized. To prevent race\n * conditions we defer the instantiation of the metric to when it is first\n * ticked.\n */\nclass Metric<T> {\n  readonly createFn: MetricCreateFn<T>;\n  readonly meterName: string;\n  metric?: T;\n\n  constructor(createFn: MetricCreateFn<T>, meterName: string = METER_NAME) {\n    this.meterName = meterName;\n    this.createFn = createFn;\n  }\n\n  get(): T {\n    if (!this.metric) {\n      this.metric = this.createFn(\n        metrics.getMeterProvider().getMeter(this.meterName)\n      );\n    }\n\n    return this.metric;\n  }\n}\n\n/**\n * Wrapper for an OpenTelemetry Counter.\n *\n * By using this wrapper, we defer initialization of the counter until it is\n * need, which ensures that the OpenTelemetry SDK has been initialized before\n * the metric has been defined.\n */\nexport class MetricCounter extends Metric<Counter> {\n  constructor(name: string, options: any) {\n    super((meter) => meter.createCounter(name, options));\n  }\n\n  add(val?: number, opts?: any) {\n    if (val) {\n      truncateDimensions(opts);\n      this.get().add(val, opts);\n    }\n  }\n}\n\n/**\n * Wrapper for an OpenTelemetry Histogram.\n *\n * By using this wrapper, we defer initialization of the counter until it is\n * need, which ensures that the OpenTelemetry SDK has been initialized before\n * the metric has been defined.\n */\nexport class MetricHistogram extends Metric<Histogram> {\n  constructor(name: string, options: any) {\n    super((meter) => meter.createHistogram(name, options));\n  }\n\n  record(val?: number, opts?: any) {\n    if (val) {\n      truncateDimensions(opts);\n      this.get().record(val, opts);\n    }\n  }\n}\n\n/**\n * Truncates all of the metric dimensions to ensure they are below the trace\n * attribute max. Labels should be consistent between metrics and traces so that\n * data can be properly correlated. This will truncate all dimensions for\n * metrics such that they will be consistent with data included in traces.\n */\nfunction truncateDimensions(opts?: any) {\n  if (opts) {\n    Object.keys(opts).forEach((k) => {\n      if (typeof opts[k] === 'string') {\n        opts[k] = opts[k].substring(0, METRIC_DIMENSION_MAX_CHARS);\n      }\n    });\n  }\n}\n\nexport interface Telemetry {\n  tick(span: ReadableSpan, logIO: boolean, projectId?: string): void;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,kBAAA,CAAA;AAAA,SAAA,iBAAA;IAAA,YAAA,IAAA;IAAA,oBAAA,IAAA;IAAA,eAAA,IAAA;IAAA,iBAAA,IAAA;IAAA,6BAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBA,IAAA,aAKO;AAGA,MAAM,aAAa;AACnB,MAAM,qBAAqB;AAClC,MAAM,6BAA6B;AAE5B,SAAS,4BAAA,GAA+B,UAAA,EAAY;IACzD,OAAO;QAAC,oBAAoB;WAAG,UAAU;KAAA,CAAE,IAAA,CAAK,GAAG;AACrD;AAYA,MAAM,OAAU;IACL,SAAA;IACA,UAAA;IACT,OAAA;IAEA,YAAY,QAAA,EAA6B,YAAoB,UAAA,CAAY;QACvE,IAAA,CAAK,SAAA,GAAY;QACjB,IAAA,CAAK,QAAA,GAAW;IAClB;IAEA,MAAS;QACP,IAAI,CAAC,IAAA,CAAK,MAAA,EAAQ;YAChB,IAAA,CAAK,MAAA,GAAS,IAAA,CAAK,QAAA,CACjB,WAAA,OAAA,CAAQ,gBAAA,CAAiB,EAAE,QAAA,CAAS,IAAA,CAAK,SAAS;QAEtD;QAEA,OAAO,IAAA,CAAK,MAAA;IACd;AACF;AASO,MAAM,sBAAsB,OAAgB;IACjD,YAAY,IAAA,EAAc,OAAA,CAAc;QACtC,KAAA,CAAM,CAAC,QAAU,MAAM,aAAA,CAAc,MAAM,OAAO,CAAC;IACrD;IAEA,IAAI,GAAA,EAAc,IAAA,EAAY;QAC5B,IAAI,KAAK;YACP,mBAAmB,IAAI;YACvB,IAAA,CAAK,GAAA,CAAI,EAAE,GAAA,CAAI,KAAK,IAAI;QAC1B;IACF;AACF;AASO,MAAM,wBAAwB,OAAkB;IACrD,YAAY,IAAA,EAAc,OAAA,CAAc;QACtC,KAAA,CAAM,CAAC,QAAU,MAAM,eAAA,CAAgB,MAAM,OAAO,CAAC;IACvD;IAEA,OAAO,GAAA,EAAc,IAAA,EAAY;QAC/B,IAAI,KAAK;YACP,mBAAmB,IAAI;YACvB,IAAA,CAAK,GAAA,CAAI,EAAE,MAAA,CAAO,KAAK,IAAI;QAC7B;IACF;AACF;AAQA,SAAS,mBAAmB,IAAA,EAAY;IACtC,IAAI,MAAM;QACR,OAAO,IAAA,CAAK,IAAI,EAAE,OAAA,CAAQ,CAAC,MAAM;YAC/B,IAAI,OAAO,IAAA,CAAK,CAAC,CAAA,KAAM,UAAU;gBAC/B,IAAA,CAAK,CAAC,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAE,SAAA,CAAU,GAAG,0BAA0B;YAC3D;QACF,CAAC;IACH;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1317, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/telemetry/engagement.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ValueType, type Attributes } from '@opentelemetry/api';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { GENKIT_VERSION } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport {\n  MetricCounter,\n  internalMetricNamespaceWrap,\n  type Telemetry,\n} from '../metrics.js';\nimport { createCommonLogAttributes, truncate } from '../utils.js';\n\nclass EngagementTelemetry implements Telemetry {\n  /**\n   * Wraps the declared metrics in a Genkit-specific, internal namespace.\n   */\n  private _N = internalMetricNamespaceWrap.bind(null, 'engagement');\n\n  private feedbackCounter = new MetricCounter(this._N('feedback'), {\n    description: 'Counts calls to genkit flows.',\n    valueType: ValueType.INT,\n  });\n\n  private acceptanceCounter = new MetricCounter(this._N('acceptance'), {\n    description: 'Tracks unique flow paths per flow.',\n    valueType: ValueType.INT,\n  });\n\n  tick(\n    span: ReadableSpan,\n    logInputAndOutput: boolean,\n    projectId?: string\n  ): void {\n    const subtype = span.attributes['genkit:metadata:subtype'] as string;\n\n    if (subtype === 'userFeedback') {\n      this.writeUserFeedback(span, projectId);\n      return;\n    }\n\n    if (subtype === 'userAcceptance') {\n      this.writeUserAcceptance(span, projectId);\n      return;\n    }\n\n    logger.warn(`Unknown user engagement subtype: ${subtype}`);\n  }\n\n  private writeUserFeedback(span: ReadableSpan, projectId?: string) {\n    const attributes = span.attributes;\n    const name = this.extractTraceName(attributes);\n\n    const dimensions = {\n      name,\n      value: attributes['genkit:metadata:feedbackValue'],\n      hasText: !!attributes['genkit:metadata:textFeedback'],\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    };\n    this.feedbackCounter.add(1, dimensions);\n\n    const metadata = {\n      ...createCommonLogAttributes(span, projectId),\n      feedbackValue: attributes['genkit:metadata:feedbackValue'],\n    };\n    if (attributes['genkit:metadata:textFeedback']) {\n      metadata['textFeedback'] = truncate(\n        attributes['genkit:metadata:textFeedback'] as string\n      );\n    }\n    logger.logStructured(`UserFeedback[${name}]`, metadata);\n  }\n\n  private writeUserAcceptance(span: ReadableSpan, projectId?: string) {\n    const attributes = span.attributes;\n    const name = this.extractTraceName(attributes);\n\n    const dimensions = {\n      name,\n      value: attributes['genkit:metadata:acceptanceValue'],\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    };\n    this.acceptanceCounter.add(1, dimensions);\n\n    const metadata = {\n      ...createCommonLogAttributes(span, projectId),\n      acceptanceValue: attributes['genkit:metadata:acceptanceValue'],\n    };\n    logger.logStructured(`UserAcceptance[${name}]`, metadata);\n  }\n\n  private extractTraceName(attributes: Attributes) {\n    const path = attributes['genkit:path'] as string;\n    if (!path || path === '<unknown>') {\n      return '<unknown>';\n    }\n\n    const name = path.match('/{(.+)}+');\n    return name ? name[1] : '<unknown>';\n  }\n}\n\nconst engagementTelemetry = new EngagementTelemetry();\nexport { engagementTelemetry };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1429, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/telemetry/feature.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ValueType } from '@opentelemetry/api';\nimport { hrTimeDuration, hrTimeToMilliseconds } from '@opentelemetry/core';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { GENKIT_VERSION, GenkitError } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { toDisplayPath } from 'genkit/tracing';\nimport {\n  MetricCounter,\n  MetricHistogram,\n  internalMetricNamespaceWrap,\n  type Telemetry,\n} from '../metrics.js';\nimport {\n  createCommonLogAttributes,\n  extractErrorName,\n  truncate,\n  truncatePath,\n} from '../utils.js';\n\nclass FeaturesTelemetry implements Telemetry {\n  /**\n   * Wraps the declared metrics in a Genkit-specific, internal namespace.\n   */\n  private _N = internalMetricNamespaceWrap.bind(null, 'feature');\n\n  private featureCounter = new MetricCounter(this._N('requests'), {\n    description: 'Counts calls to genkit features.',\n    valueType: ValueType.INT,\n  });\n\n  private featureLatencies = new MetricHistogram(this._N('latency'), {\n    description: 'Latencies when calling Genkit features.',\n    valueType: ValueType.DOUBLE,\n    unit: 'ms',\n  });\n\n  tick(\n    span: ReadableSpan,\n    logInputAndOutput: boolean,\n    projectId?: string\n  ): void {\n    const attributes = span.attributes;\n    const name = attributes['genkit:name'] as string;\n    const path = attributes['genkit:path'] as string;\n    const latencyMs = hrTimeToMilliseconds(\n      hrTimeDuration(span.startTime, span.endTime)\n    );\n    const isRoot = attributes['genkit:isRoot'] as boolean;\n    if (!isRoot) {\n      throw new GenkitError({\n        status: 'FAILED_PRECONDITION',\n        message: 'FeatureTelemetry tick called with non-root span.',\n      });\n    }\n    const state = attributes['genkit:state'] as string;\n\n    if (state === 'success') {\n      this.writeFeatureSuccess(name, latencyMs);\n    } else if (state === 'error') {\n      const errorName = extractErrorName(span.events) || '<unknown>';\n      this.writeFeatureFailure(name, latencyMs, errorName);\n    } else {\n      logger.warn(`Unknown state; ${state}`);\n      return;\n    }\n\n    if (logInputAndOutput) {\n      const input = truncate(attributes['genkit:input'] as string);\n      const output = truncate(attributes['genkit:output'] as string);\n      const sessionId = attributes['genkit:sessionId'] as string;\n      const threadName = attributes['genkit:threadName'] as string;\n\n      if (input) {\n        this.writeLog(\n          span,\n          'Input',\n          name,\n          path,\n          input,\n          projectId,\n          sessionId,\n          threadName\n        );\n      }\n      if (output) {\n        this.writeLog(\n          span,\n          'Output',\n          name,\n          path,\n          output,\n          projectId,\n          sessionId,\n          threadName\n        );\n      }\n    }\n  }\n\n  private writeFeatureSuccess(featureName: string, latencyMs: number) {\n    const dimensions = {\n      name: featureName,\n      status: 'success',\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    };\n    this.featureCounter.add(1, dimensions);\n    this.featureLatencies.record(latencyMs, dimensions);\n  }\n\n  private writeFeatureFailure(\n    featureName: string,\n    latencyMs: number,\n    errorName: string\n  ) {\n    const dimensions = {\n      name: featureName,\n      status: 'failure',\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n      error: errorName,\n    };\n    this.featureCounter.add(1, dimensions);\n    this.featureLatencies.record(latencyMs, dimensions);\n  }\n\n  private writeLog(\n    span: ReadableSpan,\n    tag: string,\n    featureName: string,\n    qualifiedPath: string,\n    content: string,\n    projectId?: string,\n    sessionId?: string,\n    threadName?: string\n  ) {\n    const path = truncatePath(toDisplayPath(qualifiedPath));\n    const sharedMetadata = {\n      ...createCommonLogAttributes(span, projectId),\n      path,\n      qualifiedPath,\n      featureName,\n      sessionId,\n      threadName,\n    };\n    logger.logStructured(`${tag}[${path}, ${featureName}]`, {\n      ...sharedMetadata,\n      content,\n    });\n  }\n}\n\nconst featuresTelemetry = new FeaturesTelemetry();\nexport { featuresTelemetry };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1559, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/telemetry/generate.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ValueType } from '@opentelemetry/api';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { createHash } from 'crypto';\nimport {\n  GENKIT_VERSION,\n  type GenerateRequestData,\n  type GenerateResponseData,\n  type GenerationUsage,\n  type MediaPart,\n  type Part,\n  type ToolRequestPart,\n  type ToolResponsePart,\n} from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { toDisplayPath } from 'genkit/tracing';\nimport {\n  MetricCounter,\n  MetricHistogram,\n  internalMetricNamespaceWrap,\n  type Telemetry,\n} from '../metrics.js';\nimport {\n  createCommonLogAttributes,\n  extractErrorName,\n  extractOuterFeatureNameFromPath,\n  truncate,\n  truncatePath,\n} from '../utils.js';\n\ntype SharedDimensions = {\n  modelName?: string;\n  featureName?: string;\n  path?: string;\n  status?: string;\n  source?: string;\n  sourceVersion?: string;\n};\n\nclass GenerateTelemetry implements Telemetry {\n  /**\n   * Wraps the declared metrics in a Genkit-specific, internal namespace.\n   */\n  private _N = internalMetricNamespaceWrap.bind(null, 'ai');\n\n  private actionCounter = new MetricCounter(this._N('generate/requests'), {\n    description: 'Counts calls to genkit generate actions.',\n    valueType: ValueType.INT,\n  });\n\n  private latencies = new MetricHistogram(this._N('generate/latency'), {\n    description: 'Latencies when interacting with a Genkit model.',\n    valueType: ValueType.DOUBLE,\n    unit: 'ms',\n  });\n\n  private inputCharacters = new MetricCounter(\n    this._N('generate/input/characters'),\n    {\n      description: 'Counts input characters to any Genkit model.',\n      valueType: ValueType.INT,\n    }\n  );\n\n  private inputTokens = new MetricCounter(this._N('generate/input/tokens'), {\n    description: 'Counts input tokens to a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private inputImages = new MetricCounter(this._N('generate/input/images'), {\n    description: 'Counts input images to a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private outputCharacters = new MetricCounter(\n    this._N('generate/output/characters'),\n    {\n      description: 'Counts output characters from a Genkit model.',\n      valueType: ValueType.INT,\n    }\n  );\n\n  private outputTokens = new MetricCounter(this._N('generate/output/tokens'), {\n    description: 'Counts output tokens from a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  private outputImages = new MetricCounter(this._N('generate/output/images'), {\n    description: 'Count output images from a Genkit model.',\n    valueType: ValueType.INT,\n  });\n\n  tick(\n    span: ReadableSpan,\n    logInputAndOutput: boolean,\n    projectId?: string\n  ): void {\n    const attributes = span.attributes;\n    const modelName = truncate(attributes['genkit:name'] as string, 1024);\n    const path = (attributes['genkit:path'] as string) || '';\n    const input =\n      'genkit:input' in attributes\n        ? (JSON.parse(\n            attributes['genkit:input']! as string\n          ) as GenerateRequestData)\n        : undefined;\n    const output =\n      'genkit:output' in attributes\n        ? (JSON.parse(\n            attributes['genkit:output']! as string\n          ) as GenerateResponseData)\n        : undefined;\n\n    const errName = extractErrorName(span.events);\n    let featureName = truncate(\n      (attributes['genkit:metadata:flow:name'] ||\n        extractOuterFeatureNameFromPath(path)) as string\n    );\n    if (!featureName || featureName === '<unknown>') {\n      featureName = 'generate';\n    }\n\n    const sessionId = attributes['genkit:sessionId'] as string;\n    const threadName = attributes['genkit:threadName'] as string;\n\n    if (input) {\n      this.recordGenerateActionMetrics(modelName, featureName, path, {\n        response: output,\n        errName,\n      });\n      this.recordGenerateActionConfigLogs(\n        span,\n        modelName,\n        featureName,\n        path,\n        input,\n        projectId,\n        sessionId,\n        threadName\n      );\n\n      if (logInputAndOutput) {\n        this.recordGenerateActionInputLogs(\n          span,\n          modelName,\n          featureName,\n          path,\n          input,\n          projectId,\n          sessionId,\n          threadName\n        );\n      }\n    }\n\n    if (output && logInputAndOutput) {\n      this.recordGenerateActionOutputLogs(\n        span,\n        modelName,\n        featureName,\n        path,\n        output,\n        projectId,\n        sessionId,\n        threadName\n      );\n    }\n  }\n\n  private recordGenerateActionMetrics(\n    modelName: string,\n    featureName: string,\n    path: string,\n    opts: {\n      response?: GenerateResponseData;\n      errName?: string;\n    }\n  ) {\n    this.doRecordGenerateActionMetrics(modelName, opts.response?.usage || {}, {\n      featureName,\n      path,\n      latencyMs: opts.response?.latencyMs,\n      errName: opts.errName,\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    });\n  }\n\n  private recordGenerateActionConfigLogs(\n    span: ReadableSpan,\n    model: string,\n    featureName: string,\n    qualifiedPath: string,\n    input: GenerateRequestData,\n    projectId?: string,\n    sessionId?: string,\n    threadName?: string\n  ) {\n    const path = truncatePath(toDisplayPath(qualifiedPath));\n    const sharedMetadata = {\n      ...createCommonLogAttributes(span, projectId),\n      model,\n      path,\n      qualifiedPath,\n      featureName,\n      sessionId,\n      threadName,\n    };\n    logger.logStructured(`Config[${path}, ${model}]`, {\n      ...sharedMetadata,\n      maxOutputTokens: input.config?.maxOutputTokens,\n      stopSequences: input.config?.stopSequences, // array\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    });\n  }\n\n  private recordGenerateActionInputLogs(\n    span: ReadableSpan,\n    model: string,\n    featureName: string,\n    qualifiedPath: string,\n    input: GenerateRequestData,\n    projectId?: string,\n    sessionId?: string,\n    threadName?: string\n  ) {\n    const path = truncatePath(toDisplayPath(qualifiedPath));\n    const sharedMetadata = {\n      ...createCommonLogAttributes(span, projectId),\n      model,\n      path,\n      qualifiedPath,\n      featureName,\n      sessionId,\n      threadName,\n    };\n\n    const messages = input.messages.length;\n    input.messages.forEach((msg, msgIdx) => {\n      const parts = msg.content.length;\n      msg.content.forEach((part, partIdx) => {\n        const partCounts = this.toPartCounts(partIdx, parts, msgIdx, messages);\n        logger.logStructured(`Input[${path}, ${model}] ${partCounts}`, {\n          ...sharedMetadata,\n          content: this.toPartLogContent(part),\n          role: msg.role,\n          partIndex: partIdx,\n          totalParts: parts,\n          messageIndex: msgIdx,\n          totalMessages: messages,\n        });\n      });\n    });\n  }\n\n  private recordGenerateActionOutputLogs(\n    span: ReadableSpan,\n    model: string,\n    featureName: string,\n    qualifiedPath: string,\n    output: GenerateResponseData,\n    projectId?: string,\n    sessionId?: string,\n    threadName?: string\n  ) {\n    const path = truncatePath(toDisplayPath(qualifiedPath));\n    const sharedMetadata = {\n      ...createCommonLogAttributes(span, projectId),\n      model,\n      path,\n      qualifiedPath,\n      featureName,\n      sessionId,\n      threadName,\n    };\n    const message = output.message || output.candidates?.[0]?.message!;\n\n    if (message?.content) {\n      const parts = message.content.length;\n      message.content.forEach((part, partIdx) => {\n        const partCounts = this.toPartCounts(partIdx, parts, 0, 1);\n        const initial = output.finishMessage\n          ? { finishMessage: truncate(output.finishMessage) }\n          : {};\n        logger.logStructured(`Output[${path}, ${model}] ${partCounts}`, {\n          ...initial,\n          ...sharedMetadata,\n          content: this.toPartLogContent(part),\n          role: message.role,\n          partIndex: partIdx,\n          totalParts: parts,\n          candidateIndex: 0,\n          totalCandidates: 1,\n          messageIndex: 0,\n          finishReason: output.finishReason,\n        });\n      });\n    }\n  }\n\n  private toPartCounts(\n    partOrdinal: number,\n    parts: number,\n    msgOrdinal: number,\n    messages: number\n  ): string {\n    if (parts > 1 && messages > 1) {\n      return `(part ${this.xOfY(partOrdinal, parts)} in message ${this.xOfY(\n        msgOrdinal,\n        messages\n      )})`;\n    }\n    if (parts > 1) {\n      return `(part ${this.xOfY(partOrdinal, parts)})`;\n    }\n    if (messages > 1) {\n      return `(message ${this.xOfY(msgOrdinal, messages)})`;\n    }\n    return '';\n  }\n\n  private xOfY(x: number, y: number): string {\n    return `${x + 1} of ${y}`;\n  }\n\n  private toPartLogContent(part: Part): string {\n    if (part.text) {\n      return truncate(part.text);\n    }\n    if (part.data) {\n      return truncate(JSON.stringify(part.data));\n    }\n    if (part.media) {\n      return this.toPartLogMedia(part);\n    }\n    if (part.toolRequest) {\n      return this.toPartLogToolRequest(part);\n    }\n    if (part.toolResponse) {\n      return this.toPartLogToolResponse(part);\n    }\n    if (part.custom) {\n      return truncate(JSON.stringify(part.custom));\n    }\n    return '<unknown format>';\n  }\n\n  private toPartLogMedia(part: MediaPart): string {\n    if (part.media.url.startsWith('data:')) {\n      const splitIdx = part.media.url.indexOf('base64,');\n      if (splitIdx < 0) {\n        return '<unknown media format>';\n      }\n      const prefix = part.media.url.substring(0, splitIdx + 7);\n      const hashedContent = createHash('sha256')\n        .update(part.media.url.substring(splitIdx + 7))\n        .digest('hex');\n      return `${prefix}<sha256(${hashedContent})>`;\n    }\n    return truncate(part.media.url);\n  }\n\n  private toPartLogToolRequest(part: ToolRequestPart): string {\n    const inputText =\n      typeof part.toolRequest.input === 'string'\n        ? part.toolRequest.input\n        : JSON.stringify(part.toolRequest.input);\n    return truncate(\n      `Tool request: ${part.toolRequest.name}, ref: ${part.toolRequest.ref}, input: ${inputText}`\n    );\n  }\n\n  private toPartLogToolResponse(part: ToolResponsePart): string {\n    const outputText =\n      typeof part.toolResponse.output === 'string'\n        ? part.toolResponse.output\n        : JSON.stringify(part.toolResponse.output);\n    return truncate(\n      `Tool response: ${part.toolResponse.name}, ref: ${part.toolResponse.ref}, output: ${outputText}`\n    );\n  }\n\n  /**\n   * Records all metrics associated with performing a GenerateAction.\n   */\n  private doRecordGenerateActionMetrics(\n    modelName: string,\n    usage: GenerationUsage,\n    dimensions: {\n      featureName?: string;\n      path?: string;\n      latencyMs?: number;\n      errName?: string;\n      source?: string;\n      sourceVersion: string;\n    }\n  ) {\n    const shared: SharedDimensions = {\n      modelName: modelName,\n      featureName: dimensions.featureName,\n      path: dimensions.path,\n      source: dimensions.source,\n      sourceVersion: dimensions.sourceVersion,\n      status: dimensions.errName ? 'failure' : 'success',\n    };\n\n    this.actionCounter.add(1, {\n      error: dimensions.errName,\n      ...shared,\n    });\n\n    this.latencies.record(dimensions.latencyMs, shared);\n\n    // inputs\n    this.inputTokens.add(usage.inputTokens, shared);\n    this.inputCharacters.add(usage.inputCharacters, shared);\n    this.inputImages.add(usage.inputImages, shared);\n\n    // outputs\n    this.outputTokens.add(usage.outputTokens, shared);\n    this.outputCharacters.add(usage.outputCharacters, shared);\n    this.outputImages.add(usage.outputImages, shared);\n  }\n}\n\nconst generateTelemetry = new GenerateTelemetry();\nexport { generateTelemetry };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1840, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/telemetry/path.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ValueType } from '@opentelemetry/api';\nimport { hrTimeDuration, hrTimeToMilliseconds } from '@opentelemetry/core';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { GENKIT_VERSION } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { toDisplayPath } from 'genkit/tracing';\nimport {\n  MetricCounter,\n  MetricHistogram,\n  internalMetricNamespaceWrap,\n  type Telemetry,\n} from '../metrics.js';\nimport {\n  createCommonLogAttributes,\n  extractErrorMessage,\n  extractErrorName,\n  extractErrorStack,\n  extractOuterFeatureNameFromPath,\n  truncatePath,\n} from '../utils.js';\n\nclass PathsTelemetry implements Telemetry {\n  /**\n   * Wraps the declared metrics in a Genkit-specific, internal namespace.\n   */\n  private _N = internalMetricNamespaceWrap.bind(null, 'feature');\n\n  private pathCounter = new MetricCounter(this._N('path/requests'), {\n    description: 'Tracks unique flow paths per flow.',\n    valueType: ValueType.INT,\n  });\n\n  private pathLatencies = new MetricHistogram(this._N('path/latency'), {\n    description: 'Latencies per flow path.',\n    ValueType: ValueType.DOUBLE,\n    unit: 'ms',\n  });\n\n  tick(\n    span: ReadableSpan,\n    logInputAndOutput: boolean,\n    projectId?: string\n  ): void {\n    const attributes = span.attributes;\n\n    const path = attributes['genkit:path'] as string;\n\n    const isFailureSource = !!span.attributes['genkit:isFailureSource'];\n    const state = attributes['genkit:state'] as string;\n\n    if (!path || !isFailureSource || state !== 'error') {\n      // Only tick metrics for failing, leaf spans.\n      return;\n    }\n\n    const sessionId = attributes['genkit:sessionId'] as string;\n    const threadName = attributes['genkit:threadName'] as string;\n\n    const errorName = extractErrorName(span.events) || '<unknown>';\n    const errorMessage = extractErrorMessage(span.events) || '<unknown>';\n    const errorStack = extractErrorStack(span.events) || '';\n\n    const latency = hrTimeToMilliseconds(\n      hrTimeDuration(span.startTime, span.endTime)\n    );\n\n    const pathDimensions = {\n      featureName: extractOuterFeatureNameFromPath(path),\n      status: 'failure',\n      error: errorName,\n      path: path,\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n    };\n    this.pathCounter.add(1, pathDimensions);\n    this.pathLatencies.record(latency, pathDimensions);\n\n    const displayPath = truncatePath(toDisplayPath(path));\n    logger.logStructuredError(`Error[${displayPath}, ${errorName}]`, {\n      ...createCommonLogAttributes(span, projectId),\n      path: displayPath,\n      qualifiedPath: path,\n      name: errorName,\n      message: errorMessage,\n      stack: errorStack,\n      source: 'ts',\n      sourceVersion: GENKIT_VERSION,\n      sessionId,\n      threadName,\n    });\n  }\n}\n\nconst pathsTelemetry = new PathsTelemetry();\nexport { pathsTelemetry };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,eAAA,CAAA;AAAA,SAAA,cAAA;IAAA,gBAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBA,IAAA,aAA0B;AAC1B,IAAA,cAAqD;AAErD,IAAA,gBAA+B;AAC/B,IAAA,iBAAuB;AACvB,IAAA,iBAA8B;AAC9B,IAAA,iBAKO;AACP,IAAA,eAOO;AAEP,MAAM,eAAoC;IAAA;;GAAA,GAIhC,KAAK,eAAA,2BAAA,CAA4B,IAAA,CAAK,MAAM,SAAS,EAAA;IAErD,cAAc,IAAI,eAAA,aAAA,CAAc,IAAA,CAAK,EAAA,CAAG,eAAe,GAAG;QAChE,aAAa;QACb,WAAW,WAAA,SAAA,CAAU,GAAA;IACvB,CAAC,EAAA;IAEO,gBAAgB,IAAI,eAAA,eAAA,CAAgB,IAAA,CAAK,EAAA,CAAG,cAAc,GAAG;QACnE,aAAa;QACb,WAAW,WAAA,SAAA,CAAU,MAAA;QACrB,MAAM;IACR,CAAC,EAAA;IAED,KACE,IAAA,EACA,iBAAA,EACA,SAAA,EACM;QACN,MAAM,aAAa,KAAK,UAAA;QAExB,MAAM,OAAO,UAAA,CAAW,aAAa,CAAA;QAErC,MAAM,kBAAkB,CAAC,CAAC,KAAK,UAAA,CAAW,wBAAwB,CAAA;QAClE,MAAM,QAAQ,UAAA,CAAW,cAAc,CAAA;QAEvC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,UAAU,SAAS;YAElD;QACF;QAEA,MAAM,YAAY,UAAA,CAAW,kBAAkB,CAAA;QAC/C,MAAM,aAAa,UAAA,CAAW,mBAAmB,CAAA;QAEjD,MAAM,YAAA,CAAA,GAAY,aAAA,gBAAA,EAAiB,KAAK,MAAM,KAAK;QACnD,MAAM,eAAA,CAAA,GAAe,aAAA,mBAAA,EAAoB,KAAK,MAAM,KAAK;QACzD,MAAM,aAAA,CAAA,GAAa,aAAA,iBAAA,EAAkB,KAAK,MAAM,KAAK;QAErD,MAAM,UAAA,CAAA,GAAU,YAAA,oBAAA,EAAA,CAAA,GACd,YAAA,cAAA,EAAe,KAAK,SAAA,EAAW,KAAK,OAAO;QAG7C,MAAM,iBAAiB;YACrB,aAAA,CAAA,GAAa,aAAA,+BAAA,EAAgC,IAAI;YACjD,QAAQ;YACR,OAAO;YACP;YACA,QAAQ;YACR,eAAe,cAAA,cAAA;QACjB;QACA,IAAA,CAAK,WAAA,CAAY,GAAA,CAAI,GAAG,cAAc;QACtC,IAAA,CAAK,aAAA,CAAc,MAAA,CAAO,SAAS,cAAc;QAEjD,MAAM,cAAA,CAAA,GAAc,aAAA,YAAA,EAAA,CAAA,GAAa,eAAA,aAAA,EAAc,IAAI,CAAC;QACpD,eAAA,MAAA,CAAO,kBAAA,CAAmB,CAAA,MAAA,EAAS,WAAW,CAAA,EAAA,EAAK,SAAS,CAAA,CAAA,CAAA,EAAK;YAC/D,GAAA,CAAA,GAAG,aAAA,yBAAA,EAA0B,MAAM,SAAS,CAAA;YAC5C,MAAM;YACN,eAAe;YACf,MAAM;YACN,SAAS;YACT,OAAO;YACP,QAAQ;YACR,eAAe,cAAA,cAAA;YACf;YACA;QACF,CAAC;IACH;AACF;AAEA,MAAM,iBAAiB,IAAI,eAAe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1937, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/gcpOpenTelemetry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  MetricExporter,\n  type ExporterOptions,\n} from '@google-cloud/opentelemetry-cloud-monitoring-exporter';\nimport { TraceExporter } from '@google-cloud/opentelemetry-cloud-trace-exporter';\nimport { GcpDetectorSync } from '@google-cloud/opentelemetry-resource-util';\nimport { SpanStatusCode, TraceFlags, type Span } from '@opentelemetry/api';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { type ExportResult } from '@opentelemetry/core';\nimport type { Instrumentation } from '@opentelemetry/instrumentation';\nimport { PinoInstrumentation } from '@opentelemetry/instrumentation-pino';\nimport { WinstonInstrumentation } from '@opentelemetry/instrumentation-winston';\nimport { Resource } from '@opentelemetry/resources';\nimport {\n  AggregationTemporality,\n  DefaultAggregation,\n  ExponentialHistogramAggregation,\n  InMemoryMetricExporter,\n  InstrumentType,\n  PeriodicExportingMetricReader,\n  type PushMetricExporter,\n  type ResourceMetrics,\n} from '@opentelemetry/sdk-metrics';\nimport type { NodeSDKConfiguration } from '@opentelemetry/sdk-node';\nimport {\n  BatchSpanProcessor,\n  InMemorySpanExporter,\n  type ReadableSpan,\n  type SpanExporter,\n} from '@opentelemetry/sdk-trace-base';\nimport { GENKIT_VERSION } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { actionTelemetry } from './telemetry/action.js';\nimport { engagementTelemetry } from './telemetry/engagement.js';\nimport { featuresTelemetry } from './telemetry/feature.js';\nimport { generateTelemetry } from './telemetry/generate.js';\nimport { pathsTelemetry } from './telemetry/path.js';\nimport type { GcpTelemetryConfig } from './types.js';\nimport {\n  metricsDenied,\n  metricsDeniedHelpText,\n  tracingDenied,\n  tracingDeniedHelpText,\n} from './utils.js';\n\nlet metricExporter: PushMetricExporter;\nlet spanProcessor: BatchSpanProcessor;\nlet spanExporter: AdjustingTraceExporter;\n\n/**\n * Provides a {TelemetryConfig} for exporting OpenTelemetry data (Traces,\n * Metrics, and Logs) to the Google Cloud Operations Suite.\n */\nexport class GcpOpenTelemetry {\n  private readonly config: GcpTelemetryConfig;\n  private readonly resource: Resource;\n\n  constructor(config: GcpTelemetryConfig) {\n    this.config = config;\n    this.resource = new Resource({ type: 'global' }).merge(\n      new GcpDetectorSync().detect()\n    );\n  }\n\n  /**\n   * Log hook for writing trace and span metadata to log messages in the format\n   * required by GCP.\n   */\n  private gcpTraceLogHook = (span: Span, record: any) => {\n    const spanContext = span.spanContext();\n    const isSampled = !!(spanContext.traceFlags & TraceFlags.SAMPLED);\n    const projectId = this.config.projectId;\n\n    record['logging.googleapis.com/trace'] ??=\n      `projects/${projectId}/traces/${spanContext.traceId}`;\n    record['logging.googleapis.com/trace_sampled'] ??= isSampled ? '1' : '0';\n    record['logging.googleapis.com/spanId'] ??= spanContext.spanId;\n\n    // Clear out the duplicate trace and span information in the log metadata.\n    // These will be incorrect for logs written during span export time since\n    // the logs are written after the span has fully executed. Those logs are\n    // explicitly tied to the correct span in createCommonLogAttributes in\n    // utils.ts.\n    delete record['span_id'];\n    delete record['trace_id'];\n    delete record['trace_flags'];\n  };\n\n  async getConfig(): Promise<Partial<NodeSDKConfiguration>> {\n    spanProcessor = new BatchSpanProcessor(await this.createSpanExporter());\n    return {\n      resource: this.resource,\n      spanProcessor: spanProcessor,\n      sampler: this.config.sampler,\n      instrumentations: this.getInstrumentations(),\n      metricReader: await this.createMetricReader(),\n    };\n  }\n\n  private async createSpanExporter(): Promise<SpanExporter> {\n    spanExporter = new AdjustingTraceExporter(\n      this.shouldExportTraces()\n        ? new TraceExporter({\n            // provided projectId should take precedence over env vars, etc\n            projectId: this.config.projectId,\n            // creds for non-GCP environments, in lieu of using ADC.\n            credentials: this.config.credentials,\n          })\n        : new InMemorySpanExporter(),\n      this.config.exportInputAndOutput,\n      this.config.projectId,\n      getErrorHandler(\n        (err) => {\n          return tracingDenied(err);\n        },\n        await tracingDeniedHelpText()\n      )\n    );\n    return spanExporter;\n  }\n\n  /**\n   * Creates a {MetricReader} for pushing metrics out to GCP via OpenTelemetry.\n   */\n  private async createMetricReader(): Promise<PeriodicExportingMetricReader> {\n    metricExporter = await this.buildMetricExporter();\n    return new PeriodicExportingMetricReader({\n      exportIntervalMillis: this.config.metricExportIntervalMillis,\n      exportTimeoutMillis: this.config.metricExportTimeoutMillis,\n      exporter: metricExporter,\n    });\n  }\n\n  /** Gets all open telemetry instrumentations as configured by the plugin. */\n  private getInstrumentations() {\n    let instrumentations: Instrumentation[] = [];\n\n    if (this.config.autoInstrumentation) {\n      instrumentations = getNodeAutoInstrumentations(\n        this.config.autoInstrumentationConfig\n      );\n    }\n\n    return instrumentations\n      .concat(this.getDefaultLoggingInstrumentations())\n      .concat(this.config.instrumentations ?? []);\n  }\n\n  private shouldExportTraces(): boolean {\n    return this.config.export && !this.config.disableTraces;\n  }\n\n  private shouldExportMetrics(): boolean {\n    return this.config.export && !this.config.disableMetrics;\n  }\n\n  /** Always configure the Pino and Winston instrumentations */\n  private getDefaultLoggingInstrumentations(): Instrumentation[] {\n    return [\n      new WinstonInstrumentation({ logHook: this.gcpTraceLogHook }),\n      new PinoInstrumentation({ logHook: this.gcpTraceLogHook }),\n    ];\n  }\n\n  private async buildMetricExporter(): Promise<PushMetricExporter> {\n    const exporter: PushMetricExporter = this.shouldExportMetrics()\n      ? new MetricExporterWrapper(\n          {\n            userAgent: {\n              product: 'genkit',\n              version: GENKIT_VERSION,\n            },\n            // provided projectId should take precedence over env vars, etc\n            projectId: this.config.projectId,\n            // creds for non-GCP environments, in lieu of using ADC.\n            credentials: this.config.credentials,\n          },\n          getErrorHandler(\n            (err) => {\n              return metricsDenied(err);\n            },\n            await metricsDeniedHelpText()\n          )\n        )\n      : new InMemoryMetricExporter(AggregationTemporality.DELTA);\n    return exporter;\n  }\n}\n\n/**\n * Rewrites the export method to include an error handler which logs\n * helpful information about how to set up metrics/telemetry in GCP.\n */\nclass MetricExporterWrapper extends MetricExporter {\n  private promise = new Promise<void>((resolve) => resolve());\n\n  constructor(\n    options?: ExporterOptions,\n    private errorHandler?: (error: Error) => void\n  ) {\n    super(options);\n  }\n\n  async export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): Promise<void> {\n    await this.promise;\n    this.modifyStartTimes(metrics);\n    this.promise = new Promise<void>((resolve) => {\n      super.export(metrics, (result) => {\n        try {\n          if (this.errorHandler && result.error) {\n            this.errorHandler(result.error);\n          }\n          resultCallback(result);\n        } finally {\n          resolve();\n        }\n      });\n    });\n  }\n\n  selectAggregation(instrumentType: InstrumentType) {\n    if (instrumentType === InstrumentType.HISTOGRAM) {\n      return new ExponentialHistogramAggregation();\n    }\n    return new DefaultAggregation();\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType) {\n    return AggregationTemporality.DELTA;\n  }\n\n  /**\n   * Modify the start times of each data point to ensure no\n   * overlap with previous exports.\n   *\n   * Cloud metrics do not support delta metrics for custom metrics\n   * and will convert any DELTA aggregations to CUMULATIVE ones on\n   * export. There is implicit overlap in the start/end times that\n   * the Metric reader is sending -- the end_time of the previous\n   * export will become the start_time of the current export. The\n   * overlap in times means that only one of those records will\n   * persist and the other will be overwritten. This\n   * method adds a thousandth of a second to ensure discrete export\n   * timeframes.\n   */\n  private modifyStartTimes(metrics: ResourceMetrics): void {\n    metrics.scopeMetrics.forEach((scopeMetric) => {\n      scopeMetric.metrics.forEach((metric) => {\n        metric.dataPoints.forEach((dataPoint) => {\n          dataPoint.startTime[1] = dataPoint.startTime[1] + 1_000_000;\n        });\n      });\n    });\n  }\n\n  async shutdown(): Promise<void> {\n    return await this.forceFlush();\n  }\n\n  async forceFlush(): Promise<void> {\n    await this.promise;\n  }\n}\n\n/**\n * Adjusts spans before exporting to GCP. Redacts model input\n * and output content, and augments span attributes before sending to GCP.\n */\nclass AdjustingTraceExporter implements SpanExporter {\n  constructor(\n    private exporter: SpanExporter,\n    private logInputAndOutput: boolean,\n    private projectId?: string,\n    private errorHandler?: (error: Error) => void\n  ) {}\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    this.exporter?.export(this.adjust(spans), (result) => {\n      if (this.errorHandler && result.error) {\n        this.errorHandler(result.error);\n      }\n      resultCallback(result);\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.exporter?.shutdown();\n  }\n\n  getExporter(): SpanExporter {\n    return this.exporter;\n  }\n\n  forceFlush(): Promise<void> {\n    if (this.exporter?.forceFlush) {\n      return this.exporter.forceFlush();\n    }\n    return Promise.resolve();\n  }\n\n  private adjust(spans: ReadableSpan[]): ReadableSpan[] {\n    return spans.map((span) => {\n      this.tickTelemetry(span);\n\n      span = this.redactInputOutput(span);\n      span = this.markErrorSpanAsError(span);\n      span = this.markFailedSpan(span);\n      span = this.markGenkitFeature(span);\n      span = this.markGenkitModel(span);\n      span = this.normalizeLabels(span);\n      return span;\n    });\n  }\n\n  private tickTelemetry(span: ReadableSpan) {\n    const attributes = span.attributes;\n    if (!Object.keys(attributes).includes('genkit:type')) {\n      return;\n    }\n\n    const type = attributes['genkit:type'] as string;\n    const subtype = attributes['genkit:metadata:subtype'] as string;\n    const isRoot = !!span.attributes['genkit:isRoot'];\n\n    pathsTelemetry.tick(span, this.logInputAndOutput, this.projectId);\n    if (isRoot) {\n      // Report top level feature request and latency only for root spans\n      // Log input to and output from to the feature\n      featuresTelemetry.tick(span, this.logInputAndOutput, this.projectId);\n      // Set root status explicitly\n      span.attributes['genkit:rootState'] = span.attributes['genkit:state'];\n    } else {\n      if (type === 'action' && subtype === 'model') {\n        // Report generate metrics () for all model actions\n        generateTelemetry.tick(span, this.logInputAndOutput, this.projectId);\n      }\n      if (type === 'action' && subtype === 'tool') {\n        // TODO: Report input and output for tool actions\n      }\n      if (\n        type === 'action' ||\n        type === 'flow' ||\n        type == 'flowStep' ||\n        type == 'util'\n      ) {\n        // Report request and latency metrics for all actions\n        actionTelemetry.tick(span, this.logInputAndOutput, this.projectId);\n      }\n    }\n    if (type === 'userEngagement') {\n      // Report user acceptance and feedback metrics\n      engagementTelemetry.tick(span, this.logInputAndOutput, this.projectId);\n    }\n  }\n\n  private redactInputOutput(span: ReadableSpan): ReadableSpan {\n    const hasInput = 'genkit:input' in span.attributes;\n    const hasOutput = 'genkit:output' in span.attributes;\n\n    return !hasInput && !hasOutput\n      ? span\n      : {\n          ...span,\n          spanContext: span.spanContext,\n          attributes: {\n            ...span.attributes,\n            'genkit:input': '<redacted>',\n            'genkit:output': '<redacted>',\n          },\n        };\n  }\n\n  // This is a workaround for GCP Trace to mark a span with a red\n  // exclamation mark indicating that it is an error.\n  private markErrorSpanAsError(span: ReadableSpan): ReadableSpan {\n    return span.status.code !== SpanStatusCode.ERROR\n      ? span\n      : {\n          ...span,\n          spanContext: span.spanContext,\n          attributes: {\n            ...span.attributes,\n            '/http/status_code': '599',\n          },\n        };\n  }\n\n  private normalizeLabels(span: ReadableSpan): ReadableSpan {\n    const normalized = {} as Record<string, any>;\n    for (const [key, value] of Object.entries(span.attributes)) {\n      normalized[key.replace(/\\:/g, '/')] = value;\n    }\n    return {\n      ...span,\n      spanContext: span.spanContext,\n      attributes: normalized,\n    };\n  }\n\n  private markFailedSpan(span: ReadableSpan): ReadableSpan {\n    if (span.attributes['genkit:isFailureSource']) {\n      span.attributes['genkit:failedSpan'] = span.attributes['genkit:name'];\n      span.attributes['genkit:failedPath'] = span.attributes['genkit:path'];\n    }\n    return span;\n  }\n\n  private markGenkitFeature(span: ReadableSpan): ReadableSpan {\n    if (span.attributes['genkit:isRoot'] && !!span.attributes['genkit:name']) {\n      span.attributes['genkit:feature'] = span.attributes['genkit:name'];\n    }\n    return span;\n  }\n\n  private markGenkitModel(span: ReadableSpan): ReadableSpan {\n    if (\n      span.attributes['genkit:metadata:subtype'] === 'model' &&\n      !!span.attributes['genkit:name']\n    ) {\n      span.attributes['genkit:model'] = span.attributes['genkit:name'];\n    }\n    return span;\n  }\n}\n\nfunction getErrorHandler(\n  shouldLogFn: (err: Error) => boolean,\n  helpText: string\n): (err: Error) => void {\n  // only log the first time\n  let instructionsLogged = false;\n\n  return (err) => {\n    // Use the defaultLogger so that logs don't get swallowed by the open\n    // telemetry exporter\n    const defaultLogger = logger.defaultLogger;\n    if (err && shouldLogFn(err)) {\n      if (!instructionsLogged) {\n        instructionsLogged = true;\n        defaultLogger.error(\n          `Unable to send telemetry to Google Cloud: ${err.message}\\n\\n${helpText}\\n`\n        );\n      }\n    } else if (err) {\n      defaultLogger.error(`Unable to send telemetry to Google Cloud: ${err}`);\n    }\n  };\n}\n\n/** @hidden */\nexport function __getMetricExporterForTesting(): InMemoryMetricExporter {\n  return metricExporter as InMemoryMetricExporter;\n}\n\n/** @hidden */\nexport function __getSpanExporterForTesting(): InMemorySpanExporter {\n  return spanExporter.getExporter() as InMemorySpanExporter;\n}\n\n/** @hidden */\nexport function __forceFlushSpansForTesting() {\n  spanProcessor.forceFlush();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2300, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/telemetry/defaults.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlwaysOnSampler } from '@opentelemetry/sdk-trace-base';\nimport { isDevEnv } from 'genkit';\nimport type {\n  GcpTelemetryConfig,\n  GcpTelemetryConfigOptions,\n} from '../types.js';\n\n/** Consolidated defaults for telemetry configuration. */\n\nexport const TelemetryConfigs = {\n  defaults: (overrides: GcpTelemetryConfigOptions = {}): GcpTelemetryConfig => {\n    return isDevEnv()\n      ? TelemetryConfigs.developmentDefaults(overrides)\n      : TelemetryConfigs.productionDefaults(overrides);\n  },\n\n  developmentDefaults: (\n    overrides: GcpTelemetryConfigOptions = {}\n  ): GcpTelemetryConfig => {\n    const defaults = {\n      sampler: new AlwaysOnSampler(),\n      autoInstrumentation: true,\n      autoInstrumentationConfig: {\n        '@opentelemetry/instrumentation-dns': { enabled: false },\n      },\n      instrumentations: [],\n      metricExportIntervalMillis: 5_000,\n      metricExportTimeoutMillis: 5_000,\n      disableMetrics: false,\n      disableTraces: false,\n      exportInputAndOutput: !overrides.disableLoggingInputAndOutput,\n      export: !!overrides.forceDevExport, // false\n    };\n    return { ...defaults, ...overrides };\n  },\n\n  productionDefaults: (\n    overrides: GcpTelemetryConfigOptions = {}\n  ): GcpTelemetryConfig => {\n    const defaults = {\n      sampler: new AlwaysOnSampler(),\n      autoInstrumentation: true,\n      autoInstrumentationConfig: {\n        '@opentelemetry/instrumentation-dns': { enabled: false },\n      },\n      instrumentations: [],\n      metricExportIntervalMillis: 300_000,\n      metricExportTimeoutMillis: 300_000,\n      disableMetrics: false,\n      disableTraces: false,\n      exportInputAndOutput: !overrides.disableLoggingInputAndOutput,\n      export: true,\n    };\n    return { ...defaults, ...overrides };\n  },\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA;AAAA,SAAA,kBAAA;IAAA,kBAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBA,IAAA,wBAAgC;AAChC,IAAA,gBAAyB;AAQlB,MAAM,mBAAmB;IAC9B,UAAU,CAAC,YAAuC,CAAC,CAAA,KAA0B;QAC3E,OAAA,CAAA,GAAO,cAAA,QAAA,EAAS,IACZ,iBAAiB,mBAAA,CAAoB,SAAS,IAC9C,iBAAiB,kBAAA,CAAmB,SAAS;IACnD;IAEA,qBAAqB,CACnB,YAAuC,CAAC,CAAA,KACjB;QACvB,MAAM,WAAW;YACf,SAAS,IAAI,sBAAA,eAAA,CAAgB;YAC7B,qBAAqB;YACrB,2BAA2B;gBACzB,sCAAsC;oBAAE,SAAS;gBAAM;YACzD;YACA,kBAAkB,CAAC,CAAA;YACnB,4BAA4B;YAC5B,2BAA2B;YAC3B,gBAAgB;YAChB,eAAe;YACf,sBAAsB,CAAC,UAAU,4BAAA;YACjC,QAAQ,CAAC,CAAC,UAAU,cAAA;QACtB;QACA,OAAO;YAAE,GAAG,QAAA;YAAU,GAAG,SAAA;QAAU;IACrC;IAEA,oBAAoB,CAClB,YAAuC,CAAC,CAAA,KACjB;QACvB,MAAM,WAAW;YACf,SAAS,IAAI,sBAAA,eAAA,CAAgB;YAC7B,qBAAqB;YACrB,2BAA2B;gBACzB,sCAAsC;oBAAE,SAAS;gBAAM;YACzD;YACA,kBAAkB,CAAC,CAAA;YACnB,4BAA4B;YAC5B,2BAA2B;YAC3B,gBAAgB;YAChB,eAAe;YACf,sBAAsB,CAAC,UAAU,4BAAA;YACjC,QAAQ;QACV;QACA,OAAO;YAAE,GAAG,QAAA;YAAU,GAAG,SAAA;QAAU;IACrC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2388, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/google-cloud/src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getCurrentEnv } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { enableTelemetry } from 'genkit/tracing';\nimport { credentialsFromEnvironment } from './auth.js';\nimport { GcpLogger } from './gcpLogger.js';\nimport { GcpOpenTelemetry } from './gcpOpenTelemetry.js';\nimport { TelemetryConfigs } from './telemetry/defaults.js';\nimport type { GcpTelemetryConfig, GcpTelemetryConfigOptions } from './types.js';\n\n/**\n * Enables telemetry export to the Google Cloud Observability suite.\n *\n * @param options configuration options\n */\nexport function enableGoogleCloudTelemetry(\n  options?: GcpTelemetryConfigOptions\n) {\n  return enableTelemetry(\n    configureGcpPlugin(options).then(async (pluginConfig) => {\n      logger.init(await new GcpLogger(pluginConfig).getLogger(getCurrentEnv()));\n      return new GcpOpenTelemetry(pluginConfig).getConfig();\n    })\n  );\n}\n\n/**\n * Create a configuration object for the plugin.\n * Not normally needed, but exposed for use by the Firebase plugin.\n */\nasync function configureGcpPlugin(\n  options?: GcpTelemetryConfigOptions\n): Promise<GcpTelemetryConfig> {\n  const envOptions = await credentialsFromEnvironment();\n  return {\n    projectId: options?.projectId || envOptions.projectId,\n    credentials: options?.credentials || envOptions.credentials,\n    ...TelemetryConfigs.defaults(options),\n  };\n}\n\nexport * from './gcpLogger.js';\nexport * from './gcpOpenTelemetry.js';\nexport type { GcpTelemetryConfigOptions } from './types.js';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,gBAAA,CAAA;AAAA,SAAA,eAAA;IAAA,4BAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBA,IAAA,gBAA8B;AAC9B,IAAA,iBAAuB;AACvB,IAAA,iBAAgC;AAChC,IAAA,cAA2C;AAC3C,IAAA,mBAA0B;AAC1B,IAAA,0BAAiC;AACjC,IAAA,kBAAiC;AAkCjC,WAAA,eAAc,qHAxDd,OAAA,OAAA;AAyDA,WAAA,eAAc,4HAzDd,OAAA,OAAA;AA8BO,SAAS,2BACd,OAAA,EACA;IACA,OAAA,CAAA,GAAO,eAAA,eAAA,EACL,mBAAmB,OAAO,EAAE,IAAA,CAAK,OAAO,iBAAiB;QACvD,eAAA,MAAA,CAAO,IAAA,CAAK,MAAM,IAAI,iBAAA,SAAA,CAAU,YAAY,EAAE,SAAA,CAAA,CAAA,GAAU,cAAA,aAAA,EAAc,CAAC,CAAC;QACxE,OAAO,IAAI,wBAAA,gBAAA,CAAiB,YAAY,EAAE,SAAA,CAAU;IACtD,CAAC;AAEL;AAMA,eAAe,mBACb,OAAA,EAC6B;IAC7B,MAAM,aAAa,MAAA,CAAA,GAAM,YAAA,0BAAA,EAA2B;IACpD,OAAO;QACL,WAAW,SAAS,aAAa,WAAW,SAAA;QAC5C,aAAa,SAAS,eAAe,WAAW,WAAA;QAChD,GAAG,gBAAA,gBAAA,CAAiB,QAAA,CAAS,OAAO,CAAA;IACtC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2451, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/firebase/src/firestore-retriever.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  Firestore,\n  Query,\n  QueryDocumentSnapshot,\n  VectorQuerySnapshot,\n} from '@google-cloud/firestore';\nimport {\n  z,\n  type EmbedderArgument,\n  type Genkit,\n  type RetrieverAction,\n} from 'genkit';\nimport type { DocumentData, Part } from 'genkit/retriever';\n\nfunction toContent(\n  d: QueryDocumentSnapshot,\n  contentField: string | ((snap: QueryDocumentSnapshot) => Part[])\n): Part[] {\n  if (typeof contentField === 'function') {\n    return contentField(d);\n  }\n\n  return [{ text: d.get(contentField) }];\n}\n\nfunction toDocuments(\n  result: VectorQuerySnapshot,\n  vectorField: string,\n  contentField: string | ((snap: QueryDocumentSnapshot) => Part[]),\n  metadataFields?:\n    | string[]\n    | ((snap: QueryDocumentSnapshot) => Record<string, any>)\n): DocumentData[] {\n  return result.docs.map((d) => {\n    const out: DocumentData = { content: toContent(d, contentField) };\n    if (typeof metadataFields === 'function') {\n      out.metadata = metadataFields(d);\n      return out;\n    }\n\n    out.metadata = { id: d.id };\n    if (metadataFields) {\n      for (const field of metadataFields) {\n        out.metadata[field] = d.get(field);\n      }\n      return out;\n    }\n\n    out.metadata = d.data();\n    delete out.metadata[vectorField];\n    if (typeof contentField === 'string') delete out.metadata[contentField];\n    return out;\n  });\n}\n\n/**\n * Define a retriever that uses vector similarity search to retrieve documents from Firestore.\n * You must create a vector index on the associated field before you can perform nearest-neighbor\n * search.\n **/\nexport function defineFirestoreRetriever(\n  ai: Genkit,\n  config: {\n    /** The name of the retriever. */\n    name: string;\n    /** Optional label for display in Developer UI. */\n    label?: string;\n    /** The Firestore database instance from which to query. */\n    firestore: Firestore;\n    /** The name of the collection from which to query. */\n    collection?: string;\n    /** The embedder to use with this retriever. */\n    embedder: EmbedderArgument;\n    /** The name of the field within the collection containing the vector data. */\n    vectorField: string;\n    /** The name of the field containing the document content you wish to return. */\n    contentField: string | ((snap: QueryDocumentSnapshot) => Part[]);\n    /** The distance measure to use when comparing vectors. Defaults to 'COSINE'. */\n    distanceMeasure?: 'EUCLIDEAN' | 'COSINE' | 'DOT_PRODUCT';\n    /**\n     * Specifies a threshold for which no less similar documents will be returned. The behavior\n     * of the specified `distanceMeasure` will affect the meaning of the distance threshold.\n     *\n     *  - For `distanceMeasure: \"EUCLIDEAN\"`, the meaning of `distanceThreshold` is:\n     *     SELECT docs WHERE euclidean_distance <= distanceThreshold\n     *  - For `distanceMeasure: \"COSINE\"`, the meaning of `distanceThreshold` is:\n     *     SELECT docs WHERE cosine_distance <= distanceThreshold\n     *  - For `distanceMeasure: \"DOT_PRODUCT\"`, the meaning of `distanceThreshold` is:\n     *     SELECT docs WHERE dot_product_distance >= distanceThreshold\n     */\n    distanceThreshold?: number;\n    /**\n     * Optionally specifies the name of a metadata field that will be set on each returned Document,\n     * which will contain the computed distance for the document.\n     */\n    distanceResultField?: string;\n    /**\n     * A list of fields to include in the returned document metadata. If not supplied, all fields other\n     * than the vector are included. Alternatively, provide a transform function to extract the desired\n     * metadata fields from a snapshot.\n     **/\n    metadataFields?:\n      | string[]\n      | ((snap: QueryDocumentSnapshot) => Record<string, any>);\n  }\n): RetrieverAction {\n  const {\n    name,\n    label,\n    firestore,\n    embedder,\n    collection,\n    vectorField,\n    metadataFields,\n    contentField,\n    distanceMeasure,\n    distanceThreshold,\n    distanceResultField,\n  } = config;\n  return ai.defineRetriever(\n    {\n      name,\n      info: {\n        label: label || `Firestore - ${name}`,\n      },\n      configSchema: z.object({\n        where: z.record(z.any()).optional(),\n        /** Max number of results to return. Defaults to 10. */\n        limit: z.number().optional(),\n        /* Supply or override the distanceMeasure */\n        distanceMeasure: z\n          .enum(['COSINE', 'DOT_PRODUCT', 'EUCLIDEAN'])\n          .optional(),\n        /* Supply or override the distanceThreshold */\n        distanceThreshold: z.number().optional(),\n        /* Supply or override the metadata field where distances are stored. */\n        distanceResultField: z.string().optional(),\n        /* Supply or override the collection for retrieval. */\n        collection: z.string().optional(),\n      }),\n    },\n    async (content, options) => {\n      options = options || {};\n      if (!options.collection && !collection) {\n        throw new Error(\n          'Must specify a collection to query in Firestore retriever.'\n        );\n      }\n      let query: Query = firestore.collection(\n        options.collection || collection!\n      );\n      for (const field in options.where || {}) {\n        query = query.where(field, '==', options.where![field]);\n      }\n      // Single embedding for text input\n      const queryVector = (await ai.embed({ embedder, content }))[0].embedding;\n\n      const result = await query\n        .findNearest({\n          vectorField,\n          queryVector,\n          limit: options.limit || 10,\n          distanceMeasure:\n            options.distanceMeasure || distanceMeasure || 'COSINE',\n          distanceResultField:\n            options.distanceResultField || distanceResultField,\n          distanceThreshold: options.distanceThreshold || distanceThreshold,\n        })\n        .get();\n\n      return {\n        documents: toDocuments(\n          result,\n          vectorField,\n          contentField,\n          metadataFields\n        ),\n      };\n    }\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2568, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/firebase/src/index.ts"],"sourcesContent":["/**\n * @license\n *\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module /\n */\n\nimport {\n  enableGoogleCloudTelemetry,\n  type GcpTelemetryConfigOptions,\n} from '@genkit-ai/google-cloud';\nimport { logger } from 'genkit/logging';\nexport { defineFirestoreRetriever } from './firestore-retriever.js';\n\nexport interface FirebaseTelemetryOptions extends GcpTelemetryConfigOptions {\n  // future: firebase specific telemetry options\n}\n\n/**\n * Enables telemetry export to Genkit Monitoring, backed by the\n * Google Cloud Observability suite.\n *\n * @param options configuration options\n */\nexport async function enableFirebaseTelemetry(\n  options?: FirebaseTelemetryOptions | GcpTelemetryConfigOptions\n) {\n  logger.debug('Initializing Firebase Genkit Monitoring.');\n  await enableGoogleCloudTelemetry(options);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,gBAAA,CAAA;AAAA,SAAA,eAAA;IAAA,0BAAA,IAAA,2BAAA,wBAAA;IAAA,yBAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAsBA,IAAA,sBAGO;AACP,IAAA,iBAAuB;AACvB,IAAA,6BAAyC;AA3BzC;;;;;;;;;;;;;;;;CAAA,GAuCA,eAAsB,wBACpB,OAAA,EACA;IACA,eAAA,MAAA,CAAO,KAAA,CAAM,0CAA0C;IACvD,MAAA,CAAA,GAAM,oBAAA,0BAAA,EAA2B,OAAO;AAC1C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2630, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/common.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport process from 'process';\n\nexport function getApiKeyFromEnvVar(): string | undefined {\n  return (\n    process.env.GEMINI_API_KEY ||\n    process.env.GOOGLE_API_KEY ||\n    process.env.GOOGLE_GENAI_API_KEY\n  );\n}\n"],"names":["process"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,iBAAA,CAAA;AAAA,SAAA,gBAAA;IAAA,qBAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBA,IAAA,iBAAoB;AAEb,SAAS,sBAA0C;IACxD,OACE,eAAAA,OAAAA,CAAQ,GAAA,CAAI,cAAA,IACZ,eAAAA,OAAAA,CAAQ,GAAA,CAAI,cAAA,IACZ,eAAAA,OAAAA,CAAQ,GAAA,CAAI,oBAAA;AAEhB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2681, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/embedder.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GoogleGenerativeAI,\n  type EmbedContentRequest,\n} from '@google/generative-ai';\nimport {\n  GenkitError,\n  z,\n  type EmbedderAction,\n  type EmbedderReference,\n  type Genkit,\n} from 'genkit';\nimport { embedderRef } from 'genkit/embedder';\nimport { getApiKeyFromEnvVar } from './common.js';\nimport type { PluginOptions } from './index.js';\n\nexport const TaskTypeSchema = z.enum([\n  'RETRIEVAL_DOCUMENT',\n  'RETRIEVAL_QUERY',\n  'SEMANTIC_SIMILARITY',\n  'CLASSIFICATION',\n  'CLUSTERING',\n]);\nexport type TaskType = z.infer<typeof TaskTypeSchema>;\n\nexport const GeminiEmbeddingConfigSchema = z.object({\n  /** Override the API key provided at plugin initialization. */\n  apiKey: z.string().optional(),\n  /**\n   * The `task_type` parameter is defined as the intended downstream application to help the model\n   * produce better quality embeddings.\n   **/\n  taskType: TaskTypeSchema.optional(),\n  title: z.string().optional(),\n  version: z.string().optional(),\n  /**\n   * The `outputDimensionality` parameter allows you to specify the dimensionality of the embedding output.\n   * By default, the model generates embeddings with 768 dimensions. Models such as\n   * `text-embedding-004`, `text-embedding-005`, and `text-multilingual-embedding-002`\n   * allow the output dimensionality to be adjusted between 1 and 768.\n   * By selecting a smaller output dimensionality, users can save memory and storage space, leading to more efficient computations.\n   **/\n  outputDimensionality: z.number().min(1).max(768).optional(),\n});\n\nexport type GeminiEmbeddingConfig = z.infer<typeof GeminiEmbeddingConfigSchema>;\n\nexport const textEmbeddingGecko001 = embedderRef({\n  name: 'googleai/embedding-001',\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: 'Google Gen AI - Text Embedding Gecko (Legacy)',\n    supports: {\n      input: ['text'],\n    },\n  },\n});\n\nexport const textEmbedding004 = embedderRef({\n  name: 'googleai/text-embedding-004',\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: 'Google Gen AI - Text Embedding 001',\n    supports: {\n      input: ['text'],\n    },\n  },\n});\n\nexport const geminiEmbedding001 = embedderRef({\n  name: 'googleai/gemini-embedding-001',\n  configSchema: GeminiEmbeddingConfigSchema,\n  info: {\n    dimensions: 768,\n    label: 'Google Gen AI - Gemini Embedding 001',\n    supports: {\n      input: ['text'],\n    },\n  },\n});\n\nexport const SUPPORTED_MODELS = {\n  'embedding-001': textEmbeddingGecko001,\n  'text-embedding-004': textEmbedding004,\n  'gemini-embedding-001': geminiEmbedding001,\n};\n\nexport function defineGoogleAIEmbedder(\n  ai: Genkit,\n  name: string,\n  pluginOptions: PluginOptions\n): EmbedderAction<any> {\n  let apiKey: string | undefined;\n  // DO NOT throw if {apiKey: false} was supplied to options.\n  if (pluginOptions.apiKey !== false) {\n    apiKey = pluginOptions?.apiKey || getApiKeyFromEnvVar();\n    if (!apiKey)\n      throw new Error(\n        'Please pass in the API key or set either GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n          'For more details see https://genkit.dev/docs/plugins/google-genai'\n      );\n  }\n  const embedder: EmbedderReference =\n    SUPPORTED_MODELS[name] ??\n    embedderRef({\n      name: name,\n      configSchema: GeminiEmbeddingConfigSchema,\n      info: {\n        dimensions: 768,\n        label: `Google AI - ${name}`,\n        supports: {\n          input: ['text', 'image', 'video'],\n        },\n      },\n    });\n  const apiModelName = embedder.name.startsWith('googleai/')\n    ? embedder.name.substring('googleai/'.length)\n    : embedder.name;\n  return ai.defineEmbedder(\n    {\n      name: embedder.name,\n      configSchema: GeminiEmbeddingConfigSchema,\n      info: embedder.info!,\n    },\n    async (input, options) => {\n      if (pluginOptions.apiKey === false && !options?.apiKey) {\n        throw new GenkitError({\n          status: 'INVALID_ARGUMENT',\n          message:\n            'GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.',\n        });\n      }\n      const client = new GoogleGenerativeAI(\n        options?.apiKey || apiKey!\n      ).getGenerativeModel({\n        model:\n          options?.version ||\n          embedder.config?.version ||\n          embedder.version ||\n          apiModelName,\n      });\n      const embeddings = await Promise.all(\n        input.map(async (doc) => {\n          const response = await client.embedContent({\n            taskType: options?.taskType,\n            title: options?.title,\n            content: {\n              role: '',\n              parts: [{ text: doc.text }],\n            },\n            outputDimensionality: options?.outputDimensionality,\n          } as EmbedContentRequest);\n          const values = response.embedding.values;\n          return { embedding: values };\n        })\n      );\n      return { embeddings };\n    }\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2861, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/context-caching/constants.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const CONTEXT_CACHE_SUPPORTED_MODELS = [\n  'gemini-1.5-flash-001',\n  'gemini-1.5-pro-001',\n];\n\nexport const INVALID_ARGUMENT_MESSAGES = {\n  modelVersion: `Model version is required for context caching, supported only in ${CONTEXT_CACHE_SUPPORTED_MODELS.join(',')} models.`,\n  tools: 'Context caching cannot be used simultaneously with tools.',\n  codeExecution:\n    'Context caching cannot be used simultaneously with code execution.',\n};\n\nexport const DEFAULT_TTL = 300;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,oBAAA,CAAA;AAAA,SAAA,mBAAA;IAAA,gCAAA,IAAA;IAAA,aAAA,IAAA;IAAA,2BAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBO,MAAM,iCAAiC;IAC5C;IACA;CACF;AAEO,MAAM,4BAA4B;IACvC,cAAc,CAAA,iEAAA,EAAoE,+BAA+B,IAAA,CAAK,GAAG,CAAC,CAAA,QAAA,CAAA;IAC1H,OAAO;IACP,eACE;AACJ;AAEO,MAAM,cAAc","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2912, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/context-caching/types.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z } from 'genkit';\n\nexport const cacheConfigSchema = z.union([\n  z.boolean(),\n  z.object({ ttlSeconds: z.number().optional() }).passthrough(),\n]);\n\nexport type CacheConfig = z.infer<typeof cacheConfigSchema>;\n\nexport const cacheConfigDetailsSchema = z.object({\n  cacheConfig: cacheConfigSchema,\n  endOfCachedContents: z.number(),\n});\n\nexport type CacheConfigDetails = z.infer<typeof cacheConfigDetailsSchema>;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,gBAAA,CAAA;AAAA,SAAA,eAAA;IAAA,0BAAA,IAAA;IAAA,mBAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBA,IAAA,gBAAkB;AAEX,MAAM,oBAAoB,cAAA,CAAA,CAAE,KAAA,CAAM;IACvC,cAAA,CAAA,CAAE,OAAA,CAAQ;IACV,cAAA,CAAA,CAAE,MAAA,CAAO;QAAE,YAAY,cAAA,CAAA,CAAE,MAAA,CAAO,EAAE,QAAA,CAAS;IAAE,CAAC,EAAE,WAAA,CAAY;CAC7D;AAIM,MAAM,2BAA2B,cAAA,CAAA,CAAE,MAAA,CAAO;IAC/C,aAAa;IACb,qBAAqB,cAAA,CAAA,CAAE,MAAA,CAAO;AAChC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2962, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/context-caching/utils.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CachedContent, StartChatParams } from '@google/generative-ai';\nimport type { GoogleAICacheManager } from '@google/generative-ai/server';\nimport crypto from 'crypto';\nimport { GenkitError, type MessageData, type z } from 'genkit';\nimport type { GenerateRequest } from 'genkit/model';\nimport {\n  CONTEXT_CACHE_SUPPORTED_MODELS,\n  DEFAULT_TTL,\n  INVALID_ARGUMENT_MESSAGES,\n} from './constants';\nimport {\n  cacheConfigSchema,\n  type CacheConfig,\n  type CacheConfigDetails,\n} from './types';\n\n/**\n * Generates a SHA-256 hash to use as a cache key.\n * @param request CachedContent - request object to hash\n * @returns string - the generated cache key\n */\nexport function generateCacheKey(request: CachedContent): string {\n  return crypto\n    .createHash('sha256')\n    .update(JSON.stringify(request))\n    .digest('hex');\n}\n\n/**\n * Retrieves the content needed for the cache based on the chat history and config details.\n */\nexport function getContentForCache(\n  request: GenerateRequest<z.ZodTypeAny>,\n  chatRequest: StartChatParams,\n  modelVersion: string,\n  cacheConfigDetails: CacheConfigDetails\n): {\n  cachedContent: CachedContent;\n  chatRequest: StartChatParams;\n  cacheConfig?: CacheConfig;\n} {\n  // Ensure modelVersion is provided\n  if (!modelVersion) {\n    throw new Error('No model version provided for context caching');\n  }\n\n  // Ensure chatRequest has a history\n  if (!chatRequest.history?.length) {\n    throw new Error('No history provided for context caching');\n  }\n\n  // Validate the history length between request and chatRequest\n  validateHistoryLength(request, chatRequest);\n\n  // Extract relevant cached content based on cacheConfigDetails\n  const { endOfCachedContents, cacheConfig } = cacheConfigDetails;\n  const cachedContent: CachedContent = {\n    model: modelVersion,\n    contents: chatRequest.history.slice(0, endOfCachedContents + 1),\n  };\n\n  // Update the chatRequest history to only include non-cached parts\n  chatRequest.history = chatRequest.history.slice(endOfCachedContents + 1);\n\n  return { cachedContent, chatRequest, cacheConfig };\n}\n\n/**\n * Validates that the request and chat request history lengths align.\n * @throws GenkitError if lengths are mismatched\n */\nfunction validateHistoryLength(\n  request: GenerateRequest<z.ZodTypeAny>,\n  chatRequest: StartChatParams\n) {\n  if (chatRequest.history?.length !== request.messages.length - 1) {\n    throw new GenkitError({\n      status: 'INTERNAL',\n      message:\n        'Genkit request history and Gemini chat request history length do not match',\n    });\n  }\n}\n\n/**\n * Looks up context cache using a cache manager and returns the found item, if any.\n */\n/**\n * Looks up context cache using a cache manager and returns the found item, if any.\n */\nexport async function lookupContextCache(\n  cacheManager: GoogleAICacheManager,\n  cacheKey: string,\n  maxPages = 100,\n  pageSize = 100\n): Promise<CachedContent | null> {\n  let currentPage = 0;\n  let pageToken: string | undefined;\n\n  try {\n    while (currentPage < maxPages) {\n      const { cachedContents, nextPageToken } = await cacheManager.list({\n        pageSize,\n        pageToken,\n      });\n\n      // Check for the cached content by key\n      const found = cachedContents?.find(\n        (content) => content.displayName === cacheKey\n      );\n\n      if (found) return found; // Return found content\n\n      // Stop if there's no next page\n      if (!nextPageToken) break;\n\n      pageToken = nextPageToken;\n      currentPage++;\n    }\n  } catch (error) {\n    const message =\n      error instanceof Error ? error.message : 'Unknown Network Error';\n\n    throw new GenkitError({\n      status: 'INTERNAL',\n      message: `Error looking up context cache: ${message}`,\n    });\n  }\n\n  return null; // Return null if not found or on error\n}\n\n/**\n * Extracts the cache configuration from the request if available.\n */\nexport const extractCacheConfig = (\n  request: GenerateRequest<z.ZodTypeAny>\n): {\n  cacheConfig: { ttlSeconds?: number } | boolean;\n  endOfCachedContents: number;\n} | null => {\n  const endOfCachedContents = findLastIndex<MessageData>(\n    request.messages,\n    (message) => !!message.metadata?.cache\n  );\n\n  return endOfCachedContents === -1\n    ? null\n    : {\n        endOfCachedContents,\n        cacheConfig: cacheConfigSchema.parse(\n          request.messages[endOfCachedContents].metadata?.cache\n        ),\n      };\n};\n\n/**\n * Validates context caching request for compatibility with model and request configurations.\n */\nexport function validateContextCacheRequest(\n  request: GenerateRequest<z.ZodTypeAny>,\n  modelVersion: string\n): boolean {\n  if (!modelVersion || !CONTEXT_CACHE_SUPPORTED_MODELS.includes(modelVersion)) {\n    throw new GenkitError({\n      status: 'INVALID_ARGUMENT',\n      message: INVALID_ARGUMENT_MESSAGES.modelVersion,\n    });\n  }\n  if (request.tools?.length)\n    throw new GenkitError({\n      status: 'INVALID_ARGUMENT',\n      message: INVALID_ARGUMENT_MESSAGES.tools,\n    });\n  if (request.config?.codeExecution)\n    throw new GenkitError({\n      status: 'INVALID_ARGUMENT',\n      message: INVALID_ARGUMENT_MESSAGES.codeExecution,\n    });\n\n  return true;\n}\n\n/**\n * Polyfill function for Array.prototype.findLastIndex for ES2015 compatibility.\n */\nexport function findLastIndex<T>(\n  array: T[],\n  callback: (element: T, index: number, array: T[]) => boolean\n): number {\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (callback(array[i], i, array)) return i;\n  }\n  return -1;\n}\n\n/**\n * Calculates the TTL (Time-To-Live) for the cache based on cacheConfigDetails.\n * @param cacheConfig - The caching configuration details.\n * @returns The TTL in seconds.\n */\nexport function calculateTTL(cacheConfig: CacheConfigDetails): number {\n  if (cacheConfig.cacheConfig === true) {\n    return DEFAULT_TTL;\n  }\n  if (cacheConfig.cacheConfig === false) {\n    return 0;\n  }\n  return cacheConfig.cacheConfig.ttlSeconds || DEFAULT_TTL;\n}\n"],"names":["crypto"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3119, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/context-caching/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CachedContent, StartChatParams } from '@google/generative-ai';\nimport {\n  GoogleAICacheManager,\n  type CachedContentCreateParams,\n} from '@google/generative-ai/server';\nimport { GenkitError, type GenerateRequest, type z } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport type { CacheConfigDetails } from './types.js';\nimport {\n  calculateTTL,\n  generateCacheKey,\n  getContentForCache,\n  lookupContextCache,\n  validateContextCacheRequest,\n} from './utils.js';\n\n/**\n * Handles context caching and transforms the chatRequest\n * @param apiKey\n * @param request\n * @param chatRequest\n * @param modelVersion\n * @returns\n */\nexport async function handleContextCache(\n  apiKey: string,\n  request: GenerateRequest<z.ZodTypeAny>,\n  chatRequest: StartChatParams,\n  modelVersion: string,\n  cacheConfigDetails: CacheConfigDetails\n): Promise<{ cache: CachedContent; newChatRequest: StartChatParams }> {\n  const cacheManager = new GoogleAICacheManager(apiKey);\n\n  const { cachedContent, chatRequest: newChatRequest } = getContentForCache(\n    request,\n    chatRequest,\n    modelVersion,\n    cacheConfigDetails\n  );\n  cachedContent.model = modelVersion;\n  const cacheKey = generateCacheKey(cachedContent);\n\n  cachedContent.displayName = cacheKey;\n\n  let cache = await lookupContextCache(cacheManager, cacheKey);\n  logger.debug(`Cache hit: ${cache ? 'true' : 'false'}`);\n\n  if (!cache) {\n    try {\n      logger.debug('No cache found, creating one.');\n      const createParams: CachedContentCreateParams = {\n        ...cachedContent,\n        ttlSeconds: calculateTTL(cacheConfigDetails),\n      };\n      cache = await cacheManager.create(createParams);\n      logger.debug(`Created new cache entry with key: ${cacheKey}`);\n    } catch (cacheError) {\n      logger.error(\n        `Failed to create cache with key ${cacheKey}: ${cacheError}`\n      );\n      throw new GenkitError({\n        status: 'INTERNAL',\n        message: `Failed to create cache: ${cacheError}`,\n      });\n    }\n  }\n\n  if (!cache) {\n    throw new GenkitError({\n      status: 'INTERNAL',\n      message: 'Failed to use context cache feature',\n    });\n  }\n\n  return { cache, newChatRequest };\n}\n\n/**\n * Handles cache validation, creation, and usage, transforming the chatRequest if necessary.\n * @param apiKey The API key for accessing Google AI Gemini.\n * @param request The generate request passed to the model.\n * @param chatRequest The current chat request configuration.\n * @param modelVersion The version of the model being used.\n * @param cacheConfigDetails Configuration details for caching.\n * @returns A transformed chat request and cache data (if applicable).\n */\nexport async function handleCacheIfNeeded(\n  apiKey: string,\n  request: GenerateRequest<z.ZodTypeAny>,\n  chatRequest: StartChatParams,\n  modelVersion: string,\n  cacheConfigDetails: CacheConfigDetails | null\n): Promise<{ chatRequest: StartChatParams; cache: CachedContent | null }> {\n  // Skip caching if no configuration or if validation fails\n  if (\n    !cacheConfigDetails ||\n    !validateContextCacheRequest(request, modelVersion)\n  ) {\n    return { chatRequest, cache: null };\n  }\n\n  const { cache, newChatRequest } = await handleContextCache(\n    apiKey,\n    request,\n    chatRequest,\n    modelVersion,\n    cacheConfigDetails\n  );\n  return { chatRequest: newChatRequest, cache };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,0BAAA,CAAA;AAAA,SAAA,yBAAA;IAAA,qBAAA,IAAA;IAAA,oBAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAiBA,IAAA,gBAGO;AACP,IAAA,gBAA0D;AAC1D,IAAA,iBAAuB;AAEvB,IAAA,eAMO;AAUP,eAAsB,mBACpB,MAAA,EACA,OAAA,EACA,WAAA,EACA,YAAA,EACA,kBAAA,EACoE;IACpE,MAAM,eAAe,IAAI,cAAA,oBAAA,CAAqB,MAAM;IAEpD,MAAM,EAAE,aAAA,EAAe,aAAa,cAAA,CAAe,CAAA,GAAA,CAAA,GAAI,aAAA,kBAAA,EACrD,SACA,aACA,cACA;IAEF,cAAc,KAAA,GAAQ;IACtB,MAAM,WAAA,CAAA,GAAW,aAAA,gBAAA,EAAiB,aAAa;IAE/C,cAAc,WAAA,GAAc;IAE5B,IAAI,QAAQ,MAAA,CAAA,GAAM,aAAA,kBAAA,EAAmB,cAAc,QAAQ;IAC3D,eAAA,MAAA,CAAO,KAAA,CAAM,CAAA,WAAA,EAAc,QAAQ,SAAS,OAAO,EAAE;IAErD,IAAI,CAAC,OAAO;QACV,IAAI;YACF,eAAA,MAAA,CAAO,KAAA,CAAM,+BAA+B;YAC5C,MAAM,eAA0C;gBAC9C,GAAG,aAAA;gBACH,YAAA,CAAA,GAAY,aAAA,YAAA,EAAa,kBAAkB;YAC7C;YACA,QAAQ,MAAM,aAAa,MAAA,CAAO,YAAY;YAC9C,eAAA,MAAA,CAAO,KAAA,CAAM,CAAA,kCAAA,EAAqC,QAAQ,EAAE;QAC9D,EAAA,OAAS,YAAY;YACnB,eAAA,MAAA,CAAO,KAAA,CACL,CAAA,gCAAA,EAAmC,QAAQ,CAAA,EAAA,EAAK,UAAU,EAAA;YAE5D,MAAM,IAAI,cAAA,WAAA,CAAY;gBACpB,QAAQ;gBACR,SAAS,CAAA,wBAAA,EAA2B,UAAU,EAAA;YAChD,CAAC;QACH;IACF;IAEA,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,cAAA,WAAA,CAAY;YACpB,QAAQ;YACR,SAAS;QACX,CAAC;IACH;IAEA,OAAO;QAAE;QAAO;IAAe;AACjC;AAWA,eAAsB,oBACpB,MAAA,EACA,OAAA,EACA,WAAA,EACA,YAAA,EACA,kBAAA,EACwE;IAExE,IACE,CAAC,sBACD,CAAA,CAAA,GAAC,aAAA,2BAAA,EAA4B,SAAS,YAAY,GAClD;QACA,OAAO;YAAE;YAAa,OAAO;QAAK;IACpC;IAEA,MAAM,EAAE,KAAA,EAAO,cAAA,CAAe,CAAA,GAAI,MAAM,mBACtC,QACA,SACA,aACA,cACA;IAEF,OAAO;QAAE,aAAa;QAAgB;IAAM;AAC9C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3211, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/gemini.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FunctionCallingMode,\n  GenerateContentCandidate,\n  GoogleGenerativeAI,\n  SchemaType,\n  type FileDataPart,\n  type FunctionCallPart,\n  type FunctionDeclaration,\n  type FunctionResponsePart,\n  type GenerateContentCandidate as GeminiCandidate,\n  type Content as GeminiMessage,\n  type Part as GeminiPart,\n  type GenerateContentResponse,\n  type GenerationConfig,\n  type GenerativeModel,\n  type GoogleSearchRetrievalTool,\n  type InlineDataPart,\n  type RequestOptions,\n  type Schema,\n  type StartChatParams,\n  type Tool,\n  type ToolConfig,\n} from '@google/generative-ai';\nimport {\n  GENKIT_CLIENT_HEADER,\n  GenkitError,\n  z,\n  type Genkit,\n  type JSONSchema,\n} from 'genkit';\nimport {\n  GenerationCommonConfigDescriptions,\n  GenerationCommonConfigSchema,\n  getBasicUsageStats,\n  modelRef,\n  type CandidateData,\n  type MediaPart,\n  type MessageData,\n  type ModelAction,\n  type ModelInfo,\n  type ModelMiddleware,\n  type ModelReference,\n  type Part,\n  type ToolDefinitionSchema,\n  type ToolRequestPart,\n  type ToolResponsePart,\n} from 'genkit/model';\nimport { downloadRequestMedia } from 'genkit/model/middleware';\nimport { runInNewSpan } from 'genkit/tracing';\nimport { getApiKeyFromEnvVar } from './common';\nimport { handleCacheIfNeeded } from './context-caching';\nimport { extractCacheConfig } from './context-caching/utils';\n\n/**\n * See https://ai.google.dev/gemini-api/docs/safety-settings#safety-filters.\n */\nconst SafetySettingsSchema = z.object({\n  category: z.enum([\n    'HARM_CATEGORY_UNSPECIFIED',\n    'HARM_CATEGORY_HATE_SPEECH',\n    'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n    'HARM_CATEGORY_HARASSMENT',\n    'HARM_CATEGORY_DANGEROUS_CONTENT',\n    'HARM_CATEGORY_CIVIC_INTEGRITY',\n  ]),\n  threshold: z.enum([\n    'BLOCK_LOW_AND_ABOVE',\n    'BLOCK_MEDIUM_AND_ABOVE',\n    'BLOCK_ONLY_HIGH',\n    'BLOCK_NONE',\n  ]),\n});\n\nconst VoiceConfigSchema = z\n  .object({\n    prebuiltVoiceConfig: z\n      .object({\n        // TODO: Make this an array of objects so we can also specify the description\n        // for each voiceName.\n        voiceName: z\n          .union([\n            z.enum([\n              'Zephyr',\n              'Puck',\n              'Charon',\n              'Kore',\n              'Fenrir',\n              'Leda',\n              'Orus',\n              'Aoede',\n              'Callirrhoe',\n              'Autonoe',\n              'Enceladus',\n              'Iapetus',\n              'Umbriel',\n              'Algieba',\n              'Despina',\n              'Erinome',\n              'Algenib',\n              'Rasalgethi',\n              'Laomedeia',\n              'Achernar',\n              'Alnilam',\n              'Schedar',\n              'Gacrux',\n              'Pulcherrima',\n              'Achird',\n              'Zubenelgenubi',\n              'Vindemiatrix',\n              'Sadachbia',\n              'Sadaltager',\n              'Sulafat',\n            ]),\n            // To allow any new string values\n            z.string(),\n          ])\n          .describe('Name of the preset voice to use')\n          .optional(),\n      })\n      .describe('Configuration for the prebuilt speaker to use')\n      .passthrough()\n      .optional(),\n  })\n  .describe('Configuration for the voice to use')\n  .passthrough();\n\nexport const GeminiConfigSchema = GenerationCommonConfigSchema.extend({\n  temperature: z\n    .number()\n    .min(0)\n    .max(2)\n    .describe(\n      GenerationCommonConfigDescriptions.temperature +\n        ' The default value is 1.0.'\n    )\n    .optional(),\n  topP: z\n    .number()\n    .min(0)\n    .max(1)\n    .describe(\n      GenerationCommonConfigDescriptions.topP + ' The default value is 0.95.'\n    )\n    .optional(),\n  apiKey: z\n    .string()\n    .describe('Overrides the plugin-configured API key, if specified.')\n    .optional(),\n  safetySettings: z\n    .array(SafetySettingsSchema)\n    .describe(\n      'Adjust how likely you are to see responses that could be harmful. ' +\n        'Content is blocked based on the probability that it is harmful.'\n    )\n    .optional(),\n  codeExecution: z\n    .union([z.boolean(), z.object({}).strict()])\n    .describe('Enables the model to generate and run code.')\n    .optional(),\n  contextCache: z\n    .boolean()\n    .describe(\n      'Context caching allows you to save and reuse precomputed input ' +\n        'tokens that you wish to use repeatedly.'\n    )\n    .optional(),\n  functionCallingConfig: z\n    .object({\n      mode: z.enum(['MODE_UNSPECIFIED', 'AUTO', 'ANY', 'NONE']).optional(),\n      allowedFunctionNames: z.array(z.string()).optional(),\n    })\n    .describe(\n      'Controls how the model uses the provided tools (function declarations). ' +\n        'With AUTO (Default) mode, the model decides whether to generate a ' +\n        'natural language response or suggest a function call based on the ' +\n        'prompt and context. With ANY, the model is constrained to always ' +\n        'predict a function call and guarantee function schema adherence. ' +\n        'With NONE, the model is prohibited from making function calls.'\n    )\n    .optional(),\n  responseModalities: z\n    .array(z.enum(['TEXT', 'IMAGE', 'AUDIO']))\n    .describe(\n      'The modalities to be used in response. Only supported for ' +\n        \"'gemini-2.0-flash-exp' model at present.\"\n    )\n    .optional(),\n  googleSearchRetrieval: z\n    .union([z.boolean(), z.object({}).passthrough()])\n    .describe(\n      'Retrieve public web data for grounding, powered by Google Search.'\n    )\n    .optional(),\n}).passthrough();\nexport type GeminiConfig = z.infer<typeof GeminiConfigSchema>;\n\nexport const GeminiGemmaConfigSchema = GeminiConfigSchema.extend({\n  temperature: z\n    .number()\n    .min(0.0)\n    .max(1.0)\n    .describe(\n      GenerationCommonConfigDescriptions.temperature +\n        ' The default value is 1.0.'\n    )\n    .optional(),\n}).passthrough();\n\nexport const GeminiTtsConfigSchema = GeminiConfigSchema.extend({\n  speechConfig: z\n    .object({\n      voiceConfig: VoiceConfigSchema.optional(),\n      multiSpeakerVoiceConfig: z\n        .object({\n          speakerVoiceConfigs: z\n            .array(\n              z\n                .object({\n                  speaker: z.string().describe('Name of the speaker to use'),\n                  voiceConfig: VoiceConfigSchema,\n                })\n                .describe(\n                  'Configuration for a single speaker in a multi speaker setup'\n                )\n                .passthrough()\n            )\n            .describe('Configuration for all the enabled speaker voices'),\n        })\n        .describe('Configuration for multi-speaker setup')\n        .passthrough()\n        .optional(),\n    })\n    .describe('Speech generation config')\n    .passthrough()\n    .optional(),\n}).passthrough();\n\nexport const gemini10Pro = modelRef({\n  name: 'googleai/gemini-1.0-pro',\n  info: {\n    label: 'Google AI - Gemini Pro',\n    versions: ['gemini-pro', 'gemini-1.0-pro-latest', 'gemini-1.0-pro-001'],\n    supports: {\n      multiturn: true,\n      media: false,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15Pro = modelRef({\n  name: 'googleai/gemini-1.5-pro',\n  info: {\n    label: 'Google AI - Gemini 1.5 Pro',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n    versions: [\n      'gemini-1.5-pro-latest',\n      'gemini-1.5-pro-001',\n      'gemini-1.5-pro-002',\n    ],\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15Flash = modelRef({\n  name: 'googleai/gemini-1.5-flash',\n  info: {\n    label: 'Google AI - Gemini 1.5 Flash',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n      // @ts-ignore\n      contextCache: true,\n    },\n    versions: [\n      'gemini-1.5-flash-latest',\n      'gemini-1.5-flash-001',\n      'gemini-1.5-flash-002',\n    ],\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini15Flash8b = modelRef({\n  name: 'googleai/gemini-1.5-flash-8b',\n  info: {\n    label: 'Google AI - Gemini 1.5 Flash',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n    versions: ['gemini-1.5-flash-8b-latest', 'gemini-1.5-flash-8b-001'],\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini20Flash = modelRef({\n  name: 'googleai/gemini-2.0-flash',\n  info: {\n    label: 'Google AI - Gemini 2.0 Flash',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini20FlashExp = modelRef({\n  name: 'googleai/gemini-2.0-flash-exp',\n  info: {\n    label: 'Google AI - Gemini 2.0 Flash (Experimental)',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini20FlashLite = modelRef({\n  name: 'googleai/gemini-2.0-flash-lite',\n  info: {\n    label: 'Google AI - Gemini 2.0 Flash Lite',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini20ProExp0205 = modelRef({\n  name: 'googleai/gemini-2.0-pro-exp-02-05',\n  info: {\n    label: 'Google AI - Gemini 2.0 Pro Exp 02-05',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini25FlashPreview0417 = modelRef({\n  name: 'googleai/gemini-2.5-flash-preview-04-17',\n  info: {\n    label: 'Google AI - Gemini 2.5 Flash Preview 04-17',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini25FlashPreviewTts = modelRef({\n  name: 'googleai/gemini-2.5-flash-preview-tts',\n  info: {\n    label: 'Google AI - Gemini 2.5 Flash Preview TTS',\n    versions: [],\n    supports: {\n      multiturn: false,\n      media: false,\n      tools: false,\n      toolChoice: false,\n      systemRole: false,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiTtsConfigSchema,\n});\n\nexport const gemini25ProExp0325 = modelRef({\n  name: 'googleai/gemini-2.5-pro-exp-03-25',\n  info: {\n    label: 'Google AI - Gemini 2.5 Pro Exp 03-25',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini25ProPreview0325 = modelRef({\n  name: 'googleai/gemini-2.5-pro-preview-03-25',\n  info: {\n    label: 'Google AI - Gemini 2.5 Pro Preview 03-25',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini25ProPreviewTts = modelRef({\n  name: 'googleai/gemini-2.5-pro-preview-tts',\n  info: {\n    label: 'Google AI - Gemini 2.5 Pro Preview TTS',\n    versions: [],\n    supports: {\n      multiturn: false,\n      media: false,\n      tools: false,\n      toolChoice: false,\n      systemRole: false,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiTtsConfigSchema,\n});\n\nexport const gemini25Pro = modelRef({\n  name: 'googleai/gemini-2.5-pro',\n  info: {\n    label: 'Google AI - Gemini 2.5 Pro',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini25Flash = modelRef({\n  name: 'googleai/gemini-2.5-flash',\n  info: {\n    label: 'Google AI - Gemini 2.5 Flash',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemini25FlashLite = modelRef({\n  name: 'googleai/gemini-2.5-flash-lite',\n  info: {\n    label: 'Google AI - Gemini 2.5 Flash Lite',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiConfigSchema,\n});\n\nexport const gemma312bit = modelRef({\n  name: 'googleai/gemma-3-12b-it',\n  info: {\n    label: 'Google AI - Gemma 3 12B',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiGemmaConfigSchema,\n});\n\nexport const gemma31bit = modelRef({\n  name: 'googleai/gemma-3-1b-it',\n  info: {\n    label: 'Google AI - Gemma 3 1B',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiGemmaConfigSchema,\n});\n\nexport const gemma327bit = modelRef({\n  name: 'googleai/gemma-3-27b-it',\n  info: {\n    label: 'Google AI - Gemma 3 27B',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiGemmaConfigSchema,\n});\n\nexport const gemma34bit = modelRef({\n  name: 'googleai/gemma-3-4b-it',\n  info: {\n    label: 'Google AI - Gemma 3 4B',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiGemmaConfigSchema,\n});\n\nexport const gemma3ne4bit = modelRef({\n  name: 'googleai/gemma-3n-e4b-it',\n  info: {\n    label: 'Google AI - Gemma 3n E4B',\n    versions: [],\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n  configSchema: GeminiGemmaConfigSchema,\n});\n\nexport const SUPPORTED_GEMINI_MODELS = {\n  'gemini-1.5-pro': gemini15Pro,\n  'gemini-1.5-flash': gemini15Flash,\n  'gemini-1.5-flash-8b': gemini15Flash8b,\n  'gemini-2.0-pro-exp-02-05': gemini20ProExp0205,\n  'gemini-2.0-flash': gemini20Flash,\n  'gemini-2.0-flash-lite': gemini20FlashLite,\n  'gemini-2.0-flash-exp': gemini20FlashExp,\n  'gemini-2.5-pro-exp-03-25': gemini25ProExp0325,\n  'gemini-2.5-pro-preview-03-25': gemini25ProPreview0325,\n  'gemini-2.5-pro-preview-tts': gemini25ProPreviewTts,\n  'gemini-2.5-flash-preview-04-17': gemini25FlashPreview0417,\n  'gemini-2.5-flash-preview-tts': gemini25FlashPreviewTts,\n  'gemini-2.5-flash': gemini25Flash,\n  'gemini-2.5-flash-lite': gemini25FlashLite,\n  'gemini-2.5-pro': gemini25Pro,\n  'gemma-3-12b-it': gemma312bit,\n  'gemma-3-1b-it': gemma31bit,\n  'gemma-3-27b-it': gemma327bit,\n  'gemma-3-4b-it': gemma34bit,\n  'gemma-3n-e4b-it': gemma3ne4bit,\n};\n\nexport const GENERIC_GEMINI_MODEL = modelRef({\n  name: 'googleai/gemini',\n  configSchema: GeminiConfigSchema,\n  info: {\n    label: 'Google Gemini',\n    supports: {\n      multiturn: true,\n      media: true,\n      tools: true,\n      toolChoice: true,\n      systemRole: true,\n      constrained: 'no-tools',\n    },\n  },\n});\n\nfunction longestMatchingPrefix(version: string, potentialMatches: string[]) {\n  return potentialMatches\n    .filter((p) => version.startsWith(p))\n    .reduce(\n      (longest, current) =>\n        current.length > longest.length ? current : longest,\n      ''\n    );\n}\n\n/**\n * Known model names, to allow code completion for convenience. Allows other model names.\n */\nexport type GeminiVersionString =\n  | keyof typeof SUPPORTED_GEMINI_MODELS\n  | (string & {});\n\n/**\n * Returns a reference to a model that can be used in generate calls.\n *\n * ```js\n * await ai.generate({\n *   prompt: 'hi',\n *   model: gemini('gemini-1.5-flash')\n * });\n * ```\n */\nexport function gemini(\n  version: GeminiVersionString,\n  options: GeminiConfig = {}\n): ModelReference<typeof GeminiConfigSchema> {\n  const nearestModel = nearestGeminiModelRef(version);\n  return modelRef({\n    name: `googleai/${version}`,\n    config: options,\n    configSchema: GeminiConfigSchema,\n    info: {\n      ...nearestModel.info,\n      // If exact suffix match for a known model, use its label, otherwise create a new label\n      label: nearestModel.name.endsWith(version)\n        ? nearestModel.info?.label\n        : `Google AI - ${version}`,\n    },\n  });\n}\n\nfunction nearestGeminiModelRef(\n  version: GeminiVersionString,\n  options: GeminiConfig = {}\n): ModelReference<typeof GeminiConfigSchema> {\n  const matchingKey = longestMatchingPrefix(\n    version,\n    Object.keys(SUPPORTED_GEMINI_MODELS)\n  );\n  if (matchingKey) {\n    return SUPPORTED_GEMINI_MODELS[matchingKey].withConfig({\n      ...options,\n      version,\n    });\n  }\n\n  return GENERIC_GEMINI_MODEL.withConfig({ ...options, version });\n}\n\nfunction toGeminiRole(\n  role: MessageData['role'],\n  model?: ModelReference<z.ZodTypeAny>\n): string {\n  switch (role) {\n    case 'user':\n      return 'user';\n    case 'model':\n      return 'model';\n    case 'system':\n      if (model?.info?.supports?.systemRole) {\n        // We should have already pulled out the supported system messages,\n        // anything remaining is unsupported; throw an error.\n        throw new Error(\n          'system role is only supported for a single message in the first position'\n        );\n      } else {\n        throw new Error('system role is not supported');\n      }\n    case 'tool':\n      return 'function';\n    default:\n      return 'user';\n  }\n}\n\nfunction convertSchemaProperty(property) {\n  if (!property || !property.type) {\n    return undefined;\n  }\n  const baseSchema = {} as Schema;\n  if (property.description) {\n    baseSchema.description = property.description;\n  }\n  if (property.enum) {\n    baseSchema.type = SchemaType.STRING;\n    // supported in API but not in SDK\n    (baseSchema as any).enum = property.enum;\n  }\n  if (property.nullable) {\n    baseSchema.nullable = property.nullable;\n  }\n  let propertyType;\n  // nullable schema can ALSO be defined as, for example, type=['string','null']\n  if (Array.isArray(property.type)) {\n    const types = property.type as string[];\n    if (types.includes('null')) {\n      baseSchema.nullable = true;\n    }\n    // grab the type that's not `null`\n    propertyType = types.find((t) => t !== 'null');\n  } else {\n    propertyType = property.type;\n  }\n  if (propertyType === 'object') {\n    const nestedProperties = {};\n    Object.keys(property.properties ?? {}).forEach((key) => {\n      nestedProperties[key] = convertSchemaProperty(property.properties[key]);\n    });\n    return {\n      ...baseSchema,\n      type: SchemaType.OBJECT,\n      properties: nestedProperties,\n      required: property.required,\n    };\n  } else if (propertyType === 'array') {\n    return {\n      ...baseSchema,\n      type: SchemaType.ARRAY,\n      items: convertSchemaProperty(property.items),\n    };\n  } else {\n    const schemaType = SchemaType[propertyType.toUpperCase()] as SchemaType;\n    if (!schemaType) {\n      throw new GenkitError({\n        status: 'INVALID_ARGUMENT',\n        message: `Unsupported property type ${propertyType.toUpperCase()}`,\n      });\n    }\n    return {\n      ...baseSchema,\n      type: schemaType,\n    };\n  }\n}\n\n/** @hidden */\nexport function toGeminiTool(\n  tool: z.infer<typeof ToolDefinitionSchema>\n): FunctionDeclaration {\n  const declaration: FunctionDeclaration = {\n    name: tool.name.replace(/\\//g, '__'), // Gemini throws on '/' in tool name\n    description: tool.description,\n    parameters: convertSchemaProperty(tool.inputSchema),\n  };\n  return declaration;\n}\n\nfunction toInlineData(part: MediaPart): InlineDataPart {\n  const dataUrl = part.media.url;\n  const b64Data = dataUrl.substring(dataUrl.indexOf(',')! + 1);\n  const contentType =\n    part.media.contentType ||\n    dataUrl.substring(dataUrl.indexOf(':')! + 1, dataUrl.indexOf(';'));\n  return { inlineData: { mimeType: contentType, data: b64Data } };\n}\n\nfunction toFileData(part: MediaPart): FileDataPart {\n  if (!part.media.contentType)\n    throw new Error(\n      'Must supply a `contentType` when sending File URIs to Gemini.'\n    );\n  return {\n    fileData: { mimeType: part.media.contentType, fileUri: part.media.url },\n  };\n}\n\nfunction fromInlineData(inlinePart: InlineDataPart): MediaPart {\n  // Check if the required properties exist\n  if (\n    !inlinePart.inlineData ||\n    !inlinePart.inlineData.hasOwnProperty('mimeType') ||\n    !inlinePart.inlineData.hasOwnProperty('data')\n  ) {\n    throw new Error('Invalid InlineDataPart: missing required properties');\n  }\n  const { mimeType, data } = inlinePart.inlineData;\n  // Combine data and mimeType into a data URL\n  const dataUrl = `data:${mimeType};base64,${data}`;\n  return {\n    media: {\n      url: dataUrl,\n      contentType: mimeType,\n    },\n  };\n}\n\nfunction toFunctionCall(part: ToolRequestPart): FunctionCallPart {\n  if (!part?.toolRequest?.input) {\n    throw Error('Invalid ToolRequestPart: input was missing.');\n  }\n  return {\n    functionCall: {\n      name: part.toolRequest.name,\n      args: part.toolRequest.input,\n    },\n  };\n}\n\nfunction fromFunctionCall(\n  part: FunctionCallPart,\n  ref: string\n): ToolRequestPart {\n  if (!part.functionCall) {\n    throw Error('Invalid FunctionCallPart');\n  }\n  return {\n    toolRequest: {\n      name: part.functionCall.name,\n      input: part.functionCall.args,\n      ref,\n    },\n  };\n}\n\nfunction toFunctionResponse(part: ToolResponsePart): FunctionResponsePart {\n  if (!part?.toolResponse?.output) {\n    throw Error('Invalid ToolResponsePart: output was missing.');\n  }\n  return {\n    functionResponse: {\n      name: part.toolResponse.name,\n      response: {\n        name: part.toolResponse.name,\n        content: part.toolResponse.output,\n      },\n    },\n  };\n}\n\nfunction fromFunctionResponse(part: FunctionResponsePart): ToolResponsePart {\n  if (!part.functionResponse) {\n    throw new Error('Invalid FunctionResponsePart.');\n  }\n  return {\n    toolResponse: {\n      name: part.functionResponse.name.replace(/__/g, '/'), // restore slashes\n      output: part.functionResponse.response,\n    },\n  };\n}\n\nfunction fromExecutableCode(part: GeminiPart): Part {\n  if (!part.executableCode) {\n    throw new Error('Invalid GeminiPart: missing executableCode');\n  }\n  return {\n    custom: {\n      executableCode: {\n        language: part.executableCode.language,\n        code: part.executableCode.code,\n      },\n    },\n  };\n}\n\nfunction fromCodeExecutionResult(part: GeminiPart): Part {\n  if (!part.codeExecutionResult) {\n    throw new Error('Invalid GeminiPart: missing codeExecutionResult');\n  }\n  return {\n    custom: {\n      codeExecutionResult: {\n        outcome: part.codeExecutionResult.outcome,\n        output: part.codeExecutionResult.output,\n      },\n    },\n  };\n}\n\nfunction fromThought(part: {\n  thought: boolean;\n  text?: string;\n  thoughtSignature?: string;\n}): Part {\n  return {\n    reasoning: part.text || '',\n    metadata: { thoughtSignature: (part as any).thoughtSignature },\n  };\n}\n\nfunction toCustomPart(part: Part): GeminiPart {\n  if (!part.custom) {\n    throw new Error('Invalid GeminiPart: missing custom');\n  }\n  if (part.custom.codeExecutionResult) {\n    return { codeExecutionResult: part.custom.codeExecutionResult };\n  }\n  if (part.custom.executableCode) {\n    return { executableCode: part.custom.executableCode };\n  }\n  throw new Error('Unsupported Custom Part type');\n}\n\nfunction toThought(part: Part) {\n  const outPart: any = { thought: true };\n  if (part.metadata?.thoughtSignature)\n    outPart.thoughtSignature = part.metadata.thoughtSignature;\n  if (part.reasoning?.length) outPart.text = part.reasoning;\n  return outPart;\n}\n\nfunction toGeminiPart(part: Part): GeminiPart {\n  if (part.text !== undefined) return { text: part.text || ' ' };\n  if (part.media) {\n    if (part.media.url.startsWith('data:')) return toInlineData(part);\n    return toFileData(part);\n  }\n  if (part.toolRequest) return toFunctionCall(part);\n  if (part.toolResponse) return toFunctionResponse(part);\n  if (part.custom) return toCustomPart(part);\n  if (typeof part.reasoning === 'string') return toThought(part);\n  throw new Error('Unsupported Part type' + JSON.stringify(part));\n}\n\nfunction fromGeminiPart(\n  part: GeminiPart,\n  jsonMode: boolean,\n  ref: string\n): Part {\n  if ('thought' in part) return fromThought(part as any);\n  if (typeof part.text === 'string') return { text: part.text };\n  if (part.inlineData) return fromInlineData(part);\n  if (part.functionCall) return fromFunctionCall(part, ref);\n  if (part.functionResponse) return fromFunctionResponse(part);\n  if (part.executableCode) return fromExecutableCode(part);\n  if (part.codeExecutionResult) return fromCodeExecutionResult(part);\n  throw new Error('Unsupported GeminiPart type: ' + JSON.stringify(part));\n}\n\nexport function toGeminiMessage(\n  message: MessageData,\n  model?: ModelReference<z.ZodTypeAny>\n): GeminiMessage {\n  let sortedParts = message.content;\n  if (message.role === 'tool') {\n    sortedParts = [...message.content].sort((a, b) => {\n      const aRef = a.toolResponse?.ref;\n      const bRef = b.toolResponse?.ref;\n      if (!aRef && !bRef) return 0;\n      if (!aRef) return 1;\n      if (!bRef) return -1;\n      return Number.parseInt(aRef, 10) - Number.parseInt(bRef, 10);\n    });\n  }\n  return {\n    role: toGeminiRole(message.role, model),\n    parts: sortedParts.map(toGeminiPart),\n  };\n}\n\nexport function toGeminiSystemInstruction(message: MessageData): GeminiMessage {\n  return {\n    role: 'user',\n    parts: message.content.map(toGeminiPart),\n  };\n}\n\nfunction fromGeminiFinishReason(\n  reason: GeminiCandidate['finishReason']\n): CandidateData['finishReason'] {\n  if (!reason) return 'unknown';\n  switch (reason) {\n    case 'STOP':\n      return 'stop';\n    case 'MAX_TOKENS':\n      return 'length';\n    case 'SAFETY': // blocked for safety\n    case 'RECITATION': // blocked for reciting training data\n      return 'blocked';\n    default:\n      return 'unknown';\n  }\n}\n\nexport function fromGeminiCandidate(\n  candidate: GeminiCandidate,\n  jsonMode = false\n): CandidateData {\n  const parts = candidate.content?.parts || [];\n  const genkitCandidate: CandidateData = {\n    index: candidate.index || 0,\n    message: {\n      role: 'model',\n      content: parts.map((part, index) =>\n        fromGeminiPart(part, jsonMode, index.toString())\n      ),\n    },\n    finishReason: fromGeminiFinishReason(candidate.finishReason),\n    finishMessage: candidate.finishMessage,\n    custom: {\n      safetyRatings: candidate.safetyRatings,\n      citationMetadata: candidate.citationMetadata,\n    },\n  };\n\n  return genkitCandidate;\n}\nexport function cleanSchema(schema: JSONSchema): JSONSchema {\n  const out = structuredClone(schema);\n  for (const key in out) {\n    if (key === '$schema' || key === 'additionalProperties') {\n      delete out[key];\n      continue;\n    }\n    if (typeof out[key] === 'object') {\n      out[key] = cleanSchema(out[key]);\n    }\n    // Zod nullish() and picoschema optional fields will produce type `[\"string\", \"null\"]`\n    // which is not supported by the model API. Convert them to just `\"string\"`.\n    if (key === 'type' && Array.isArray(out[key])) {\n      // find the first that's not `null`.\n      out[key] = out[key].find((t) => t !== 'null');\n    }\n  }\n  return out;\n}\n\n/**\n * Defines a new GoogleAI model.\n */\nexport function defineGoogleAIModel({\n  ai,\n  name,\n  apiKey: apiKeyOption,\n  apiVersion,\n  baseUrl,\n  info,\n  defaultConfig,\n  debugTraces,\n}: {\n  ai: Genkit;\n  name: string;\n  apiKey?: string | false;\n  apiVersion?: string;\n  baseUrl?: string;\n  info?: ModelInfo;\n  defaultConfig?: GeminiConfig;\n  debugTraces?: boolean;\n}): ModelAction {\n  let apiKey: string | undefined;\n  // DO NOT infer API key from environment variable if plugin was configured with `{apiKey: false}`.\n  if (apiKeyOption !== false) {\n    apiKey = apiKeyOption || getApiKeyFromEnvVar();\n    if (!apiKey) {\n      throw new GenkitError({\n        status: 'FAILED_PRECONDITION',\n        message:\n          'Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n          'For more details see https://genkit.dev/docs/plugins/google-genai',\n      });\n    }\n  }\n\n  const apiModelName = name.startsWith('googleai/')\n    ? name.substring('googleai/'.length)\n    : name;\n\n  const model: ModelReference<z.ZodTypeAny> =\n    SUPPORTED_GEMINI_MODELS[apiModelName] ??\n    modelRef({\n      name: `googleai/${apiModelName}`,\n      info: {\n        label: `Google AI - ${apiModelName}`,\n        supports: {\n          multiturn: true,\n          media: true,\n          tools: true,\n          systemRole: true,\n          output: ['text', 'json'],\n        },\n        ...info,\n      },\n      configSchema: GeminiConfigSchema,\n    });\n\n  const middleware: ModelMiddleware[] = [];\n  if (model.info?.supports?.media) {\n    // the gemini api doesn't support downloading media from http(s)\n    middleware.push(\n      downloadRequestMedia({\n        maxBytes: 1024 * 1024 * 10,\n        // don't downlaod files that have been uploaded using the Files API\n        filter: (part) => {\n          try {\n            const url = new URL(part.media.url);\n            if (\n              // Gemini can handle these URLs\n              [\n                'generativelanguage.googleapis.com',\n                'www.youtube.com',\n                'youtube.com',\n                'youtu.be',\n              ].includes(url.hostname)\n            )\n              return false;\n          } catch {}\n          return true;\n        },\n      })\n    );\n  }\n\n  return ai.defineModel(\n    {\n      apiVersion: 'v2',\n      name: model.name,\n      ...model.info,\n      configSchema: model.configSchema,\n      use: middleware,\n    },\n    async (request, { streamingRequested, sendChunk, abortSignal }) => {\n      const options: RequestOptions = { apiClient: GENKIT_CLIENT_HEADER };\n      if (apiVersion) {\n        options.apiVersion = apiVersion;\n      }\n      if (apiVersion) {\n        options.baseUrl = baseUrl;\n      }\n      const requestConfig: z.infer<typeof GeminiConfigSchema> = {\n        ...defaultConfig,\n        ...request.config,\n      };\n\n      // Make a copy so that modifying the request will not produce side-effects\n      const messages = [...request.messages];\n      if (messages.length === 0) throw new Error('No messages provided.');\n\n      // Gemini does not support messages with role system and instead expects\n      // systemInstructions to be provided as a separate input. The first\n      // message detected with role=system will be used for systemInstructions.\n      let systemInstruction: GeminiMessage | undefined = undefined;\n      if (model.info?.supports?.systemRole) {\n        const systemMessage = messages.find((m) => m.role === 'system');\n        if (systemMessage) {\n          messages.splice(messages.indexOf(systemMessage), 1);\n          systemInstruction = toGeminiSystemInstruction(systemMessage);\n        }\n      }\n\n      const tools: Tool[] = [];\n      if (request.tools?.length) {\n        tools.push({\n          functionDeclarations: request.tools.map(toGeminiTool),\n        });\n      }\n\n      const {\n        apiKey: apiKeyFromConfig,\n        safetySettings: safetySettingsFromConfig,\n        codeExecution: codeExecutionFromConfig,\n        version: versionFromConfig,\n        functionCallingConfig,\n        googleSearchRetrieval,\n        tools: toolsFromConfig,\n        ...restOfConfigOptions\n      } = requestConfig;\n\n      if (codeExecutionFromConfig) {\n        tools.push({\n          codeExecution:\n            request.config.codeExecution === true\n              ? {}\n              : request.config.codeExecution,\n        });\n      }\n\n      if (toolsFromConfig) {\n        tools.push(...(toolsFromConfig as any[]));\n      }\n\n      if (googleSearchRetrieval) {\n        tools.push({\n          googleSearch:\n            googleSearchRetrieval === true ? {} : googleSearchRetrieval,\n        } as GoogleSearchRetrievalTool);\n      }\n\n      let toolConfig: ToolConfig | undefined;\n      if (functionCallingConfig) {\n        toolConfig = {\n          functionCallingConfig: {\n            allowedFunctionNames: functionCallingConfig.allowedFunctionNames,\n            mode: toFunctionModeEnum(functionCallingConfig.mode),\n          },\n        };\n      } else if (request.toolChoice) {\n        toolConfig = {\n          functionCallingConfig: {\n            mode: toGeminiFunctionModeEnum(request.toolChoice),\n          },\n        };\n      }\n\n      // Cannot use tools with JSON mode\n      const jsonMode =\n        request.output?.format === 'json' ||\n        (request.output?.contentType === 'application/json' &&\n          tools.length === 0);\n\n      const generationConfig: GenerationConfig = {\n        ...restOfConfigOptions,\n        candidateCount: request.candidates || undefined,\n        responseMimeType: jsonMode ? 'application/json' : undefined,\n      };\n\n      if (request.output?.constrained && jsonMode) {\n        generationConfig.responseSchema = cleanSchema(request.output.schema);\n      }\n\n      const msg = toGeminiMessage(messages[messages.length - 1], model);\n\n      const fromJSONModeScopedGeminiCandidate = (\n        candidate: GeminiCandidate\n      ) => {\n        return fromGeminiCandidate(candidate, jsonMode);\n      };\n\n      const chatRequest: StartChatParams = {\n        systemInstruction,\n        generationConfig,\n        tools: tools.length ? tools : undefined,\n        toolConfig,\n        history: messages\n          .slice(0, -1)\n          .map((message) => toGeminiMessage(message, model)),\n        safetySettings: safetySettingsFromConfig,\n      } as StartChatParams;\n      const modelVersion = (versionFromConfig ||\n        model.version ||\n        apiModelName) as string;\n      const cacheConfigDetails = extractCacheConfig(request);\n\n      const { chatRequest: updatedChatRequest, cache } =\n        await handleCacheIfNeeded(\n          apiKey!,\n          request,\n          chatRequest,\n          modelVersion,\n          cacheConfigDetails\n        );\n\n      if (!apiKeyFromConfig && !apiKey) {\n        throw new GenkitError({\n          status: 'INVALID_ARGUMENT',\n          message:\n            'GoogleAI plugin was initialized with {apiKey: false} but no apiKey configuration was passed at call time.',\n        });\n      }\n      const client = new GoogleGenerativeAI(apiKeyFromConfig || apiKey!);\n      let genModel: GenerativeModel;\n\n      if (cache) {\n        genModel = client.getGenerativeModelFromCachedContent(\n          cache,\n          {\n            model: modelVersion,\n          },\n          options\n        );\n      } else {\n        genModel = client.getGenerativeModel(\n          {\n            model: modelVersion,\n          },\n          options\n        );\n      }\n\n      const callGemini = async () => {\n        let response: GenerateContentResponse;\n\n        if (streamingRequested) {\n          const result = await genModel\n            .startChat(updatedChatRequest)\n            .sendMessageStream(msg.parts, { ...options, signal: abortSignal });\n\n          const chunks = [] as GenerateContentResponse[];\n          for await (const item of result.stream) {\n            chunks.push(item as GenerateContentResponse);\n            (item as GenerateContentResponse).candidates?.forEach(\n              (candidate) => {\n                const c = fromJSONModeScopedGeminiCandidate(candidate);\n                sendChunk({\n                  index: c.index,\n                  content: c.message.content,\n                });\n              }\n            );\n          }\n\n          response = aggregateResponses(chunks);\n        } else {\n          const result = await genModel\n            .startChat(updatedChatRequest)\n            .sendMessage(msg.parts, { ...options, signal: abortSignal });\n\n          response = result.response;\n        }\n\n        const candidates = response.candidates || [];\n        if (response.candidates?.['undefined']) {\n          candidates.push(response.candidates['undefined']);\n        }\n        if (!candidates.length) {\n          throw new GenkitError({\n            status: 'FAILED_PRECONDITION',\n            message: 'No valid candidates returned.',\n          });\n        }\n\n        const candidateData =\n          candidates.map(fromJSONModeScopedGeminiCandidate) || [];\n\n        return {\n          candidates: candidateData,\n          custom: response,\n          usage: {\n            ...getBasicUsageStats(request.messages, candidateData),\n            inputTokens: response.usageMetadata?.promptTokenCount,\n            outputTokens: response.usageMetadata?.candidatesTokenCount,\n            totalTokens: response.usageMetadata?.totalTokenCount,\n            cachedContentTokens:\n              response.usageMetadata?.cachedContentTokenCount,\n          },\n        };\n      };\n\n      // If debugTraces is enable, we wrap the actual model call with a span, add raw\n      // API params as for input.\n      return debugTraces\n        ? await runInNewSpan(\n            ai.registry,\n            {\n              metadata: {\n                name: streamingRequested ? 'sendMessageStream' : 'sendMessage',\n              },\n            },\n            async (metadata) => {\n              metadata.input = {\n                sdk: '@google/generative-ai',\n                cache: cache,\n                model: genModel.model,\n                chatOptions: updatedChatRequest,\n                parts: msg.parts,\n                options,\n              };\n              const response = await callGemini();\n              metadata.output = response.custom;\n              return response;\n            }\n          )\n        : await callGemini();\n    }\n  );\n}\n\n/** Converts mode from the config, which follows Gemini naming convention. */\nfunction toFunctionModeEnum(\n  configEnum: string | undefined\n): FunctionCallingMode | undefined {\n  if (configEnum === undefined) {\n    return undefined;\n  }\n  switch (configEnum) {\n    case 'MODE_UNSPECIFIED': {\n      return FunctionCallingMode.MODE_UNSPECIFIED;\n    }\n    case 'ANY': {\n      return FunctionCallingMode.ANY;\n    }\n    case 'AUTO': {\n      return FunctionCallingMode.AUTO;\n    }\n    case 'NONE': {\n      return FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${configEnum}`);\n  }\n}\n\n/** Converts mode from genkit tool choice. */\nfunction toGeminiFunctionModeEnum(\n  genkitMode: 'auto' | 'required' | 'none'\n): FunctionCallingMode | undefined {\n  if (genkitMode === undefined) {\n    return undefined;\n  }\n  switch (genkitMode) {\n    case 'required': {\n      return FunctionCallingMode.ANY;\n    }\n    case 'auto': {\n      return FunctionCallingMode.AUTO;\n    }\n    case 'none': {\n      return FunctionCallingMode.NONE;\n    }\n    default:\n      throw new Error(`unsupported function calling mode: ${genkitMode}`);\n  }\n}\n\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single GenerateContentResponse.\n *\n * This code is copy-pasted from https://github.com/google-gemini/deprecated-generative-ai-js/blob/8b14949a5e8f1f3dfc35c394ebf5b19e68f92a22/src/requests/stream-reader.ts#L153\n * with a small (but critical) bug fix.\n */\nexport function aggregateResponses(\n  responses: GenerateContentResponse[]\n): GenerateContentResponse {\n  const lastResponse = responses[responses.length - 1];\n  const aggregatedResponse: GenerateContentResponse = {\n    promptFeedback: lastResponse?.promptFeedback,\n  };\n  for (const response of responses) {\n    if (response.candidates) {\n      let candidateIndex = 0;\n      for (const candidate of response.candidates) {\n        if (!aggregatedResponse.candidates) {\n          aggregatedResponse.candidates = [];\n        }\n        if (!aggregatedResponse.candidates[candidateIndex]) {\n          aggregatedResponse.candidates[candidateIndex] = {\n            index: candidateIndex,\n          } as GenerateContentCandidate;\n        }\n        // Keep overwriting, the last one will be final\n        aggregatedResponse.candidates[candidateIndex].citationMetadata =\n          candidate.citationMetadata;\n        aggregatedResponse.candidates[candidateIndex].groundingMetadata =\n          candidate.groundingMetadata;\n        aggregatedResponse.candidates[candidateIndex].finishReason =\n          candidate.finishReason;\n        aggregatedResponse.candidates[candidateIndex].finishMessage =\n          candidate.finishMessage;\n        aggregatedResponse.candidates[candidateIndex].safetyRatings =\n          candidate.safetyRatings;\n\n        /**\n         * Candidates should always have content and parts, but this handles\n         * possible malformed responses.\n         */\n        if (candidate.content && candidate.content.parts) {\n          if (!aggregatedResponse.candidates[candidateIndex].content) {\n            aggregatedResponse.candidates[candidateIndex].content = {\n              role: candidate.content.role || 'user',\n              parts: [],\n            };\n          }\n          for (const part of candidate.content.parts) {\n            const newPart: Partial<GeminiPart> = {};\n            if (part.text) {\n              newPart.text = part.text;\n            }\n            if ((part as any).thought) {\n              (newPart as any).thought = (part as any).thought;\n            }\n            if ((part as any).thoughtSignature) {\n              (newPart as any).thoughtSignature = (\n                part as any\n              ).thoughtSignature;\n            }\n            if (part.functionCall) {\n              newPart.functionCall = part.functionCall;\n            }\n            if (part.executableCode) {\n              newPart.executableCode = part.executableCode;\n            }\n            if (part.codeExecutionResult) {\n              newPart.codeExecutionResult = part.codeExecutionResult;\n            }\n            if (Object.keys(newPart).length === 0) {\n              newPart.text = '';\n            }\n            aggregatedResponse.candidates[candidateIndex].content.parts.push(\n              newPart as GeminiPart\n            );\n          }\n        }\n      }\n      candidateIndex++;\n    }\n    if (response.usageMetadata) {\n      aggregatedResponse.usageMetadata = response.usageMetadata;\n    }\n  }\n  return aggregatedResponse;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4500, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/predict.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GENKIT_CLIENT_HEADER } from 'genkit';\n\nexport type PredictMethod = 'predict' | 'predictLongRunning';\n\nexport interface Operation {\n  name: string;\n  done?: boolean;\n  error?: {\n    message: string;\n  };\n  response?: {\n    generateVideoResponse: {\n      generatedSamples: { video: { uri: string } }[];\n    };\n  };\n}\n\nfunction predictEndpoint(options: {\n  apiVersion: string;\n  model: string;\n  apiKey: string;\n  method: PredictMethod;\n}) {\n  return `https://generativelanguage.googleapis.com/${options.apiVersion}/models/${options.model}:${options.method}?key=${options.apiKey}`;\n}\n\nfunction opCheckEndpoint(options: {\n  apiVersion: string;\n  operation: string;\n  apiKey: string;\n}) {\n  return `https://generativelanguage.googleapis.com/${options.apiVersion}/${options.operation}?key=${options.apiKey}`;\n}\n\nexport type PredictClient<I = unknown, R = unknown, P = unknown> = (\n  instances: I[],\n  parameters: P\n) => Promise<R>;\n\nexport function predictModel<I = unknown, R = unknown, P = unknown>(\n  model: string,\n  apiKey: string,\n  method: PredictMethod\n): PredictClient<I, R, P> {\n  return async (instances: I[], parameters: P): Promise<R> => {\n    const fetch = (await import('node-fetch')).default;\n\n    const req = {\n      instances,\n      parameters,\n    };\n\n    const response = await fetch(\n      predictEndpoint({\n        model,\n        apiVersion: 'v1beta',\n        apiKey,\n        method,\n      }),\n      {\n        method: 'POST',\n        body: JSON.stringify(req),\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Goog-Api-Client': GENKIT_CLIENT_HEADER,\n        },\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `Error from Gemini AI predict: HTTP ${\n          response.status\n        }: ${await response.text()}`\n      );\n    }\n\n    return (await response.json()) as R;\n  };\n}\n\nexport async function checkOp(\n  operation: string,\n  apiKey: string\n): Promise<Operation> {\n  const fetch = (await import('node-fetch')).default;\n\n  const response = await fetch(\n    opCheckEndpoint({\n      apiVersion: 'v1beta',\n      operation,\n      apiKey,\n    }),\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Goog-Api-Client': GENKIT_CLIENT_HEADER,\n      },\n    }\n  );\n\n  if (!response.ok) {\n    throw new Error(\n      `Error from operation API: HTTP ${\n        response.status\n      }: ${await response.text()}`\n    );\n  }\n\n  return (await response.json()) as Operation;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,kBAAA,CAAA;AAAA,SAAA,iBAAA;IAAA,SAAA,IAAA;IAAA,cAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AAgBA,IAAA,gBAAqC;AAiBrC,SAAS,gBAAgB,OAAA,EAKtB;IACD,OAAO,CAAA,0CAAA,EAA6C,QAAQ,UAAU,CAAA,QAAA,EAAW,QAAQ,KAAK,CAAA,CAAA,EAAI,QAAQ,MAAM,CAAA,KAAA,EAAQ,QAAQ,MAAM,EAAA;AACxI;AAEA,SAAS,gBAAgB,OAAA,EAItB;IACD,OAAO,CAAA,0CAAA,EAA6C,QAAQ,UAAU,CAAA,CAAA,EAAI,QAAQ,SAAS,CAAA,KAAA,EAAQ,QAAQ,MAAM,EAAA;AACnH;AAOO,SAAS,aACd,KAAA,EACA,MAAA,EACA,MAAA,EACwB;IACxB,OAAO,OAAO,WAAgB,eAA8B;QAC1D,MAAM,QAAA,CAAS,MAAM,OAAO,YAAY,sHAAA,EAAG,OAAA;QAE3C,MAAM,MAAM;YACV;YACA;QACF;QAEA,MAAM,WAAW,MAAM,MACrB,gBAAgB;YACd;YACA,YAAY;YACZ;YACA;QACF,CAAC,GACD;YACE,QAAQ;YACR,MAAM,KAAK,SAAA,CAAU,GAAG;YACxB,SAAS;gBACP,gBAAgB;gBAChB,qBAAqB,cAAA,oBAAA;YACvB;QACF;QAGF,IAAI,CAAC,SAAS,EAAA,EAAI;YAChB,MAAM,IAAI,MACR,CAAA,mCAAA,EACE,SAAS,MACX,CAAA,EAAA,EAAK,MAAM,SAAS,IAAA,CAAK,CAAC,EAAA;QAE9B;QAEA,OAAQ,MAAM,SAAS,IAAA,CAAK;IAC9B;AACF;AAEA,eAAsB,QACpB,SAAA,EACA,MAAA,EACoB;IACpB,MAAM,QAAA,CAAS,MAAM,OAAO,YAAY,sHAAA,EAAG,OAAA;IAE3C,MAAM,WAAW,MAAM,MACrB,gBAAgB;QACd,YAAY;QACZ;QACA;IACF,CAAC,GACD;QACE,QAAQ;QACR,SAAS;YACP,gBAAgB;YAChB,qBAAqB,cAAA,oBAAA;QACvB;IACF;IAGF,IAAI,CAAC,SAAS,EAAA,EAAI;QAChB,MAAM,IAAI,MACR,CAAA,+BAAA,EACE,SAAS,MACX,CAAA,EAAA,EAAK,MAAM,SAAS,IAAA,CAAK,CAAC,EAAA;IAE9B;IAEA,OAAQ,MAAM,SAAS,IAAA,CAAK;AAC9B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4600, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/imagen.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenkitError, MessageData, z, type Genkit } from 'genkit';\nimport {\n  getBasicUsageStats,\n  modelRef,\n  type GenerateRequest,\n  type ModelAction,\n  type ModelInfo,\n  type ModelReference,\n} from 'genkit/model';\nimport { getApiKeyFromEnvVar } from './common.js';\nimport { predictModel } from './predict.js';\n\nexport type KNOWN_IMAGEN_MODELS = 'imagen-3.0-generate-002';\n\n/**\n * See https://ai.google.dev/gemini-api/docs/image-generation#imagen-model\n */\nexport const ImagenConfigSchema = z\n  .object({\n    numberOfImages: z\n      .number()\n      .describe(\n        'The number of images to generate, from 1 to 4 (inclusive). The default is 1.'\n      )\n      .optional(),\n    aspectRatio: z\n      .enum(['1:1', '9:16', '16:9', '3:4', '4:3'])\n      .describe('Desired aspect ratio of the output image.')\n      .optional(),\n    personGeneration: z\n      .enum(['dont_allow', 'allow_adult', 'allow_all'])\n      .describe(\n        'Control if/how images of people will be generated by the model.'\n      )\n      .optional(),\n  })\n  .passthrough();\n\ninterface ImagenParameters {\n  sampleCount?: number;\n  aspectRatio?: string;\n  personGeneration?: string;\n}\n\nfunction toParameters(\n  request: GenerateRequest<typeof ImagenConfigSchema>\n): ImagenParameters {\n  const out = {\n    sampleCount: request.config?.numberOfImages ?? 1,\n    ...request?.config,\n  };\n\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n\n  return out;\n}\n\nfunction extractText(request: GenerateRequest) {\n  return request.messages\n    .at(-1)!\n    .content.map((c) => c.text || '')\n    .join('');\n}\n\nfunction extractBaseImage(request: GenerateRequest): string | undefined {\n  return request.messages\n    .at(-1)\n    ?.content.find((p) => !!p.media)\n    ?.media?.url.split(',')[1];\n}\n\ninterface ImagenPrediction {\n  predictions: { bytesBase64Encoded: string; mimeType: string }[];\n}\n\ninterface ImagenInstance {\n  prompt: string;\n  image?: { bytesBase64Encoded: string };\n  mask?: { image?: { bytesBase64Encoded: string } };\n}\n\nexport const GENERIC_IMAGEN_INFO = {\n  label: `Google AI - Generic Imagen`,\n  supports: {\n    media: true,\n    multiturn: false,\n    tools: false,\n    systemRole: false,\n    output: ['media'],\n  },\n} as ModelInfo;\n\nexport function defineImagenModel(\n  ai: Genkit,\n  name: string,\n  apiKey?: string | false\n): ModelAction {\n  if (apiKey !== false) {\n    apiKey = apiKey || getApiKeyFromEnvVar();\n    if (!apiKey) {\n      throw new GenkitError({\n        status: 'FAILED_PRECONDITION',\n        message:\n          'Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n          'For more details see https://genkit.dev/docs/plugins/google-genai',\n      });\n    }\n  }\n  const modelName = `googleai/${name}`;\n  const model: ModelReference<z.ZodTypeAny> = modelRef({\n    name: modelName,\n    info: {\n      ...GENERIC_IMAGEN_INFO,\n      label: `Google AI - ${name}`,\n    },\n    configSchema: ImagenConfigSchema,\n  });\n\n  return ai.defineModel(\n    {\n      name: modelName,\n      ...model.info,\n      configSchema: ImagenConfigSchema,\n    },\n    async (request) => {\n      const instance: ImagenInstance = {\n        prompt: extractText(request),\n      };\n      const baseImage = extractBaseImage(request);\n      if (baseImage) {\n        instance.image = { bytesBase64Encoded: baseImage };\n      }\n\n      const predictClient = predictModel<\n        ImagenInstance,\n        ImagenPrediction,\n        ImagenParameters\n      >(model.version || name, apiKey as string, 'predict');\n      const response = await predictClient([instance], toParameters(request));\n\n      if (!response.predictions || response.predictions.length == 0) {\n        throw new Error(\n          'Model returned no predictions. Possibly due to content filters.'\n        );\n      }\n\n      const message = {\n        role: 'model',\n        content: [],\n      } as MessageData;\n\n      response.predictions.forEach((p, i) => {\n        const b64data = p.bytesBase64Encoded;\n        const mimeType = p.mimeType;\n        message.content.push({\n          media: {\n            url: `data:${mimeType};base64,${b64data}`,\n            contentType: mimeType,\n          },\n        });\n      });\n      return {\n        finishReason: 'stop',\n        message,\n        usage: getBasicUsageStats(request.messages, message),\n        custom: response,\n      };\n    }\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4750, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/list-models.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Gemini  model definition\nexport interface Model {\n  name: string;\n  baseModelId: string;\n  version: string;\n  displayName: string;\n  description: string;\n  inputTokenLimit: number;\n  outputTokenLimit: number;\n  supportedGenerationMethods: string[];\n  temperature: number;\n  maxTemperature: number;\n  topP: number;\n  topK: number;\n}\n\n// Gemini list models response\ninterface ListModelsResponse {\n  models: Model[];\n  nextPageToken?: string;\n}\n\n/**\n * List Gemini models by making an RPC call to the API.\n *\n * https://ai.google.dev/api/models#method:-models.list\n */\nexport async function listModels(\n  baseUrl: string,\n  apiKey: string\n): Promise<Model[]> {\n  // We call the gemini list local models api:\n  const res = await fetch(\n    `${baseUrl}/v1beta/models?pageSize=1000&key=${apiKey}`,\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n  const modelResponse = JSON.parse(await res.text()) as ListModelsResponse;\n  return modelResponse.models;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,sBAAA,CAAA;AAAA,SAAA,qBAAA;IAAA,YAAA,IAAA;AAAA;AAAA,OAAA,OAAA,GAAA,aAAA;AA2CA,eAAsB,WACpB,OAAA,EACA,MAAA,EACkB;IAElB,MAAM,MAAM,MAAM,MAChB,GAAG,OAAO,CAAA,iCAAA,EAAoC,MAAM,EAAA,EACpD;QACE,QAAQ;QACR,SAAS;YACP,gBAAgB;QAClB;IACF;IAEF,MAAM,gBAAgB,KAAK,KAAA,CAAM,MAAM,IAAI,IAAA,CAAK,CAAC;IACjD,OAAO,cAAc,MAAA;AACvB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4797, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/veo.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GenerateResponseData,\n  GenkitError,\n  Operation,\n  z,\n  type Genkit,\n} from 'genkit';\nimport {\n  BackgroundModelAction,\n  modelRef,\n  type GenerateRequest,\n  type ModelInfo,\n  type ModelReference,\n} from 'genkit/model';\nimport { getApiKeyFromEnvVar } from './common.js';\nimport { Operation as ApiOperation, checkOp, predictModel } from './predict.js';\n\nexport type KNOWN_VEO_MODELS = 'veo-2.0-generate-001';\n\n/**\n * See https://ai.google.dev/gemini-api/docs/video\n */\nexport const VeoConfigSchema = z\n  .object({\n    // NOTE: Documentation notes numberOfVideos parameter to pick the number of\n    // output videos, but this setting does not seem to work\n    negativePrompt: z.string().optional(),\n    aspectRatio: z\n      .enum(['9:16', '16:9'])\n      .describe('Desired aspect ratio of the output video.')\n      .optional(),\n    personGeneration: z\n      .enum(['dont_allow', 'allow_adult', 'allow_all'])\n      .describe(\n        'Control if/how images of people will be generated by the model.'\n      )\n      .optional(),\n    durationSeconds: z\n      .number()\n      .step(1)\n      .min(5)\n      .max(8)\n      .describe('Length of each output video in seconds, between 5 and 8.')\n      .optional(),\n    enhance_prompt: z\n      .boolean()\n      .describe('Enable or disable the prompt rewriter. Enabled by default.')\n      .optional(),\n  })\n  .passthrough();\n\nfunction extractText(request: GenerateRequest) {\n  return request.messages\n    .at(-1)!\n    .content.map((c) => c.text || '')\n    .join('');\n}\n\ninterface VeoParameters {\n  sampleCount?: number;\n  aspectRatio?: string;\n  personGeneration?: string;\n}\n\nfunction toParameters(\n  request: GenerateRequest<typeof VeoConfigSchema>\n): VeoParameters {\n  const out = {\n    ...request?.config,\n  };\n\n  for (const k in out) {\n    if (!out[k]) delete out[k];\n  }\n\n  return out;\n}\n\nfunction extractImage(request: GenerateRequest): VeoImage | undefined {\n  const media = request.messages.at(-1)?.content.find((p) => !!p.media)?.media;\n  if (media) {\n    const img = media?.url.split(',')[1];\n    return {\n      bytesBase64Encoded: img,\n      mimeType: media.contentType!,\n    };\n  }\n  return undefined;\n}\n\ninterface VeoImage {\n  bytesBase64Encoded: string;\n  mimeType: string;\n}\n\ninterface VeoInstance {\n  prompt: string;\n  image?: VeoImage;\n}\n\nexport const GENERIC_VEO_INFO = {\n  label: `Google AI - Generic Veo`,\n  supports: {\n    media: true,\n    multiturn: false,\n    tools: false,\n    systemRole: false,\n    output: ['media'],\n    longRunning: true,\n  },\n} as ModelInfo;\n\nexport function defineVeoModel(\n  ai: Genkit,\n  name: string,\n  apiKey?: string | false\n): BackgroundModelAction<typeof VeoConfigSchema> {\n  if (apiKey !== false) {\n    apiKey = apiKey || getApiKeyFromEnvVar();\n    if (!apiKey) {\n      throw new GenkitError({\n        status: 'FAILED_PRECONDITION',\n        message:\n          'Please pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.\\n' +\n          'For more details see https://genkit.dev/docs/plugins/google-genai',\n      });\n    }\n  }\n  const modelName = `googleai/${name}`;\n  const model: ModelReference<z.ZodTypeAny> = modelRef({\n    name: modelName,\n    info: {\n      ...GENERIC_VEO_INFO,\n      label: `Google AI - ${name}`,\n    },\n    configSchema: VeoConfigSchema,\n  });\n\n  return ai.defineBackgroundModel({\n    name: modelName,\n    ...model.info,\n    configSchema: VeoConfigSchema,\n    async start(request) {\n      const instance: VeoInstance = {\n        prompt: extractText(request),\n      };\n      const image = extractImage(request);\n      if (image) {\n        instance.image = image;\n      }\n\n      const predictClient = predictModel<\n        VeoInstance,\n        ApiOperation,\n        VeoParameters\n      >(model.version || name, apiKey as string, 'predictLongRunning');\n      const response = await predictClient([instance], toParameters(request));\n\n      return toGenkitOp(response);\n    },\n    async check(operation) {\n      const newOp = await checkOp(operation.id, apiKey as string);\n      return toGenkitOp(newOp);\n    },\n  });\n}\n\nfunction toGenkitOp(apiOp: ApiOperation): Operation<GenerateResponseData> {\n  const res = { id: apiOp.name } as Operation<GenerateResponseData>;\n  if (apiOp.done !== undefined) {\n    res.done = apiOp.done;\n  }\n\n  if (apiOp.error) {\n    res.error = { message: apiOp.error.message };\n  }\n\n  if (\n    apiOp.response &&\n    apiOp.response.generateVideoResponse &&\n    apiOp.response.generateVideoResponse.generatedSamples\n  ) {\n    res.output = {\n      finishReason: 'stop',\n      raw: apiOp.response,\n      message: {\n        role: 'model',\n        content: apiOp.response.generateVideoResponse.generatedSamples.map(\n          (s) => {\n            return {\n              media: {\n                url: s.video.uri,\n              },\n            };\n          }\n        ),\n      },\n    };\n  }\n\n  return res;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4968, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40genkit-ai/googleai/src/index.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  embedderActionMetadata,\n  embedderRef,\n  modelActionMetadata,\n  type ActionMetadata,\n  type EmbedderReference,\n  type Genkit,\n  type ModelReference,\n  type z,\n} from 'genkit';\nimport { logger } from 'genkit/logging';\nimport { modelRef } from 'genkit/model';\nimport { genkitPlugin, type GenkitPlugin } from 'genkit/plugin';\nimport type { ActionType } from 'genkit/registry';\nimport { getApiKeyFromEnvVar } from './common.js';\nimport {\n  SUPPORTED_MODELS as EMBEDDER_MODELS,\n  GeminiEmbeddingConfigSchema,\n  defineGoogleAIEmbedder,\n  geminiEmbedding001,\n  textEmbedding004,\n  textEmbeddingGecko001,\n  type GeminiEmbeddingConfig,\n} from './embedder.js';\nimport {\n  GeminiConfigSchema,\n  SUPPORTED_GEMINI_MODELS,\n  defineGoogleAIModel,\n  gemini,\n  gemini10Pro,\n  gemini15Flash,\n  gemini15Flash8b,\n  gemini15Pro,\n  gemini20Flash,\n  gemini20FlashExp,\n  gemini20FlashLite,\n  gemini20ProExp0205,\n  gemini25FlashLite,\n  gemini25FlashPreview0417,\n  gemini25ProExp0325,\n  gemini25ProPreview0325,\n  type GeminiConfig,\n  type GeminiVersionString,\n} from './gemini.js';\nimport {\n  GENERIC_IMAGEN_INFO,\n  ImagenConfigSchema,\n  defineImagenModel,\n  type KNOWN_IMAGEN_MODELS,\n} from './imagen.js';\nimport { listModels } from './list-models.js';\nimport {\n  GENERIC_VEO_INFO,\n  KNOWN_VEO_MODELS,\n  VeoConfigSchema,\n  defineVeoModel,\n} from './veo.js';\nexport {\n  gemini,\n  gemini10Pro,\n  gemini15Flash,\n  gemini15Flash8b,\n  gemini15Pro,\n  gemini20Flash,\n  gemini20FlashExp,\n  gemini20FlashLite,\n  gemini20ProExp0205,\n  gemini25FlashLite,\n  gemini25FlashPreview0417,\n  gemini25ProExp0325,\n  gemini25ProPreview0325,\n  geminiEmbedding001,\n  textEmbedding004,\n  textEmbeddingGecko001,\n  type GeminiConfig,\n  type GeminiVersionString,\n};\n\nexport interface PluginOptions {\n  /**\n   * Provide the API key to use to authenticate with the Gemini API. By\n   * default, an API key must be provided explicitly here or through the\n   * `GEMINI_API_KEY` or `GOOGLE_API_KEY` environment variables.\n   *\n   * If `false` is explicitly passed, the plugin will be configured to\n   * expect an `apiKey` option to be provided to the model config at\n   * call time.\n   **/\n  apiKey?: string | false;\n  apiVersion?: string | string[];\n  baseUrl?: string;\n  models?: (\n    | ModelReference</** @ignore */ typeof GeminiConfigSchema>\n    | string\n  )[];\n  experimental_debugTraces?: boolean;\n}\n\nasync function initializer(ai: Genkit, options?: PluginOptions) {\n  let apiVersions = ['v1'];\n\n  if (options?.apiVersion) {\n    if (Array.isArray(options?.apiVersion)) {\n      apiVersions = options?.apiVersion;\n    } else {\n      apiVersions = [options?.apiVersion];\n    }\n  }\n\n  if (apiVersions.includes('v1beta')) {\n    Object.keys(SUPPORTED_GEMINI_MODELS).forEach((name) =>\n      defineGoogleAIModel({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: 'v1beta',\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces,\n      })\n    );\n  }\n  if (apiVersions.includes('v1')) {\n    Object.keys(SUPPORTED_GEMINI_MODELS).forEach((name) =>\n      defineGoogleAIModel({\n        ai,\n        name,\n        apiKey: options?.apiKey,\n        apiVersion: undefined,\n        baseUrl: options?.baseUrl,\n        debugTraces: options?.experimental_debugTraces,\n      })\n    );\n    Object.keys(EMBEDDER_MODELS).forEach((name) =>\n      defineGoogleAIEmbedder(ai, name, { apiKey: options?.apiKey })\n    );\n  }\n\n  if (options?.models) {\n    for (const modelOrRef of options?.models) {\n      const modelName =\n        typeof modelOrRef === 'string'\n          ? modelOrRef\n          : // strip out the `googleai/` prefix\n            modelOrRef.name.split('/')[1];\n      const modelRef =\n        typeof modelOrRef === 'string' ? gemini(modelOrRef) : modelOrRef;\n      defineGoogleAIModel({\n        ai,\n        name: modelName,\n        apiKey: options?.apiKey,\n        baseUrl: options?.baseUrl,\n        info: {\n          ...modelRef.info,\n          label: `Google AI - ${modelName}`,\n        },\n        debugTraces: options?.experimental_debugTraces,\n      });\n    }\n  }\n}\n\nasync function resolver(\n  ai: Genkit,\n  actionType: ActionType,\n  actionName: string,\n  options?: PluginOptions\n) {\n  if (actionType === 'embedder') {\n    resolveEmbedder(ai, actionName, options);\n  } else if (actionName.startsWith('veo')) {\n    // we do it this way because the request may come in for\n    // action type 'model' and action name 'veo-...'. That case should\n    // be a noop. It's just the order or model lookup.\n    if (actionType === 'background-model') {\n      defineVeoModel(ai, actionName, options?.apiKey);\n    }\n  } else if (actionType === 'model') {\n    resolveModel(ai, actionName, options);\n  }\n}\n\nfunction resolveModel(ai: Genkit, actionName: string, options?: PluginOptions) {\n  if (actionName.startsWith('imagen')) {\n    defineImagenModel(ai, actionName, options?.apiKey);\n    return;\n  }\n\n  const modelRef = gemini(actionName);\n  defineGoogleAIModel({\n    ai,\n    name: modelRef.name,\n    apiKey: options?.apiKey,\n    baseUrl: options?.baseUrl,\n    info: {\n      ...modelRef.info,\n      label: `Google AI - ${actionName}`,\n    },\n    debugTraces: options?.experimental_debugTraces,\n  });\n}\n\nfunction resolveEmbedder(\n  ai: Genkit,\n  actionName: string,\n  options?: PluginOptions\n) {\n  defineGoogleAIEmbedder(ai, `googleai/${actionName}`, {\n    apiKey: options?.apiKey,\n  });\n}\n\nasync function listActions(options?: PluginOptions): Promise<ActionMetadata[]> {\n  const apiKey = options?.apiKey || getApiKeyFromEnvVar();\n  if (!apiKey) {\n    // If API key is not configured we don't want to error, just return empty.\n    // In practice it will never actually reach this point without the API key,\n    // plugin initializer will fail before that.\n    logger.error(\n      'Pass in the API key or set the GEMINI_API_KEY or GOOGLE_API_KEY environment variable.'\n    );\n    return [];\n  }\n\n  const models = await listModels(\n    options?.baseUrl || 'https://generativelanguage.googleapis.com',\n    apiKey\n  );\n\n  return [\n    // Imagen\n    ...models\n      .filter(\n        (m) =>\n          m.supportedGenerationMethods.includes('predict') &&\n          m.name.includes('imagen')\n      )\n      // Filter out deprecated\n      .filter((m) => !m.description || !m.description.includes('deprecated'))\n      .map((m) => {\n        const name = m.name.split('/').at(-1)!;\n\n        return modelActionMetadata({\n          name: `googleai/${name}`,\n          info: { ...GENERIC_IMAGEN_INFO },\n          configSchema: ImagenConfigSchema,\n        });\n      }),\n    // Veo\n    ...models\n      .filter(\n        (m) =>\n          m.supportedGenerationMethods.includes('predictLongRunning') &&\n          m.name.includes('veo')\n      )\n      // Filter out deprecated\n      .filter((m) => !m.description || !m.description.includes('deprecated'))\n      .map((m) => {\n        const name = m.name.split('/').at(-1)!;\n\n        return modelActionMetadata({\n          name: `googleai/${name}`,\n          info: { ...GENERIC_VEO_INFO },\n          configSchema: VeoConfigSchema,\n          background: true,\n        });\n      }),\n    // Models\n    ...models\n      .filter((m) => m.supportedGenerationMethods.includes('generateContent'))\n      // Filter out deprecated\n      .filter((m) => !m.description || !m.description.includes('deprecated'))\n      .map((m) => {\n        const ref = gemini(\n          m.name.startsWith('models/')\n            ? m.name.substring('models/'.length)\n            : m.name\n        );\n\n        return modelActionMetadata({\n          name: ref.name,\n          info: ref.info,\n          configSchema: GeminiConfigSchema,\n        });\n      }),\n    // Embedders\n    ...models\n      .filter((m) => m.supportedGenerationMethods.includes('embedContent'))\n      // Filter out deprecated\n      .filter((m) => !m.description || !m.description.includes('deprecated'))\n      .map((m) => {\n        const name =\n          'googleai/' +\n          (m.name.startsWith('models/')\n            ? m.name.substring('models/'.length)\n            : m.name);\n\n        return embedderActionMetadata({\n          name,\n          configSchema: GeminiEmbeddingConfigSchema,\n          info: {\n            dimensions: 768,\n            label: `Google Gen AI - ${name}`,\n            supports: {\n              input: ['text'],\n            },\n          },\n        });\n      }),\n  ];\n}\n\n/**\n * Google Gemini Developer API plugin.\n */\nexport function googleAIPlugin(options?: PluginOptions): GenkitPlugin {\n  let listActionsCache;\n  return genkitPlugin(\n    'googleai',\n    async (ai: Genkit) => await initializer(ai, options),\n    async (ai: Genkit, actionType: ActionType, actionName: string) =>\n      await resolver(ai, actionType, actionName, options),\n    async () => {\n      if (listActionsCache) return listActionsCache;\n      listActionsCache = await listActions(options);\n      return listActionsCache;\n    }\n  );\n}\n\nexport type GoogleAIPlugin = {\n  (params?: PluginOptions): GenkitPlugin;\n  model(\n    name: keyof typeof SUPPORTED_GEMINI_MODELS | (`gemini-${string}` & {}),\n    config?: z.infer<typeof GeminiConfigSchema>\n  ): ModelReference<typeof GeminiConfigSchema>;\n  model(\n    name: KNOWN_IMAGEN_MODELS | (`imagen${string}` & {}),\n    config?: z.infer<typeof ImagenConfigSchema>\n  ): ModelReference<typeof ImagenConfigSchema>;\n  model(\n    name: KNOWN_VEO_MODELS | (`veo${string}` & {}),\n    config?: z.infer<typeof VeoConfigSchema>\n  ): ModelReference<typeof VeoConfigSchema>;\n  model(name: string, config?: any): ModelReference<z.ZodTypeAny>;\n  embedder(\n    name: string,\n    config?: GeminiEmbeddingConfig\n  ): EmbedderReference<typeof GeminiEmbeddingConfigSchema>;\n};\n\n/**\n * Google Gemini Developer API plugin.\n */\nexport const googleAI = googleAIPlugin as GoogleAIPlugin;\n// provide generic implementation for the model function overloads.\n(googleAI as any).model = (\n  name: string,\n  config?: any\n): ModelReference<z.ZodTypeAny> => {\n  if (name.startsWith('imagen')) {\n    return modelRef({\n      name: `googleai/${name}`,\n      config,\n      configSchema: ImagenConfigSchema,\n    });\n  }\n  if (name.startsWith('veo')) {\n    return modelRef({\n      name: `googleai/${name}`,\n      config,\n      configSchema: VeoConfigSchema,\n    });\n  }\n  return modelRef({\n    name: `googleai/${name}`,\n    config,\n    configSchema: GeminiConfigSchema,\n  });\n};\ngoogleAI.embedder = (\n  name: string,\n  config?: GeminiEmbeddingConfig\n): EmbedderReference<typeof GeminiEmbeddingConfigSchema> => {\n  return embedderRef({\n    name: `googleai/${name}`,\n    config,\n    configSchema: GeminiEmbeddingConfigSchema,\n  });\n};\n\nexport default googleAI;\n"],"names":["modelRef"],"mappings":"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","ignoreList":[0],"debugId":null}}]
}