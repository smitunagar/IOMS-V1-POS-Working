{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/uploadMenu/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nexport const runtime = 'nodejs';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    console.log('==> /api/uploadMenu POST received');\r\n    \r\n    const body = await request.json();\r\n    const { manualMenuData, file, userId, textData } = body;\r\n    \r\n    let menuItems: any[] = [];\r\n    \r\n    if (manualMenuData && Array.isArray(manualMenuData)) {\r\n      menuItems = manualMenuData;\r\n    } else if (textData) {\r\n      // Simple text processing\r\n      const lines = textData.split('\\n').filter((line: string) => line.trim().length > 0);\r\n      menuItems = lines.map((line: string, idx: number) => ({\r\n        id: `text-${Date.now()}-${idx}`,\r\n        name: line.trim(),\r\n        price: '',\r\n        category: 'Extracted',\r\n        image: '',\r\n        ingredients: ['water', 'salt'],\r\n        extractionMethod: 'text'\r\n      }));\r\n    }\r\n    \r\n    // Normalize menu items\r\n    menuItems = menuItems.map((item: any, idx: number) => ({\r\n      id: item.id || `menu-${Date.now()}-${idx}`,\r\n      name: item.name || `Item ${idx+1}`,\r\n      price: item.price || '',\r\n      category: item.category || 'Uncategorized',\r\n      image: item.image || '',\r\n      ingredients: Array.isArray(item.ingredients) ? item.ingredients : ['water', 'salt'],\r\n      extractionMethod: item.extractionMethod || 'manual'\r\n    }));\r\n    \r\n    // Export to CSV\r\n    let csvExported = false;\r\n    let csvPath = '';\r\n    \r\n    try {\r\n      const exportsDir = path.join(process.cwd(), 'exports');\r\n      if (!fs.existsSync(exportsDir)) fs.mkdirSync(exportsDir, { recursive: true });\r\n      \r\n      csvPath = path.join(exportsDir, `menu-export-${Date.now()}.csv`);\r\n      \r\n      let csvContent = 'ID,Name,Price,Category,Image,Ingredients,ExtractionMethod\\n';\r\n      menuItems.forEach(item => {\r\n        const ingredients = Array.isArray(item.ingredients) ? item.ingredients.join(';') : '';\r\n        const escapedName = String(item.name || '').replace(/\"/g, '\"\"');\r\n        const escapedCategory = String(item.category || '').replace(/\"/g, '\"\"');\r\n        csvContent += `\"${item.id}\",\"${escapedName}\",\"${item.price}\",\"${escapedCategory}\",\"${item.image}\",\"${ingredients}\",\"${item.extractionMethod}\"\\n`;\r\n      });\r\n      \r\n      fs.writeFileSync(csvPath, csvContent, 'utf8');\r\n      csvExported = true;\r\n    } catch (csvErr) {\r\n      console.log('CSV export failed:', csvErr);\r\n    }\r\n    \r\n    const result = {\r\n      success: true,\r\n      count: menuItems.length,\r\n      csvExported,\r\n      csvPath,\r\n      extractionAccuracy: menuItems.length > 0 ? 100 : 0,\r\n      menu: menuItems\r\n    };\r\n    \r\n    return new Response(JSON.stringify(result), { \r\n      status: 200, \r\n      headers: { 'Content-Type': 'application/json' } \r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Upload Menu API error:', error);\r\n    return new Response(JSON.stringify({ \r\n      success: false, \r\n      message: error instanceof Error ? error.message : 'Internal server error'\r\n    }), { \r\n      status: 500, \r\n      headers: { 'Content-Type': 'application/json' } \r\n    });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}