{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/index.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './detectors';\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/index.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  AwsBeanstalkDetector,\n  awsBeanstalkDetector,\n} from './AwsBeanstalkDetector';\nexport {\n  AwsBeanstalkDetectorSync,\n  awsBeanstalkDetectorSync,\n} from './AwsBeanstalkDetectorSync';\nexport { awsEc2Detector } from './AwsEc2Detector';\nexport { awsEc2DetectorSync } from './AwsEc2DetectorSync';\nexport { AwsEcsDetector, awsEcsDetector } from './AwsEcsDetector';\nexport { AwsEcsDetectorSync, awsEcsDetectorSync } from './AwsEcsDetectorSync';\nexport { AwsEksDetector, awsEksDetector } from './AwsEksDetector';\nexport { AwsEksDetectorSync, awsEksDetectorSync } from './AwsEksDetectorSync';\nexport { AwsLambdaDetector, awsLambdaDetector } from './AwsLambdaDetector';\nexport {\n  AwsLambdaDetectorSync,\n  awsLambdaDetectorSync,\n} from './AwsLambdaDetectorSync';\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"file":"semconv.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/semconv.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @example arn:aws:ecs:us-west-2:123456789123:cluster/my-cluster\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\n\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @example arn:aws:ecs:us-west-1:123456789123:container/32624152-9086-4f0e-acae-1a75b14fe4d9\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\n\n/**\n * The ARN of a running [ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids).\n *\n * @example arn:aws:ecs:us-west-1:123456789123:task/10838bed-421f-43ef-870a-f43feacbbb5b\n * @example arn:aws:ecs:us-west-1:123456789123:task/my-cluster/task-id/23ebb8ac-c18f-46c6-8bbe-d55d0e37cfbd\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\n\n/**\n * The family name of the [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html) used to create the ECS task.\n *\n * @example opentelemetry-family\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\n\n/**\n * The revision for the task definition used to create the ECS task.\n *\n * @example 8\n * @example 26\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\n\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * @example [\"arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:*\"]\n *\n * @note See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\n\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * @example [\"/aws/lambda/my-function\", \"opentelemetry-service\"]\n *\n * @note Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\n\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * @example [\"arn:aws:logs:us-west-1:123456789012:log-group:/aws/my/group:log-stream:logs/main/10838bed-421f-43ef-870a-f43feacbbb5b\"]\n *\n * @note See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\n\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @example [\"logs/main/10838bed-421f-43ef-870a-f43feacbbb5b\"]\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\n\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @example 111111111111\n * @example opentelemetry\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_CLOUD_ACCOUNT_ID = 'cloud.account.id';\n\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * @example us-east-1c\n *\n * @note Availability zones are called \"zones\" on Alibaba Cloud and Google Cloud.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\n\n/**\n * The cloud platform in use.\n *\n * @note The prefix of the service **SHOULD** match the one specified in `cloud.provider`.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_CLOUD_PLATFORM = 'cloud.platform';\n\n/**\n * Name of the cloud provider.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_CLOUD_PROVIDER = 'cloud.provider';\n\n/**\n * The geographical region the resource is running.\n *\n * @example us-central1\n * @example us-east-1\n *\n * @note Refer to your provider's docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/global-infrastructure/geographies/), [Google Cloud regions](https://cloud.google.com/about/locations), or [Tencent Cloud regions](https://www.tencentcloud.com/document/product/213/6091).\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_CLOUD_REGION = 'cloud.region';\n\n/**\n * Cloud provider-specific native identifier of the monitored cloud resource (e.g. an [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) on AWS, a [fully qualified resource ID](https://learn.microsoft.com/rest/api/resources/resources/get-by-id) on Azure, a [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) on GCP)\n *\n * @example arn:aws:lambda:REGION:ACCOUNT_ID:function:my-function\n * @example //run.googleapis.com/projects/PROJECT_ID/locations/LOCATION_ID/services/SERVICE_ID\n * @example /subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>\n *\n * @note On some cloud providers, it may not be possible to determine the full ID at startup,\n * so it may be necessary to set `cloud.resource_id` as a span attribute instead.\n *\n * The exact value to use for `cloud.resource_id` depends on the cloud provider.\n * The following well-known definitions **MUST** be used if you set this attribute and they apply:\n *\n *   - **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n *     Take care not to use the \"invoked ARN\" directly but replace any\n *     [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html)\n *     with the resolved function version, as the same runtime instance may be invocable with\n *     multiple different aliases.\n *   - **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n *   - **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/rest/api/resources/resources/get-by-id) of the invoked function,\n *     *not* the function app, having the form\n *     `/subscriptions/<SUBSCRIPTION_GUID>/resourceGroups/<RG>/providers/Microsoft.Web/sites/<FUNCAPP>/functions/<FUNC>`.\n *     This means that a span attribute **MUST** be used, as an Azure function app can host multiple functions that would usually share\n *     a TracerProvider.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_CLOUD_RESOURCE_ID = 'cloud.resource_id';\n\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/containers/run/#container-identification). The UUID might be abbreviated.\n *\n * @example a3bf90e006b2\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_CONTAINER_ID = 'container.id';\n\n/**\n * Container name used by container runtime.\n *\n * @example opentelemetry-autoconf\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_CONTAINER_NAME = 'container.name';\n\n/**\n * The name of the single function that this runtime instance executes.\n *\n * @example my-function\n * @example myazurefunctionapp/some-function-name\n *\n * @note This is the name of the function as configured/deployed on the FaaS\n * platform and is usually different from the name of the callback\n * function (which may be stored in the\n * [`code.namespace`/`code.function`](/docs/general/attributes.md#source-code-attributes)\n * span attributes).\n *\n * For some cloud providers, the above definition is ambiguous. The following\n * definition of function name **MUST** be used for this attribute\n * (and consequently the span name) for the listed cloud providers/products:\n *\n *   - **Azure:**  The full name `<FUNCAPP>/<FUNC>`, i.e., function app name\n *     followed by a forward slash followed by the function name (this form\n *     can also be seen in the resource JSON for the function).\n *     This means that a span attribute **MUST** be used, as an Azure function\n *     app can host multiple functions that would usually share\n *     a TracerProvider (see also the `cloud.resource_id` attribute).\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_FAAS_NAME = 'faas.name';\n\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * @example 2021/06/28/[$LATEST]2f399eb14537447da05ab2a2e39309de\n *\n * @note * **AWS Lambda:** Use the (full) log stream name.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_FAAS_INSTANCE = 'faas.instance';\n\n/**\n * The amount of memory available to the serverless function converted to Bytes.\n *\n * @example 134217728\n *\n * @note It's recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information (which must be multiplied by 1,048,576).\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_FAAS_MAX_MEMORY = 'faas.max_memory';\n\n/**\n * The immutable version of the function being executed.\n *\n * @example 26\n * @example pinkfroid-00002\n *\n * @note Depending on the cloud provider and platform, use:\n *\n *   - **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n *     (an integer represented as a decimal string).\n *   - **Google Cloud Run (Services):** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n *     (i.e., the function name plus the revision suffix).\n *   - **Google Cloud Functions:** The value of the\n *     [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n *   - **Azure Functions:** Not applicable. Do not set this attribute.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_FAAS_VERSION = 'faas.version';\n\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the `machine-id`. See the table below for the sources to use to determine the `machine-id` based on operating system.\n *\n * @example fdbf79e8af94cb7f9e8df36789187052\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_HOST_ID = 'host.id';\n\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @example opentelemetry-test\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_HOST_NAME = 'host.name';\n\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @example n1-standard-1\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_HOST_TYPE = 'host.type';\n\n/**\n * The name of the cluster.\n *\n * @example opentelemetry-cluster\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_K8S_CLUSTER_NAME = 'k8s.cluster.name';\n\n/**\n * The string ID of the service instance.\n *\n * @example 627cc493-f310-47de-96bd-71410b7dec09\n *\n * @note **MUST** be unique for each instance of the same `service.namespace,service.name` pair (in other words\n * `service.namespace,service.name,service.instance.id` triplet **MUST** be globally unique). The ID helps to\n * distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled\n * service).\n *\n * Implementations, such as SDKs, are recommended to generate a random Version 1 or Version 4 [RFC\n * 4122](https://www.ietf.org/rfc/rfc4122.txt) UUID, but are free to use an inherent unique ID as the source of\n * this value if stability is desirable. In that case, the ID **SHOULD** be used as source of a UUID Version 5 and\n * **SHOULD** use the following UUID as the namespace: `4d63009a-8d0f-11ee-aad7-4c796ed8e320`.\n *\n * UUIDs are typically recommended, as only an opaque value for the purposes of identifying a service instance is\n * needed. Similar to what can be seen in the man page for the\n * [`/etc/machine-id`](https://www.freedesktop.org/software/systemd/man/machine-id.html) file, the underlying\n * data, such as pod name and namespace should be treated as confidential, being the user's choice to expose it\n * or not via another resource attribute.\n *\n * For applications running behind an application server (like unicorn), we do not recommend using one identifier\n * for all processes participating in the application. Instead, it's recommended each division (e.g. a worker\n * thread in unicorn) to have its own instance.id.\n *\n * It's not recommended for a Collector to set `service.instance.id` if it can't unambiguously determine the\n * service instance that is generating that telemetry. For instance, creating an UUID based on `pod.name` will\n * likely be wrong, as the Collector might not know from which container within that pod the telemetry originated.\n * However, Collectors can set the `service.instance.id` if they can unambiguously determine the service instance\n * for that telemetry. This is typically the case for scraping receivers, as they know the target address and\n * port.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_SERVICE_INSTANCE_ID = 'service.instance.id';\n\n/**\n * A namespace for `service.name`.\n *\n * @example Shop\n *\n * @note A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexport const ATTR_SERVICE_NAMESPACE = 'service.namespace';\n\n/**\n * Enum value \"aws_ec2\" for attribute {@link ATTR_CLOUD_PLATFORM}.\n */\nexport const CLOUD_PLATFORM_VALUE_AWS_EC2 = 'aws_ec2';\n\n/**\n * Enum value \"aws_ecs\" for attribute {@link ATTR_CLOUD_PLATFORM}.\n */\nexport const CLOUD_PLATFORM_VALUE_AWS_ECS = 'aws_ecs';\n\n/**\n * Enum value \"aws_eks\" for attribute {@link ATTR_CLOUD_PLATFORM}.\n */\nexport const CLOUD_PLATFORM_VALUE_AWS_EKS = 'aws_eks';\n\n/**\n * Enum value \"aws_elastic_beanstalk\" for attribute {@link ATTR_CLOUD_PLATFORM}.\n */\nexport const CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK =\n  'aws_elastic_beanstalk';\n\n/**\n * Enum value \"aws_lambda\" for attribute {@link ATTR_CLOUD_PLATFORM}.\n */\nexport const CLOUD_PLATFORM_VALUE_AWS_LAMBDA = 'aws_lambda';\n\n/**\n * Enum value \"aws\" for attribute {@link ATTR_CLOUD_PROVIDER}.\n */\nexport const CLOUD_PROVIDER_VALUE_AWS = 'aws';\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH;;;;GAIG,CAEH;;;;;;GAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACI,IAAM,wBAAwB,GAAG,qBAAqB,CAAC;AASvD,IAAM,0BAA0B,GAAG,uBAAuB,CAAC;AAO3D,IAAM,uBAAuB,GAAG,oBAAoB,CAAC;AAUrD,IAAM,qBAAqB,GAAG,kBAAkB,CAAC;AASjD,IAAM,wBAAwB,GAAG,qBAAqB,CAAC;AAUvD,IAAM,0BAA0B,GAAG,uBAAuB,CAAC;AAW3D,IAAM,uBAAuB,GAAG,oBAAoB,CAAC;AAWrD,IAAM,wBAAwB,GAAG,qBAAqB,CAAC;AAWvD,IAAM,wBAAwB,GAAG,qBAAqB,CAAC;AASvD,IAAM,yBAAyB,GAAG,sBAAsB,CAAC;AAUzD,IAAM,qBAAqB,GAAG,kBAAkB,CAAC;AAWjD,IAAM,4BAA4B,GAAG,yBAAyB,CAAC;AAS/D,IAAM,mBAAmB,GAAG,gBAAgB,CAAC;AAO7C,IAAM,mBAAmB,GAAG,gBAAgB,CAAC;AAY7C,IAAM,iBAAiB,GAAG,cAAc,CAAC;AA6BzC,IAAM,sBAAsB,GAAG,mBAAmB,CAAC;AASnD,IAAM,iBAAiB,GAAG,cAAc,CAAC;AASzC,IAAM,mBAAmB,GAAG,gBAAgB,CAAC;AA2B7C,IAAM,cAAc,GAAG,WAAW,CAAC;AAWnC,IAAM,kBAAkB,GAAG,eAAe,CAAC;AAW3C,IAAM,oBAAoB,GAAG,iBAAiB,CAAC;AAoB/C,IAAM,iBAAiB,GAAG,cAAc,CAAC;AASzC,IAAM,YAAY,GAAG,SAAS,CAAC;AAS/B,IAAM,cAAc,GAAG,WAAW,CAAC;AASnC,IAAM,cAAc,GAAG,WAAW,CAAC;AASnC,IAAM,qBAAqB,GAAG,kBAAkB,CAAC;AAoCjD,IAAM,wBAAwB,GAAG,qBAAqB,CAAC;AAWvD,IAAM,sBAAsB,GAAG,mBAAmB,CAAC;AAKnD,IAAM,4BAA4B,GAAG,SAAS,CAAC;AAK/C,IAAM,4BAA4B,GAAG,SAAS,CAAC;AAK/C,IAAM,4BAA4B,GAAG,SAAS,CAAC;AAK/C,IAAM,0CAA0C,GACrD,uBAAuB,CAAC;AAKnB,IAAM,+BAA+B,GAAG,YAAY,CAAC;AAKrD,IAAM,wBAAwB,GAAG,KAAK,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"file":"AwsBeanstalkDetectorSync.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsBeanstalkDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\n\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  ATTR_CLOUD_PROVIDER,\n  ATTR_CLOUD_PLATFORM,\n  ATTR_SERVICE_NAMESPACE,\n  ATTR_SERVICE_INSTANCE_ID,\n  CLOUD_PROVIDER_VALUE_AWS,\n  CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK,\n} from '../semconv';\nimport * as fs from 'fs';\nimport * as util from 'util';\n\n/**\n * The AwsBeanstalkDetector can be used to detect if a process is running in AWS Elastic\n * Beanstalk and return a {@link Resource} populated with data about the beanstalk\n * plugins of AWS X-Ray. Returns an empty Resource if detection fails.\n *\n * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf\n * for more details about detecting information of Elastic Beanstalk plugins\n */\n\nconst DEFAULT_BEANSTALK_CONF_PATH =\n  '/var/elasticbeanstalk/xray/environment.conf';\nconst WIN_OS_BEANSTALK_CONF_PATH =\n  'C:\\\\Program Files\\\\Amazon\\\\XRay\\\\environment.conf';\n\nexport class AwsBeanstalkDetectorSync implements DetectorSync {\n  BEANSTALK_CONF_PATH: string;\n  private static readFileAsync = util.promisify(fs.readFile);\n  private static fileAccessAsync = util.promisify(fs.access);\n\n  constructor() {\n    if (process.platform === 'win32') {\n      this.BEANSTALK_CONF_PATH = WIN_OS_BEANSTALK_CONF_PATH;\n    } else {\n      this.BEANSTALK_CONF_PATH = DEFAULT_BEANSTALK_CONF_PATH;\n    }\n  }\n\n  detect(config?: ResourceDetectionConfig): IResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this._getAttributes()\n    );\n    return new Resource({}, attributes);\n  }\n\n  /**\n   * Attempts to obtain AWS Beanstalk configuration from the file\n   * system. If file is accesible and read succesfully it returns\n   * a promise containing a {@link ResourceAttributes}\n   * object with instance metadata. Returns a promise containing an\n   * empty {@link ResourceAttributes} if the file is not accesible or\n   * fails in the reading process.\n   */\n  async _getAttributes(\n    _config?: ResourceDetectionConfig\n  ): Promise<ResourceAttributes> {\n    try {\n      await AwsBeanstalkDetectorSync.fileAccessAsync(\n        this.BEANSTALK_CONF_PATH,\n        fs.constants.R_OK\n      );\n\n      const rawData = await AwsBeanstalkDetectorSync.readFileAsync(\n        this.BEANSTALK_CONF_PATH,\n        'utf8'\n      );\n      const parsedData = JSON.parse(rawData);\n\n      return {\n        [ATTR_CLOUD_PROVIDER]: CLOUD_PROVIDER_VALUE_AWS,\n        [ATTR_CLOUD_PLATFORM]: CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK,\n        [ATTR_SERVICE_NAME]: CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK,\n        [ATTR_SERVICE_NAMESPACE]: parsedData.environment_name,\n        [ATTR_SERVICE_VERSION]: parsedData.version_label,\n        [ATTR_SERVICE_INSTANCE_ID]: parsedData.deployment_id,\n      };\n    } catch (e: any) {\n      diag.debug(`AwsBeanstalkDetectorSync failed: ${e.message}`);\n      return {};\n    }\n  }\n}\n\nexport const awsBeanstalkDetectorSync = new AwsBeanstalkDetectorSync();\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"file":"AwsBeanstalkDetector.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsBeanstalkDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Detector,\n  IResource,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\n\nimport { awsBeanstalkDetectorSync } from './AwsBeanstalkDetectorSync';\n\n/**\n * The AwsBeanstalkDetector can be used to detect if a process is running in AWS Elastic\n * Beanstalk and return a {@link Resource} populated with data about the beanstalk\n * plugins of AWS X-Ray. Returns an empty Resource if detection fails.\n *\n * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf\n * for more details about detecting information of Elastic Beanstalk plugins\n *\n * @deprecated Use {@link AwsBeanstalkDetectorSync} class instead.\n */\n\nexport class AwsBeanstalkDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(awsBeanstalkDetectorSync.detect(config));\n  }\n}\n\nexport const awsBeanstalkDetector = new AwsBeanstalkDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAQH,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;;AAEtE;;;;;;;;;GASG,CAEH,IAAA,uBAAA;IAAA,SAAA,wBAIA,CAAC;IAHC,qBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,MAAgC;QACrC,OAAO,OAAO,CAAC,OAAO,2NAAC,2BAAwB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,CAAC;IACH,OAAA,oBAAC;AAAD,CAAC,AAJD,IAIC;;AAEM,IAAM,oBAAoB,GAAG,IAAI,oBAAoB,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"file":"AwsEc2DetectorSync.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsEc2DetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_CLOUD_PROVIDER,\n  ATTR_CLOUD_PLATFORM,\n  ATTR_CLOUD_REGION,\n  ATTR_CLOUD_ACCOUNT_ID,\n  ATTR_CLOUD_AVAILABILITY_ZONE,\n  ATTR_HOST_ID,\n  ATTR_HOST_TYPE,\n  ATTR_HOST_NAME,\n  CLOUD_PROVIDER_VALUE_AWS,\n  CLOUD_PLATFORM_VALUE_AWS_EC2,\n} from '../semconv';\nimport * as http from 'http';\n\n/**\n * The AwsEc2DetectorSync can be used to detect if a process is running in AWS EC2\n * and return a {@link Resource} populated with metadata about the EC2\n * instance. Returns an empty Resource if detection fails.\n */\nclass AwsEc2DetectorSync implements DetectorSync {\n  /**\n   * See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html\n   * for documentation about the AWS instance identity document\n   * and standard of IMDSv2.\n   */\n  readonly AWS_IDMS_ENDPOINT = '169.254.169.254';\n  readonly AWS_INSTANCE_TOKEN_DOCUMENT_PATH = '/latest/api/token';\n  readonly AWS_INSTANCE_IDENTITY_DOCUMENT_PATH =\n    '/latest/dynamic/instance-identity/document';\n  readonly AWS_INSTANCE_HOST_DOCUMENT_PATH = '/latest/meta-data/hostname';\n  readonly AWS_METADATA_TTL_HEADER = 'X-aws-ec2-metadata-token-ttl-seconds';\n  readonly AWS_METADATA_TOKEN_HEADER = 'X-aws-ec2-metadata-token';\n  readonly MILLISECOND_TIME_OUT = 5000;\n\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this._getAttributes()\n    );\n    return new Resource({}, attributes);\n  }\n\n  /**\n   * Attempts to connect and obtain an AWS instance Identity document. If the\n   * connection is successful it returns a promise containing a {@link ResourceAttributes}\n   * object with instance metadata. Returns a promise containing an\n   * empty {@link ResourceAttributes} if the connection or parsing of the identity\n   * document fails.\n   */\n  async _getAttributes(): Promise<ResourceAttributes> {\n    try {\n      const token = await this._fetchToken();\n      const { accountId, instanceId, instanceType, region, availabilityZone } =\n        await this._fetchIdentity(token);\n      const hostname = await this._fetchHost(token);\n\n      return {\n        [ATTR_CLOUD_PROVIDER]: CLOUD_PROVIDER_VALUE_AWS,\n        [ATTR_CLOUD_PLATFORM]: CLOUD_PLATFORM_VALUE_AWS_EC2,\n        [ATTR_CLOUD_ACCOUNT_ID]: accountId,\n        [ATTR_CLOUD_REGION]: region,\n        [ATTR_CLOUD_AVAILABILITY_ZONE]: availabilityZone,\n        [ATTR_HOST_ID]: instanceId,\n        [ATTR_HOST_TYPE]: instanceType,\n        [ATTR_HOST_NAME]: hostname,\n      };\n    } catch {\n      return {};\n    }\n  }\n\n  private async _fetchToken(): Promise<string> {\n    const options = {\n      host: this.AWS_IDMS_ENDPOINT,\n      path: this.AWS_INSTANCE_TOKEN_DOCUMENT_PATH,\n      method: 'PUT',\n      timeout: this.MILLISECOND_TIME_OUT,\n      headers: {\n        [this.AWS_METADATA_TTL_HEADER]: '60',\n      },\n    };\n    return await this._fetchString(options);\n  }\n\n  private async _fetchIdentity(token: string): Promise<any> {\n    const options = {\n      host: this.AWS_IDMS_ENDPOINT,\n      path: this.AWS_INSTANCE_IDENTITY_DOCUMENT_PATH,\n      method: 'GET',\n      timeout: this.MILLISECOND_TIME_OUT,\n      headers: {\n        [this.AWS_METADATA_TOKEN_HEADER]: token,\n      },\n    };\n    const identity = await this._fetchString(options);\n    return JSON.parse(identity);\n  }\n\n  private async _fetchHost(token: string): Promise<string> {\n    const options = {\n      host: this.AWS_IDMS_ENDPOINT,\n      path: this.AWS_INSTANCE_HOST_DOCUMENT_PATH,\n      method: 'GET',\n      timeout: this.MILLISECOND_TIME_OUT,\n      headers: {\n        [this.AWS_METADATA_TOKEN_HEADER]: token,\n      },\n    };\n    return await this._fetchString(options);\n  }\n\n  /**\n   * Establishes an HTTP connection to AWS instance document url.\n   * If the application is running on an EC2 instance, we should be able\n   * to get back a valid JSON document. Parses that document and stores\n   * the identity properties in a local map.\n   */\n  private async _fetchString(options: http.RequestOptions): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        req.abort();\n        reject(new Error('EC2 metadata api request timed out.'));\n      }, this.MILLISECOND_TIME_OUT);\n\n      const req = http.request(options, res => {\n        clearTimeout(timeoutId);\n        const { statusCode } = res;\n        res.setEncoding('utf8');\n        let rawData = '';\n        res.on('data', chunk => (rawData += chunk));\n        res.on('end', () => {\n          if (statusCode && statusCode >= 200 && statusCode < 300) {\n            try {\n              resolve(rawData);\n            } catch (e) {\n              reject(e);\n            }\n          } else {\n            reject(\n              new Error('Failed to load page, status code: ' + statusCode)\n            );\n          }\n        });\n      });\n      req.on('error', err => {\n        clearTimeout(timeoutId);\n        reject(err);\n      });\n      req.end();\n    });\n  }\n}\n\nexport const awsEc2DetectorSync = new AwsEc2DetectorSync();\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 832, "column": 0}, "map": {"version":3,"file":"AwsEc2Detector.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsEc2Detector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Detector,\n  IResource,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\n\nimport { awsEc2DetectorSync } from './AwsEc2DetectorSync';\n\n/**\n * The AwsEc2Detector can be used to detect if a process is running in AWS EC2\n * and return a {@link Resource} populated with metadata about the EC2\n * instance.\n *\n * @deprecated Use {@link AwsEc2DetectorSync} class instead.\n */\nclass AwsEc2Detector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(awsEc2DetectorSync.detect(_config));\n  }\n}\n\nexport const awsEc2Detector = new AwsEc2Detector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAQH,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;;AAE1D;;;;;;GAMG,CACH,IAAA,iBAAA;IAAA,SAAA,kBAIA,CAAC;IAHC,eAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;QACtC,OAAO,OAAO,CAAC,OAAO,qNAAC,qBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7D,CAAC;IACH,OAAA,cAAC;AAAD,CAAC,AAJD,IAIC;AAEM,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 871, "column": 0}, "map": {"version":3,"file":"AwsEcsDetectorSync.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsEcsDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_AWS_ECS_CLUSTER_ARN,\n  ATTR_AWS_ECS_CONTAINER_ARN,\n  ATTR_AWS_ECS_LAUNCHTYPE,\n  ATTR_AWS_ECS_TASK_ARN,\n  ATTR_AWS_ECS_TASK_FAMILY,\n  ATTR_AWS_ECS_TASK_REVISION,\n  ATTR_AWS_LOG_GROUP_ARNS,\n  ATTR_AWS_LOG_GROUP_NAMES,\n  ATTR_AWS_LOG_STREAM_ARNS,\n  ATTR_AWS_LOG_STREAM_NAMES,\n  ATTR_CLOUD_ACCOUNT_ID,\n  ATTR_CLOUD_AVAILABILITY_ZONE,\n  ATTR_CLOUD_PLATFORM,\n  ATTR_CLOUD_PROVIDER,\n  ATTR_CLOUD_REGION,\n  ATTR_CLOUD_RESOURCE_ID,\n  ATTR_CONTAINER_ID,\n  ATTR_CONTAINER_NAME,\n  CLOUD_PROVIDER_VALUE_AWS,\n  CLOUD_PLATFORM_VALUE_AWS_ECS,\n} from '../semconv';\nimport * as http from 'http';\nimport * as util from 'util';\nimport * as fs from 'fs';\nimport * as os from 'os';\n\nconst HTTP_TIMEOUT_IN_MS = 1000;\n\ninterface AwsLogOptions {\n  readonly 'awslogs-region'?: string;\n  readonly 'awslogs-group'?: string;\n  readonly 'awslogs-stream'?: string;\n}\n\n/**\n * The AwsEcsDetector can be used to detect if a process is running in AWS\n * ECS and return a {@link Resource} populated with data about the ECS\n * plugins of AWS X-Ray. Returns an empty Resource if detection fails.\n */\nexport class AwsEcsDetectorSync implements DetectorSync {\n  static readonly CONTAINER_ID_LENGTH = 64;\n  static readonly DEFAULT_CGROUP_PATH = '/proc/self/cgroup';\n\n  private static readFileAsync = util.promisify(fs.readFile);\n\n  detect(): IResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this._getAttributes()\n    );\n    return new Resource({}, attributes);\n  }\n\n  private async _getAttributes(): Promise<ResourceAttributes> {\n    if (\n      !process.env.ECS_CONTAINER_METADATA_URI_V4 &&\n      !process.env.ECS_CONTAINER_METADATA_URI\n    ) {\n      diag.debug('AwsEcsDetector failed: Process is not on ECS');\n      return {};\n    }\n\n    try {\n      let resource = new Resource({\n        [ATTR_CLOUD_PROVIDER]: CLOUD_PROVIDER_VALUE_AWS,\n        [ATTR_CLOUD_PLATFORM]: CLOUD_PLATFORM_VALUE_AWS_ECS,\n      }).merge(await AwsEcsDetectorSync._getContainerIdAndHostnameResource());\n\n      const metadataUrl = process.env.ECS_CONTAINER_METADATA_URI_V4;\n      if (metadataUrl) {\n        const [containerMetadata, taskMetadata] = await Promise.all([\n          AwsEcsDetectorSync._getUrlAsJson(metadataUrl),\n          AwsEcsDetectorSync._getUrlAsJson(`${metadataUrl}/task`),\n        ]);\n\n        const metadatav4Resource =\n          await AwsEcsDetectorSync._getMetadataV4Resource(\n            containerMetadata,\n            taskMetadata\n          );\n        const logsResource = await AwsEcsDetectorSync._getLogResource(\n          containerMetadata\n        );\n\n        resource = resource.merge(metadatav4Resource).merge(logsResource);\n      }\n\n      return resource.attributes;\n    } catch {\n      return {};\n    }\n  }\n\n  /**\n   * Read container ID from cgroup file\n   * In ECS, even if we fail to find target file\n   * or target file does not contain container ID\n   * we do not throw an error but throw warning message\n   * and then return null string\n   */\n  private static async _getContainerIdAndHostnameResource(): Promise<Resource> {\n    const hostName = os.hostname();\n\n    let containerId = '';\n    try {\n      const rawData = await AwsEcsDetectorSync.readFileAsync(\n        AwsEcsDetectorSync.DEFAULT_CGROUP_PATH,\n        'utf8'\n      );\n      const splitData = rawData.trim().split('\\n');\n      for (const str of splitData) {\n        if (str.length > AwsEcsDetectorSync.CONTAINER_ID_LENGTH) {\n          containerId = str.substring(\n            str.length - AwsEcsDetectorSync.CONTAINER_ID_LENGTH\n          );\n          break;\n        }\n      }\n    } catch (e) {\n      diag.debug('AwsEcsDetector failed to read container ID', e);\n    }\n\n    if (hostName || containerId) {\n      return new Resource({\n        [ATTR_CONTAINER_NAME]: hostName || '',\n        [ATTR_CONTAINER_ID]: containerId || '',\n      });\n    }\n\n    return Resource.empty();\n  }\n\n  private static async _getMetadataV4Resource(\n    containerMetadata: any,\n    taskMetadata: any\n  ): Promise<Resource> {\n    const launchType: string = taskMetadata['LaunchType'];\n    const taskArn: string = taskMetadata['TaskARN'];\n\n    const baseArn: string = taskArn.substring(0, taskArn.lastIndexOf(':'));\n    const cluster: string = taskMetadata['Cluster'];\n\n    const accountId: string = AwsEcsDetectorSync._getAccountFromArn(taskArn);\n    const region: string = AwsEcsDetectorSync._getRegionFromArn(taskArn);\n    const availabilityZone: string | undefined = taskMetadata?.AvailabilityZone;\n\n    const clusterArn = cluster.startsWith('arn:')\n      ? cluster\n      : `${baseArn}:cluster/${cluster}`;\n\n    const containerArn: string = containerMetadata['ContainerARN'];\n\n    // https://github.com/open-telemetry/semantic-conventions/blob/main/semantic_conventions/resource/cloud_provider/aws/ecs.yaml\n    const attributes: ResourceAttributes = {\n      [ATTR_AWS_ECS_CONTAINER_ARN]: containerArn,\n      [ATTR_AWS_ECS_CLUSTER_ARN]: clusterArn,\n      [ATTR_AWS_ECS_LAUNCHTYPE]: launchType?.toLowerCase(),\n      [ATTR_AWS_ECS_TASK_ARN]: taskArn,\n      [ATTR_AWS_ECS_TASK_FAMILY]: taskMetadata['Family'],\n      [ATTR_AWS_ECS_TASK_REVISION]: taskMetadata['Revision'],\n\n      [ATTR_CLOUD_ACCOUNT_ID]: accountId,\n      [ATTR_CLOUD_REGION]: region,\n      [ATTR_CLOUD_RESOURCE_ID]: containerArn,\n    };\n\n    // The availability zone is not available in all Fargate runtimes\n    if (availabilityZone) {\n      attributes[ATTR_CLOUD_AVAILABILITY_ZONE] = availabilityZone;\n    }\n\n    return new Resource(attributes);\n  }\n\n  private static async _getLogResource(\n    containerMetadata: any\n  ): Promise<Resource> {\n    if (\n      containerMetadata['LogDriver'] !== 'awslogs' ||\n      !containerMetadata['LogOptions']\n    ) {\n      return Resource.EMPTY;\n    }\n\n    const containerArn = containerMetadata['ContainerARN']!;\n    const logOptions = containerMetadata['LogOptions'] as AwsLogOptions;\n\n    const logsRegion =\n      logOptions['awslogs-region'] ||\n      AwsEcsDetectorSync._getRegionFromArn(containerArn);\n\n    const awsAccount = AwsEcsDetectorSync._getAccountFromArn(containerArn);\n\n    const logsGroupName = logOptions['awslogs-group']!;\n    const logsGroupArn = `arn:aws:logs:${logsRegion}:${awsAccount}:log-group:${logsGroupName}`;\n    const logsStreamName = logOptions['awslogs-stream']!;\n    const logsStreamArn = `arn:aws:logs:${logsRegion}:${awsAccount}:log-group:${logsGroupName}:log-stream:${logsStreamName}`;\n\n    return new Resource({\n      [ATTR_AWS_LOG_GROUP_NAMES]: [logsGroupName],\n      [ATTR_AWS_LOG_GROUP_ARNS]: [logsGroupArn],\n      [ATTR_AWS_LOG_STREAM_NAMES]: [logsStreamName],\n      [ATTR_AWS_LOG_STREAM_ARNS]: [logsStreamArn],\n    });\n  }\n\n  private static _getAccountFromArn(containerArn: string): string {\n    const match = /arn:aws:ecs:[^:]+:([^:]+):.*/.exec(containerArn);\n    return match![1];\n  }\n\n  private static _getRegionFromArn(containerArn: string): string {\n    const match = /arn:aws:ecs:([^:]+):.*/.exec(containerArn);\n    return match![1];\n  }\n\n  private static _getUrlAsJson(url: string): Promise<any> {\n    return new Promise<string>((resolve, reject) => {\n      const request = http.get(url, (response: http.IncomingMessage) => {\n        if (response.statusCode && response.statusCode >= 400) {\n          reject(\n            new Error(\n              `Request to '${url}' failed with status ${response.statusCode}`\n            )\n          );\n        }\n        /*\n         * Concatenate the response out of chunks:\n         * https://nodejs.org/api/stream.html#stream_event_data\n         */\n        let responseBody = '';\n        response.on(\n          'data',\n          (chunk: Buffer) => (responseBody += chunk.toString())\n        );\n        // All the data has been read, resolve the Promise\n        response.on('end', () => resolve(responseBody));\n        /*\n         * https://nodejs.org/api/http.html#httprequesturl-options-callback, see the\n         * 'In the case of a premature connection close after the response is received'\n         * case\n         */\n        request.on('error', reject);\n      });\n\n      // Set an aggressive timeout to prevent lock-ups\n      request.setTimeout(HTTP_TIMEOUT_IN_MS, () => {\n        request.destroy();\n      });\n      // Connection error, disconnection, etc.\n      request.on('error', reject);\n      request.end();\n    }).then(responseBodyRaw => JSON.parse(responseBodyRaw));\n  }\n}\n\nexport const awsEcsDetectorSync = new AwsEcsDetectorSync();\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1298, "column": 0}, "map": {"version":3,"file":"AwsEcsDetector.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsEcsDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector, IResource } from '@opentelemetry/resources';\nimport { awsEcsDetectorSync } from './AwsEcsDetectorSync';\n\n/**\n * The AwsEcsDetector can be used to detect if a process is running in AWS\n * ECS and return a {@link Resource} populated with data about the ECS\n * plugins of AWS X-Ray.\n *\n * @deprecated Use {@link AwsEcsDetectorSync} class instead.\n */\nexport class AwsEcsDetector implements Detector {\n  detect(): Promise<IResource> {\n    return Promise.resolve(awsEcsDetectorSync.detect());\n  }\n}\n\nexport const awsEcsDetector = new AwsEcsDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAGH,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;;AAE1D;;;;;;GAMG,CACH,IAAA,iBAAA;IAAA,SAAA,kBAIA,CAAC;IAHC,eAAA,SAAA,CAAA,MAAM,GAAN;QACE,OAAO,OAAO,CAAC,OAAO,qNAAC,qBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC;IACtD,CAAC;IACH,OAAA,cAAC;AAAD,CAAC,AAJD,IAIC;;AAEM,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1339, "column": 0}, "map": {"version":3,"file":"AwsEksDetectorSync.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsEksDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_CLOUD_PROVIDER,\n  ATTR_CLOUD_PLATFORM,\n  ATTR_K8S_CLUSTER_NAME,\n  ATTR_CONTAINER_ID,\n  CLOUD_PROVIDER_VALUE_AWS,\n  CLOUD_PLATFORM_VALUE_AWS_EKS,\n} from '../semconv';\nimport * as https from 'https';\nimport * as fs from 'fs';\nimport * as util from 'util';\nimport { diag } from '@opentelemetry/api';\n\n/**\n * The AwsEksDetectorSync can be used to detect if a process is running in AWS Elastic\n * Kubernetes and return a {@link Resource} populated with data about the Kubernetes\n * plugins of AWS X-Ray. Returns an empty Resource if detection fails.\n *\n * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf\n * for more details about detecting information for Elastic Kubernetes plugins\n */\n\nexport class AwsEksDetectorSync implements DetectorSync {\n  readonly K8S_SVC_URL = 'kubernetes.default.svc';\n  readonly K8S_TOKEN_PATH =\n    '/var/run/secrets/kubernetes.io/serviceaccount/token';\n  readonly K8S_CERT_PATH =\n    '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt';\n  readonly AUTH_CONFIGMAP_PATH =\n    '/api/v1/namespaces/kube-system/configmaps/aws-auth';\n  readonly CW_CONFIGMAP_PATH =\n    '/api/v1/namespaces/amazon-cloudwatch/configmaps/cluster-info';\n  readonly CONTAINER_ID_LENGTH = 64;\n  readonly DEFAULT_CGROUP_PATH = '/proc/self/cgroup';\n  readonly TIMEOUT_MS = 2000;\n  readonly UTF8_UNICODE = 'utf8';\n\n  private static readFileAsync = util.promisify(fs.readFile);\n  private static fileAccessAsync = util.promisify(fs.access);\n\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this._getAttributes()\n    );\n    return new Resource({}, attributes);\n  }\n\n  /**\n   * The AwsEksDetector can be used to detect if a process is running on Amazon\n   * Elastic Kubernetes and returns a promise containing a {@link ResourceAttributes}\n   * object with instance metadata. Returns a promise containing an\n   * empty {@link ResourceAttributes} if the connection to kubernetes process\n   * or aws config maps fails\n   */\n  private async _getAttributes(): Promise<ResourceAttributes> {\n    try {\n      await AwsEksDetectorSync.fileAccessAsync(this.K8S_TOKEN_PATH);\n      const k8scert = await AwsEksDetectorSync.readFileAsync(\n        this.K8S_CERT_PATH\n      );\n\n      if (!(await this._isEks(k8scert))) {\n        return {};\n      }\n\n      const containerId = await this._getContainerId();\n      const clusterName = await this._getClusterName(k8scert);\n\n      return !containerId && !clusterName\n        ? {}\n        : {\n            [ATTR_CLOUD_PROVIDER]: CLOUD_PROVIDER_VALUE_AWS,\n            [ATTR_CLOUD_PLATFORM]: CLOUD_PLATFORM_VALUE_AWS_EKS,\n            [ATTR_K8S_CLUSTER_NAME]: clusterName || '',\n            [ATTR_CONTAINER_ID]: containerId || '',\n          };\n    } catch (e) {\n      diag.debug('Process is not running on K8S', e);\n      return {};\n    }\n  }\n\n  /**\n   * Attempts to make a connection to AWS Config map which will\n   * determine whether the process is running on an EKS\n   * process if the config map is empty or not\n   */\n  private async _isEks(cert: Buffer): Promise<boolean> {\n    const options = {\n      ca: cert,\n      headers: {\n        Authorization: await this._getK8sCredHeader(),\n      },\n      hostname: this.K8S_SVC_URL,\n      method: 'GET',\n      path: this.AUTH_CONFIGMAP_PATH,\n      timeout: this.TIMEOUT_MS,\n    };\n    return !!(await this._fetchString(options));\n  }\n\n  /**\n   * Attempts to make a connection to Amazon Cloudwatch\n   * Config Maps to grab cluster name\n   */\n  private async _getClusterName(cert: Buffer): Promise<string | undefined> {\n    const options = {\n      ca: cert,\n      headers: {\n        Authorization: await this._getK8sCredHeader(),\n      },\n      host: this.K8S_SVC_URL,\n      method: 'GET',\n      path: this.CW_CONFIGMAP_PATH,\n      timeout: this.TIMEOUT_MS,\n    };\n    const response = await this._fetchString(options);\n    try {\n      return JSON.parse(response).data['cluster.name'];\n    } catch (e) {\n      diag.debug('Cannot get cluster name on EKS', e);\n    }\n    return '';\n  }\n  /**\n   * Reads the Kubernetes token path and returns kubernetes\n   * credential header\n   */\n  private async _getK8sCredHeader(): Promise<string> {\n    try {\n      const content = await AwsEksDetectorSync.readFileAsync(\n        this.K8S_TOKEN_PATH,\n        this.UTF8_UNICODE\n      );\n      return 'Bearer ' + content;\n    } catch (e) {\n      diag.debug('Unable to read Kubernetes client token.', e);\n    }\n    return '';\n  }\n\n  /**\n   * Read container ID from cgroup file generated from docker which lists the full\n   * untruncated docker container ID at the end of each line.\n   *\n   * The predefined structure of calling /proc/self/cgroup when in a docker container has the structure:\n   *\n   * #:xxxxxx:/\n   *\n   * or\n   *\n   * #:xxxxxx:/docker/64characterID\n   *\n   * This function takes advantage of that fact by just reading the 64-character ID from the end of the\n   * first line. In EKS, even if we fail to find target file or target file does\n   * not contain container ID we do not throw an error but throw warning message\n   * and then return null string\n   */\n  private async _getContainerId(): Promise<string | undefined> {\n    try {\n      const rawData = await AwsEksDetectorSync.readFileAsync(\n        this.DEFAULT_CGROUP_PATH,\n        this.UTF8_UNICODE\n      );\n      const splitData = rawData.trim().split('\\n');\n      for (const str of splitData) {\n        if (str.length > this.CONTAINER_ID_LENGTH) {\n          return str.substring(str.length - this.CONTAINER_ID_LENGTH);\n        }\n      }\n    } catch (e: any) {\n      diag.debug(`AwsEksDetector failed to read container ID: ${e.message}`);\n    }\n    return undefined;\n  }\n\n  /**\n   * Establishes an HTTP connection to AWS instance document url.\n   * If the application is running on an EKS instance, we should be able\n   * to get back a valid JSON document. Parses that document and stores\n   * the identity properties in a local map.\n   */\n  private async _fetchString(options: https.RequestOptions): Promise<string> {\n    return await new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        req.abort();\n        reject(new Error('EKS metadata api request timed out.'));\n      }, 2000);\n\n      const req = https.request(options, res => {\n        clearTimeout(timeoutId);\n        const { statusCode } = res;\n        res.setEncoding(this.UTF8_UNICODE);\n        let rawData = '';\n        res.on('data', chunk => (rawData += chunk));\n        res.on('end', () => {\n          if (statusCode && statusCode >= 200 && statusCode < 300) {\n            try {\n              resolve(rawData);\n            } catch (e) {\n              reject(e);\n            }\n          } else {\n            reject(\n              new Error('Failed to load page, status code: ' + statusCode)\n            );\n          }\n        });\n      });\n      req.on('error', err => {\n        clearTimeout(timeoutId);\n        reject(err);\n      });\n      req.end();\n    });\n  }\n}\n\nexport const awsEksDetectorSync = new AwsEksDetectorSync();\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1841, "column": 0}, "map": {"version":3,"file":"AwsEksDetector.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsEksDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Detector,\n  IResource,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\n\nimport { awsEksDetectorSync } from './AwsEksDetectorSync';\n\n/**\n * The AwsEksDetector can be used to detect if a process is running in AWS Elastic\n * Kubernetes and return a {@link Resource} populated with data about the Kubernetes\n * plugins of AWS X-Ray. Returns an empty Resource if detection fails.\n *\n * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf\n * for more details about detecting information for Elastic Kubernetes plugins\n *\n * @deprecated Use the new {@link AwsEksDetectorSync} class instead.\n */\nexport class AwsEksDetector implements Detector {\n  // NOTE: these readonly props are kept for testing purposes\n  readonly K8S_SVC_URL = 'kubernetes.default.svc';\n  readonly AUTH_CONFIGMAP_PATH =\n    '/api/v1/namespaces/kube-system/configmaps/aws-auth';\n  readonly CW_CONFIGMAP_PATH =\n    '/api/v1/namespaces/amazon-cloudwatch/configmaps/cluster-info';\n  readonly TIMEOUT_MS = 2000;\n\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(awsEksDetectorSync.detect());\n  }\n}\n\nexport const awsEksDetector = new AwsEksDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAQH,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;;AAE1D;;;;;;;;;GASG,CACH,IAAA,iBAAA;IAAA,SAAA;QACE,2DAA2D;QAClD,IAAA,CAAA,WAAW,GAAG,wBAAwB,CAAC;QACvC,IAAA,CAAA,mBAAmB,GAC1B,oDAAoD,CAAC;QAC9C,IAAA,CAAA,iBAAiB,GACxB,8DAA8D,CAAC;QACxD,IAAA,CAAA,UAAU,GAAG,IAAI,CAAC;IAK7B,CAAC;IAHC,eAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;QACtC,OAAO,OAAO,CAAC,OAAO,qNAAC,qBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC;IACtD,CAAC;IACH,OAAA,cAAC;AAAD,CAAC,AAZD,IAYC;;AAEM,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1891, "column": 0}, "map": {"version":3,"file":"AwsLambdaDetectorSync.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsLambdaDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_AWS_LOG_GROUP_NAMES,\n  ATTR_CLOUD_PLATFORM,\n  ATTR_CLOUD_PROVIDER,\n  ATTR_CLOUD_REGION,\n  ATTR_FAAS_INSTANCE,\n  ATTR_FAAS_NAME,\n  ATTR_FAAS_MAX_MEMORY,\n  ATTR_FAAS_VERSION,\n  CLOUD_PROVIDER_VALUE_AWS,\n  CLOUD_PLATFORM_VALUE_AWS_LAMBDA,\n} from '../semconv';\n\n/**\n * The AwsLambdaDetector can be used to detect if a process is running in AWS Lambda\n * and return a {@link Resource} populated with data about the environment.\n * Returns an empty Resource if detection fails.\n */\nexport class AwsLambdaDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    // Check if running inside AWS Lambda environment\n    const executionEnv = process.env.AWS_EXECUTION_ENV;\n    if (!executionEnv?.startsWith('AWS_Lambda_')) {\n      return Resource.empty();\n    }\n\n    // These environment variables are guaranteed to be present in Lambda environment\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime\n    const region = process.env.AWS_REGION;\n    const functionName = process.env.AWS_LAMBDA_FUNCTION_NAME;\n    const functionVersion = process.env.AWS_LAMBDA_FUNCTION_VERSION;\n    const memorySize = process.env.AWS_LAMBDA_FUNCTION_MEMORY_SIZE;\n\n    // These environment variables are not available in Lambda SnapStart functions\n    const logGroupName = process.env.AWS_LAMBDA_LOG_GROUP_NAME;\n    const logStreamName = process.env.AWS_LAMBDA_LOG_STREAM_NAME;\n\n    const attributes: ResourceAttributes = {\n      [ATTR_CLOUD_PROVIDER]: CLOUD_PROVIDER_VALUE_AWS,\n      [ATTR_CLOUD_PLATFORM]: CLOUD_PLATFORM_VALUE_AWS_LAMBDA,\n      [ATTR_CLOUD_REGION]: region,\n      [ATTR_FAAS_NAME]: functionName,\n      [ATTR_FAAS_VERSION]: functionVersion,\n      [ATTR_FAAS_MAX_MEMORY]: parseInt(memorySize!) * 1024 * 1024,\n    };\n\n    if (logGroupName) {\n      attributes[ATTR_AWS_LOG_GROUP_NAMES] = [logGroupName];\n    }\n    if (logStreamName) {\n      attributes[ATTR_FAAS_INSTANCE] = logStreamName;\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const awsLambdaDetectorSync = new AwsLambdaDetectorSync();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAEH,OAAO,EAGL,QAAQ,GAGT,MAAM,0BAA0B,CAAC;AAClC,OAAO,EACL,wBAAwB,EACxB,mBAAmB,EACnB,mBAAmB,EACnB,iBAAiB,EACjB,kBAAkB,EAClB,cAAc,EACd,oBAAoB,EACpB,iBAAiB,EACjB,wBAAwB,EACxB,+BAA+B,GAChC,MAAM,YAAY,CAAC;;;AAEpB;;;;GAIG,CACH,IAAA,wBAAA;IAAA,SAAA,yBAqCA,CAAC;IApCC,sBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;;QACtC,iDAAiD;QACjD,IAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;QACnD,IAAI,CAAC,CAAA,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAA,KAAA,IAAZ,YAAY,CAAE,UAAU,CAAC,aAAa,CAAC,CAAA,EAAE;YAC5C,kLAAO,WAAQ,CAAC,KAAK,EAAE,CAAC;SACzB;QAED,iFAAiF;QACjF,wGAAwG;QACxG,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;QACtC,IAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC;QAC1D,IAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC;QAChE,IAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC;QAE/D,8EAA8E;QAC9E,IAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;QAC3D,IAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC;QAE7D,IAAM,UAAU,GAAA,CAAA,KAAA,CAAA,GACd,EAAA,6LAAC,sBAAmB,CAAA,+LAAG,2BAAwB,EAC/C,EAAA,6LAAC,sBAAmB,CAAA,+LAAG,kCAA+B,EACtD,EAAA,6LAAC,oBAAiB,CAAA,GAAG,MAAM,EAC3B,EAAA,6LAAC,iBAAc,CAAA,GAAG,YAAY,EAC9B,EAAA,6LAAC,oBAAiB,CAAA,GAAG,eAAe,EACpC,EAAA,6LAAC,uBAAoB,CAAA,GAAG,QAAQ,CAAC,UAAW,CAAC,GAAG,IAAI,GAAG,IAAI,KAC5D,CAAC;QAEF,IAAI,YAAY,EAAE;YAChB,UAAU,6LAAC,2BAAwB,CAAC,GAAG;gBAAC,YAAY;aAAC,CAAC;SACvD;QACD,IAAI,aAAa,EAAE;YACjB,UAAU,6LAAC,qBAAkB,CAAC,GAAG,aAAa,CAAC;SAChD;QAED,OAAO,+KAAI,WAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IACH,OAAA,qBAAC;AAAD,CAAC,AArCD,IAqCC;;AAEM,IAAM,qBAAqB,GAAG,IAAI,qBAAqB,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1956, "column": 0}, "map": {"version":3,"file":"AwsLambdaDetector.js","sourceRoot":"","sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/node_modules/%40opentelemetry/resource-detector-aws/src/detectors/AwsLambdaDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Detector,\n  IResource,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport { awsLambdaDetectorSync } from './AwsLambdaDetectorSync';\n\n/**\n * The AwsLambdaDetector can be used to detect if a process is running in AWS Lambda\n * and return a {@link Resource} populated with data about the environment.\n *\n * @deprecated Use {@link AwsLambdaDetectorSync} class instead\n */\nexport class AwsLambdaDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(awsLambdaDetectorSync.detect(_config));\n  }\n}\n\nexport const awsLambdaDetector = new AwsLambdaDetector();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAOH,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;;AAEhE;;;;;GAKG,CACH,IAAA,oBAAA;IAAA,SAAA,qBAIA,CAAC;IAHC,kBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAiC;QACtC,OAAO,OAAO,CAAC,OAAO,wNAAC,wBAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;IAChE,CAAC;IACH,OAAA,iBAAC;AAAD,CAAC,AAJD,IAIC;;AAEM,IAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC","ignoreList":[0],"debugId":null}}]
}