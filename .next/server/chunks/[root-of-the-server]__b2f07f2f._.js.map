{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/services/wasteService.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\r\nimport { z } from 'zod';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Zod schemas for validation\r\nexport const WasteEventInputSchema = z.object({\r\n  amountKg: z.number().positive(),\r\n  type: z.enum(['food', 'oil', 'packaging', 'organic']),\r\n  station: z.enum(['kitchen', 'bar', 'dining']),\r\n  staffId: z.number().optional(),\r\n  photoUrl: z.string().optional(),\r\n  confidence: z.number().min(0).max(1).optional(),\r\n  notes: z.string().optional(),\r\n});\r\n\r\nexport const AnalyticsQuerySchema = z.object({\r\n  tenantId: z.number().optional(),\r\n  from: z.date(),\r\n  to: z.date(),\r\n  metric: z.enum(['weight', 'cost', 'co2']).optional(),\r\n});\r\n\r\nexport const KPIQuerySchema = z.object({\r\n  tenantId: z.number().optional(),\r\n  window: z.enum(['today', 'week', 'month']),\r\n});\r\n\r\nexport const ComplianceQuerySchema = z.object({\r\n  tenantId: z.number().optional(),\r\n  from: z.date(),\r\n  to: z.date(),\r\n});\r\n\r\n// TypeScript types\r\nexport type WasteEventInput = z.infer<typeof WasteEventInputSchema>;\r\nexport type AnalyticsQuery = z.infer<typeof AnalyticsQuerySchema>;\r\nexport type KPIQuery = z.infer<typeof KPIQuerySchema>;\r\nexport type ComplianceQuery = z.infer<typeof ComplianceQuerySchema>;\r\n\r\nexport interface DashboardKPIs {\r\n  totalWasteKg: number;\r\n  totalCostEUR: number;\r\n  totalCO2Kg: number;\r\n  wasteReductionPercent: number;\r\n  costSavingsEUR: number;\r\n  co2SavedKg: number;\r\n  avgWastePerCover: number;\r\n  wasteToSalesRatio: number;\r\n  trends: {\r\n    waste: number;\r\n    cost: number;\r\n    co2: number;\r\n  };\r\n}\r\n\r\nexport interface WasteAnalytics {\r\n  dailyTrends: Array<{\r\n    date: string;\r\n    weight: number;\r\n    cost: number;\r\n    co2: number;\r\n    covers: number;\r\n  }>;\r\n  byCategory: Array<{\r\n    type: string;\r\n    weight: number;\r\n    cost: number;\r\n    co2: number;\r\n    percentage: number;\r\n  }>;\r\n  byStation: Array<{\r\n    station: string;\r\n    weight: number;\r\n    cost: number;\r\n    co2: number;\r\n    percentage: number;\r\n  }>;\r\n  topWastedDishes: Array<{\r\n    dish: string;\r\n    frequency: number;\r\n    totalWaste: number;\r\n    estimatedCost: number;\r\n  }>;\r\n  ratios: {\r\n    wastePerCover: number;\r\n    wasteToSales: number;\r\n    costPerCover: number;\r\n  };\r\n  impact: {\r\n    co2Equivalent: string;\r\n    treesEquivalent: number;\r\n    mealsLost: number;\r\n  };\r\n}\r\n\r\nexport interface ComplianceSummary {\r\n  score: number;\r\n  openViolations: {\r\n    critical: number;\r\n    major: number;\r\n    minor: number;\r\n  };\r\n  actions: Array<{\r\n    id: number;\r\n    title: string;\r\n    severity: string;\r\n    status: string;\r\n    dueDate: string;\r\n    assignee: string | null;\r\n    overdue: boolean;\r\n  }>;\r\n  logCompleteness: number;\r\n  sdg12_3Progress: number;\r\n}\r\n\r\n// Helper functions\r\nfunction calculateCO2FromWaste(amountKg: number, type: string): number {\r\n  const co2Factors = {\r\n    food: 2.5,\r\n    oil: 3.2,\r\n    packaging: 1.8,\r\n    organic: 2.1\r\n  };\r\n  return amountKg * (co2Factors[type as keyof typeof co2Factors] || 2.0);\r\n}\r\n\r\nfunction calculateCostFromWaste(amountKg: number, type: string): number {\r\n  const costFactors = {\r\n    food: 12.50,\r\n    oil: 8.75,\r\n    packaging: 5.20,\r\n    organic: 6.80\r\n  };\r\n  return amountKg * (costFactors[type as keyof typeof costFactors] || 8.0);\r\n}\r\n\r\nfunction getDateRange(window: string): { from: Date; to: Date } {\r\n  const now = new Date();\r\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n  \r\n  switch (window) {\r\n    case 'today':\r\n      return {\r\n        from: today,\r\n        to: new Date(today.getTime() + 24 * 60 * 60 * 1000)\r\n      };\r\n    case 'week':\r\n      const weekAgo = new Date(today);\r\n      weekAgo.setDate(weekAgo.getDate() - 7);\r\n      return { from: weekAgo, to: today };\r\n    case 'month':\r\n      const monthAgo = new Date(today);\r\n      monthAgo.setMonth(monthAgo.getMonth() - 1);\r\n      return { from: monthAgo, to: today };\r\n    default:\r\n      return { from: today, to: today };\r\n  }\r\n}\r\n\r\nfunction formatDate(date: Date): string {\r\n  return date.toISOString().split('T')[0];\r\n}\r\n\r\n// Main service functions\r\nexport async function getOwnerKPIs(query: KPIQuery): Promise<DashboardKPIs> {\r\n  const { from, to } = getDateRange(query.window);\r\n  \r\n  // Get current period data\r\n  const currentWaste = await prisma.wasteEvent.aggregate({\r\n    where: {\r\n      occurredAt: {\r\n        gte: from,\r\n        lt: to\r\n      }\r\n    },\r\n    _sum: {\r\n      amountKg: true,\r\n      costEUR: true,\r\n      co2Kg: true\r\n    },\r\n    _count: true\r\n  });\r\n\r\n  // Get previous period for comparison\r\n  const periodLength = to.getTime() - from.getTime();\r\n  const prevFrom = new Date(from.getTime() - periodLength);\r\n  const prevTo = from;\r\n\r\n  const previousWaste = await prisma.wasteEvent.aggregate({\r\n    where: {\r\n      occurredAt: {\r\n        gte: prevFrom,\r\n        lt: prevTo\r\n      }\r\n    },\r\n    _sum: {\r\n      amountKg: true,\r\n      costEUR: true,\r\n      co2Kg: true\r\n    }\r\n  });\r\n\r\n  // Get covers for the current period\r\n  const covers = await prisma.coverCount.aggregate({\r\n    where: {\r\n      date: {\r\n        gte: from,\r\n        lt: to\r\n      }\r\n    },\r\n    _sum: {\r\n      covers: true,\r\n      revenue: true\r\n    }\r\n  });\r\n\r\n  const totalWasteKg = currentWaste._sum.amountKg || 0;\r\n  const totalCostEUR = currentWaste._sum.costEUR || 0;\r\n  const totalCO2Kg = currentWaste._sum.co2Kg || 0;\r\n  const totalCovers = covers._sum.covers || 1;\r\n  const totalRevenue = covers._sum.revenue || 1;\r\n\r\n  const prevWasteKg = previousWaste._sum.amountKg || 0;\r\n  const prevCostEUR = previousWaste._sum.costEUR || 0;\r\n  const prevCO2Kg = previousWaste._sum.co2Kg || 0;\r\n\r\n  // Calculate reduction percentages\r\n  const wasteReductionPercent = prevWasteKg > 0 \r\n    ? ((prevWasteKg - totalWasteKg) / prevWasteKg) * 100 \r\n    : 0;\r\n\r\n  const costSavingsEUR = prevCostEUR - totalCostEUR;\r\n  const co2SavedKg = prevCO2Kg - totalCO2Kg;\r\n\r\n  return {\r\n    totalWasteKg,\r\n    totalCostEUR,\r\n    totalCO2Kg,\r\n    wasteReductionPercent,\r\n    costSavingsEUR,\r\n    co2SavedKg,\r\n    avgWastePerCover: totalWasteKg / totalCovers,\r\n    wasteToSalesRatio: (totalCostEUR / totalRevenue) * 100,\r\n    trends: {\r\n      waste: wasteReductionPercent,\r\n      cost: prevCostEUR > 0 ? ((prevCostEUR - totalCostEUR) / prevCostEUR) * 100 : 0,\r\n      co2: prevCO2Kg > 0 ? ((prevCO2Kg - totalCO2Kg) / prevCO2Kg) * 100 : 0\r\n    }\r\n  };\r\n}\r\n\r\nexport async function getAnalytics(query: AnalyticsQuery): Promise<WasteAnalytics> {\r\n  const { from, to } = query;\r\n\r\n  // Daily trends with proper SQLite query\r\n  const dailyData = await prisma.$queryRaw<Array<{\r\n    date: string;\r\n    weight: number;\r\n    cost: number;\r\n    co2: number;\r\n  }>>`\r\n    SELECT \r\n      DATE(occurredAt) as date,\r\n      CAST(SUM(amountKg) AS REAL) as weight,\r\n      CAST(SUM(costEUR) AS REAL) as cost,\r\n      CAST(SUM(co2Kg) AS REAL) as co2\r\n    FROM WasteEvent \r\n    WHERE occurredAt >= ${from} AND occurredAt <= ${to}\r\n    GROUP BY DATE(occurredAt)\r\n    ORDER BY date\r\n  `;\r\n\r\n  // Get covers for the same period\r\n  const coverData = await prisma.coverCount.findMany({\r\n    where: {\r\n      date: {\r\n        gte: from,\r\n        lte: to\r\n      }\r\n    },\r\n    select: {\r\n      date: true,\r\n      covers: true\r\n    }\r\n  });\r\n\r\n  const dailyTrends = dailyData.map(day => {\r\n    const coverInfo = coverData.find(c => \r\n      formatDate(c.date) === day.date\r\n    );\r\n    \r\n    return {\r\n      date: day.date,\r\n      weight: Number(day.weight),\r\n      cost: Number(day.cost),\r\n      co2: Number(day.co2),\r\n      covers: coverInfo?.covers || 0\r\n    };\r\n  });\r\n\r\n  // By category\r\n  const categoryData = await prisma.wasteEvent.groupBy({\r\n    by: ['type'],\r\n    where: {\r\n      occurredAt: {\r\n        gte: from,\r\n        lte: to\r\n      }\r\n    },\r\n    _sum: {\r\n      amountKg: true,\r\n      costEUR: true,\r\n      co2Kg: true\r\n    }\r\n  });\r\n\r\n  const totalWeight = categoryData.reduce((sum, cat) => sum + (cat._sum.amountKg || 0), 0);\r\n  \r\n  const byCategory = categoryData.map(cat => ({\r\n    type: cat.type,\r\n    weight: cat._sum.amountKg || 0,\r\n    cost: cat._sum.costEUR || 0,\r\n    co2: cat._sum.co2Kg || 0,\r\n    percentage: totalWeight > 0 ? ((cat._sum.amountKg || 0) / totalWeight) * 100 : 0\r\n  }));\r\n\r\n  // By station\r\n  const stationData = await prisma.wasteEvent.groupBy({\r\n    by: ['station'],\r\n    where: {\r\n      occurredAt: {\r\n        gte: from,\r\n        lte: to\r\n      }\r\n    },\r\n    _sum: {\r\n      amountKg: true,\r\n      costEUR: true,\r\n      co2Kg: true\r\n    }\r\n  });\r\n\r\n  const byStation = stationData.map(station => ({\r\n    station: station.station,\r\n    weight: station._sum.amountKg || 0,\r\n    cost: station._sum.costEUR || 0,\r\n    co2: station._sum.co2Kg || 0,\r\n    percentage: totalWeight > 0 ? ((station._sum.amountKg || 0) / totalWeight) * 100 : 0\r\n  }));\r\n\r\n  // Mock top wasted dishes (would need menu item integration)\r\n  const topWastedDishes = [\r\n    { dish: \"Caesar Salad\", frequency: 15, totalWaste: 12.5, estimatedCost: 156.25 },\r\n    { dish: \"Grilled Salmon\", frequency: 12, totalWaste: 18.0, estimatedCost: 225.00 },\r\n    { dish: \"Beef Burger\", frequency: 10, totalWaste: 8.5, estimatedCost: 106.25 },\r\n    { dish: \"Pasta Carbonara\", frequency: 8, totalWaste: 6.2, estimatedCost: 77.50 },\r\n    { dish: \"Chicken Wings\", frequency: 7, totalWaste: 9.1, estimatedCost: 113.75 }\r\n  ];\r\n\r\n  // Calculate ratios\r\n  const totalCovers = coverData.reduce((sum, c) => sum + c.covers, 0);\r\n  const totalRevenue = await prisma.coverCount.aggregate({\r\n    where: {\r\n      date: {\r\n        gte: from,\r\n        lte: to\r\n      }\r\n    },\r\n    _sum: {\r\n      revenue: true\r\n    }\r\n  });\r\n\r\n  const ratios = {\r\n    wastePerCover: totalCovers > 0 ? totalWeight / totalCovers : 0,\r\n    wasteToSales: (totalRevenue._sum.revenue || 0) > 0 \r\n      ? (categoryData.reduce((sum, cat) => sum + (cat._sum.costEUR || 0), 0) / (totalRevenue._sum.revenue || 1)) * 100\r\n      : 0,\r\n    costPerCover: totalCovers > 0 \r\n      ? categoryData.reduce((sum, cat) => sum + (cat._sum.costEUR || 0), 0) / totalCovers\r\n      : 0\r\n  };\r\n\r\n  // Impact calculations\r\n  const totalCO2 = categoryData.reduce((sum, cat) => sum + (cat._sum.co2Kg || 0), 0);\r\n  const impact = {\r\n    co2Equivalent: `${totalCO2.toFixed(1)} kg CO₂`,\r\n    treesEquivalent: Math.round(totalCO2 / 22), // 1 tree absorbs ~22kg CO2/year\r\n    mealsLost: Math.round(totalWeight / 0.5) // Assuming 500g per meal\r\n  };\r\n\r\n  return {\r\n    dailyTrends,\r\n    byCategory,\r\n    byStation,\r\n    topWastedDishes,\r\n    ratios,\r\n    impact\r\n  };\r\n}\r\n\r\nexport async function getCompliance(query: ComplianceQuery): Promise<ComplianceSummary> {\r\n  const { from, to } = query;\r\n\r\n  // Get compliance checks\r\n  const checks = await prisma.complianceCheck.findMany({\r\n    where: {\r\n      createdAt: {\r\n        gte: from,\r\n        lte: to\r\n      }\r\n    },\r\n    include: {\r\n      assignee: {\r\n        select: {\r\n          name: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  // Count violations by severity and status\r\n  const openViolations = {\r\n    critical: checks.filter(c => c.status === 'open' && c.severity === 'critical').length,\r\n    major: checks.filter(c => c.status === 'open' && c.severity === 'major').length,\r\n    minor: checks.filter(c => c.status === 'open' && c.severity === 'minor').length\r\n  };\r\n\r\n  // Calculate compliance score (based on resolved vs total issues)\r\n  const totalIssues = checks.length;\r\n  const resolvedIssues = checks.filter(c => c.status === 'closed').length;\r\n  const score = totalIssues > 0 ? Math.round((resolvedIssues / totalIssues) * 100) : 100;\r\n\r\n  // Format actions\r\n  const now = new Date();\r\n  const actions = checks.map(check => ({\r\n    id: check.id,\r\n    title: check.title,\r\n    severity: check.severity,\r\n    status: check.status,\r\n    dueDate: check.dueDate.toISOString().split('T')[0],\r\n    assignee: check.assignee?.name || null,\r\n    overdue: check.dueDate < now && check.status !== 'closed'\r\n  }));\r\n\r\n  // Calculate log completeness (mock - would check actual logging frequency)\r\n  const expectedLogs = Math.ceil((to.getTime() - from.getTime()) / (24 * 60 * 60 * 1000)) * 3; // 3 logs per day expected\r\n  const actualLogs = await prisma.wasteEvent.count({\r\n    where: {\r\n      occurredAt: {\r\n        gte: from,\r\n        lte: to\r\n      }\r\n    }\r\n  });\r\n  \r\n  const logCompleteness = Math.min(100, Math.round((actualLogs / expectedLogs) * 100));\r\n\r\n  // SDG 12.3 progress (50% food waste reduction by 2030)\r\n  // Mock calculation - would need baseline year data\r\n  const currentFoodWaste = await prisma.wasteEvent.aggregate({\r\n    where: {\r\n      type: 'food',\r\n      occurredAt: {\r\n        gte: from,\r\n        lte: to\r\n      }\r\n    },\r\n    _sum: {\r\n      amountKg: true\r\n    }\r\n  });\r\n\r\n  // Assume 25% reduction achieved towards 50% goal\r\n  const sdg12_3Progress = 50; // 50% progress towards SDG 12.3\r\n\r\n  return {\r\n    score,\r\n    openViolations,\r\n    actions,\r\n    logCompleteness,\r\n    sdg12_3Progress\r\n  };\r\n}\r\n\r\nexport async function logEvent(input: WasteEventInput): Promise<void> {\r\n  const validatedInput = WasteEventInputSchema.parse(input);\r\n  \r\n  // Calculate cost and CO2 if not provided\r\n  const costEUR = calculateCostFromWaste(validatedInput.amountKg, validatedInput.type);\r\n  const co2Kg = calculateCO2FromWaste(validatedInput.amountKg, validatedInput.type);\r\n\r\n  await prisma.wasteEvent.create({\r\n    data: {\r\n      ...validatedInput,\r\n      costEUR,\r\n      co2Kg,\r\n      occurredAt: new Date()\r\n    }\r\n  });\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/waste/kpis/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getOwnerKPIs, KPIQuerySchema } from '@/services/wasteService';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Parse query parameters\r\n    const window = searchParams.get('window') || 'week';\r\n    \r\n    // Validate with schema\r\n    const query = KPIQuerySchema.parse({\r\n      window: window === 'today' || window === 'week' || window === 'month' ? window : 'week'\r\n    });\r\n    \r\n    const kpis = await getOwnerKPIs(query);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: kpis,\r\n      window\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('KPIs API error:', error);\r\n    \r\n    if (error instanceof Error && error.name === 'ZodError') {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid query parameters', details: error.message },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { success: false, error: 'Failed to fetch KPI data' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAE5C,yBAAyB;QACzB,MAAM,SAAS,aAAa,GAAG,CAAC,aAAa;QAE7C,uBAAuB;QACvB,MAAM,QAAQ,mJAAc,CAAC,KAAK,CAAC;YACjC,QAAQ,WAAW,WAAW,WAAW,UAAU,WAAW,UAAU,SAAS;QACnF;QAEA,MAAM,OAAO,MAAM,IAAA,iJAAY,EAAC;QAEhC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QAEjC,IAAI,iBAAiB,SAAS,MAAM,IAAI,KAAK,YAAY;YACvD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;gBAA4B,SAAS,MAAM,OAAO;YAAC,GAC5E;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA2B,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}