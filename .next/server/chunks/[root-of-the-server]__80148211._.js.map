{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n}); "],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,yIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/ai-allergen/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { ai } from '@/ai/genkit';\n\nasync function generateAllergenList(input: { dishName: string; aiHint?: string }) {\n  const { dishName, aiHint } = input;\n  const prompt = `You are a food safety expert. For the dish: \"${dishName}\", list the most likely food allergens present. Use compact emojis/icons for each allergen (e.g., ü•õ for milk, ü•ú for peanuts, üåæ for gluten, ü•ö for egg, üêü for fish, ü¶ê for shellfish, üå∞ for tree nuts, üçë for soy, üçØ for sesame, üå∂Ô∏è for spicy, üçã for citrus, etc). For each allergen, return an object with 'icon' and 'name' (the full allergen name in English or the menu language). ${aiHint ? `Context: ${aiHint}` : ''}\nReturn ONLY a valid JSON array of objects: [{\"icon\": \"emoji\", \"name\": \"allergen name\"}, ...]. No explanations, no markdown, just the JSON array.`;\n  try {\n    const result = await ai.generate([{ text: prompt }]);\n    let text = typeof result.text === 'string' ? result.text : '';\n    let cleanText = text.trim();\n    const jsonMatch = text.match(/```json([\\s\\S]*?)```/) || text.match(/```([\\s\\S]*?)```/);\n    if (jsonMatch) {\n      cleanText = jsonMatch[1].trim();\n    }\n    cleanText = cleanText.replace(/```/g, '').trim();\n    const allergens = JSON.parse(cleanText);\n    if (!Array.isArray(allergens)) throw new Error('Invalid response format');\n    return { allergens };\n  } catch (error) {\n    console.error('AI allergen generation failed:', error);\n    // Fallback: common allergens\n    const fallbackAllergens = [\n      { icon: 'üåæ', name: 'Gluten' },\n      { icon: 'ü•õ', name: 'Milk' },\n      { icon: 'ü•ö', name: 'Egg' },\n      { icon: 'ü•ú', name: 'Peanut' },\n      { icon: 'üå∞', name: 'Tree nut' },\n      { icon: 'üçë', name: 'Soy' },\n      { icon: 'üçØ', name: 'Sesame' },\n      { icon: 'üêü', name: 'Fish' },\n      { icon: 'ü¶ê', name: 'Shellfish' },\n      { icon: 'üå∂Ô∏è', name: 'Spicy' }\n    ];\n    return { allergens: fallbackAllergens };\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { name, aiHint } = body;\n    if (!name) {\n      return NextResponse.json({ error: 'Missing dish name' }, { status: 400 });\n    }\n    const result = await generateAllergenList({ dishName: name, aiHint });\n    return NextResponse.json({ allergens: result.allergens });\n  } catch (error: any) {\n    return NextResponse.json({ error: error?.message || 'Failed to generate allergens' }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,eAAe,qBAAqB,KAA4C;IAC9E,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG;IAC7B,MAAM,SAAS,CAAC,6CAA6C,EAAE,SAAS,+XAA+X,EAAE,SAAS,CAAC,SAAS,EAAE,QAAQ,GAAG,GAAG;gJAC9V,CAAC;IAC/I,IAAI;QACF,MAAM,SAAS,MAAM,qHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;YAAC;gBAAE,MAAM;YAAO;SAAE;QACnD,IAAI,OAAO,OAAO,OAAO,IAAI,KAAK,WAAW,OAAO,IAAI,GAAG;QAC3D,IAAI,YAAY,KAAK,IAAI;QACzB,MAAM,YAAY,KAAK,KAAK,CAAC,2BAA2B,KAAK,KAAK,CAAC;QACnE,IAAI,WAAW;YACb,YAAY,SAAS,CAAC,EAAE,CAAC,IAAI;QAC/B;QACA,YAAY,UAAU,OAAO,CAAC,QAAQ,IAAI,IAAI;QAC9C,MAAM,YAAY,KAAK,KAAK,CAAC;QAC7B,IAAI,CAAC,MAAM,OAAO,CAAC,YAAY,MAAM,IAAI,MAAM;QAC/C,OAAO;YAAE;QAAU;IACrB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,6BAA6B;QAC7B,MAAM,oBAAoB;YACxB;gBAAE,MAAM;gBAAM,MAAM;YAAS;YAC7B;gBAAE,MAAM;gBAAM,MAAM;YAAO;YAC3B;gBAAE,MAAM;gBAAM,MAAM;YAAM;YAC1B;gBAAE,MAAM;gBAAM,MAAM;YAAS;YAC7B;gBAAE,MAAM;gBAAM,MAAM;YAAW;YAC/B;gBAAE,MAAM;gBAAM,MAAM;YAAM;YAC1B;gBAAE,MAAM;gBAAM,MAAM;YAAS;YAC7B;gBAAE,MAAM;gBAAM,MAAM;YAAO;YAC3B;gBAAE,MAAM;gBAAM,MAAM;YAAY;YAChC;gBAAE,MAAM;gBAAO,MAAM;YAAQ;SAC9B;QACD,OAAO;YAAE,WAAW;QAAkB;IACxC;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG;QACzB,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QACA,MAAM,SAAS,MAAM,qBAAqB;YAAE,UAAU;YAAM;QAAO;QACnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,WAAW,OAAO,SAAS;QAAC;IACzD,EAAE,OAAO,OAAY;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,OAAO,WAAW;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtG;AACF","debugId":null}}]
}