{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/pos/floor/layout/draft/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { z } from 'zod';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Validation schemas\r\nconst TableNodeSchema = z.object({\r\n  id: z.string(),\r\n  x: z.number(),\r\n  y: z.number(),\r\n  w: z.number().min(32),\r\n  h: z.number().min(32),\r\n  shape: z.enum(['round', 'square', 'rect']),\r\n  capacity: z.number().min(1),\r\n  seats: z.number().min(1),\r\n  label: z.string().optional(),\r\n  zoneId: z.string().optional(),\r\n  childIds: z.array(z.string()).optional(),\r\n  metadata: z.record(z.any()).optional(),\r\n});\r\n\r\nconst ZoneSchema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  color: z.string(),\r\n  visible: z.boolean(),\r\n});\r\n\r\nconst LayoutDraftSchema = z.object({\r\n  tables: z.array(TableNodeSchema),\r\n  zones: z.array(ZoneSchema),\r\n});\r\n\r\nconst SaveDraftSchema = z.object({\r\n  floorId: z.string(),\r\n  layoutDraft: LayoutDraftSchema,\r\n  version: z.number().optional(),\r\n});\r\n\r\n// Helper functions\r\nfunction getTenantId(request: NextRequest): string {\r\n  return request.headers.get('x-tenant-id') || 'default-tenant';\r\n}\r\n\r\nfunction validateNoOverlaps(tables: any[]): boolean {\r\n  for (let i = 0; i < tables.length; i++) {\r\n    for (let j = i + 1; j < tables.length; j++) {\r\n      const t1 = tables[i];\r\n      const t2 = tables[j];\r\n      \r\n      // AABB collision detection\r\n      if (\r\n        t1.x < t2.x + t2.w &&\r\n        t1.x + t1.w > t2.x &&\r\n        t1.y < t2.y + t2.h &&\r\n        t1.y + t1.h > t2.y\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction validateUniqueTableIds(tables: any[]): boolean {\r\n  const ids = tables.map(t => t.id);\r\n  return new Set(ids).size === ids.length;\r\n}\r\n\r\nasync function logAuditEvent(tenantId: string, action: string, metadata: any) {\r\n  try {\r\n    await prisma.auditLog.create({\r\n      data: {\r\n        tenantId,\r\n        action,\r\n        entityType: 'FLOOR',\r\n        metadata,\r\n        timestamp: new Date(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to log audit event:', error);\r\n  }\r\n}\r\n\r\n// POST - Save draft layout\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const tenantId = getTenantId(request);\r\n    const body = await request.json();\r\n    \r\n    // Validate request body\r\n    const validatedData = SaveDraftSchema.parse(body);\r\n    const { floorId, layoutDraft, version } = validatedData;\r\n    \r\n    // Business validation\r\n    if (!validateNoOverlaps(layoutDraft.tables)) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'OVERLAPPING_TABLES',\r\n          message: 'Tables cannot overlap'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    if (!validateUniqueTableIds(layoutDraft.tables)) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'DUPLICATE_TABLE_ID',\r\n          message: 'All table IDs must be unique'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Check for existing layout\r\n    const existingLayout = await prisma.floorLayout.findUnique({\r\n      where: { floorId },\r\n    });\r\n    \r\n    // Version conflict check (optimistic locking)\r\n    if (existingLayout && version && existingLayout.version !== version) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'STALE_VERSION',\r\n          message: 'Layout has been modified by another user',\r\n          currentVersion: existingLayout.version,\r\n        },\r\n        { status: 409 }\r\n      );\r\n    }\r\n    \r\n    const newVersion = (existingLayout?.version || 0) + 1;\r\n    const now = new Date();\r\n    \r\n    // Upsert the layout\r\n    const updatedLayout = await prisma.floorLayout.upsert({\r\n      where: { floorId },\r\n      create: {\r\n        floorId,\r\n        tenantId,\r\n        siteId: 'main-site',\r\n        layoutDraft: layoutDraft,\r\n        layoutActive: existingLayout?.layoutActive || null,\r\n        version: newVersion,\r\n        updatedBy: 'current-user',\r\n        metadata: {\r\n          tableCount: layoutDraft.tables.length,\r\n          zoneCount: layoutDraft.zones.length,\r\n          lastDraftSave: now.toISOString(),\r\n        },\r\n      },\r\n      update: {\r\n        layoutDraft: layoutDraft,\r\n        version: newVersion,\r\n        updatedAt: now,\r\n        updatedBy: 'current-user',\r\n        metadata: {\r\n          tableCount: layoutDraft.tables.length,\r\n          zoneCount: layoutDraft.zones.length,\r\n          lastDraftSave: now.toISOString(),\r\n        },\r\n      },\r\n    });\r\n    \r\n    // Log audit event\r\n    await logAuditEvent(tenantId, 'FLOOR_DRAFT_SAVED', {\r\n      floorId,\r\n      version: newVersion,\r\n      tableCount: layoutDraft.tables.length,\r\n      zoneCount: layoutDraft.zones.length,\r\n    });\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      version: updatedLayout.version,\r\n      savedAt: updatedLayout.updatedAt.toISOString(),\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error saving draft:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'VALIDATION_ERROR',\r\n          message: 'Invalid request data',\r\n          details: error.errors\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'INTERNAL_ERROR',\r\n        message: 'Failed to save draft'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// GET - Load draft layout\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const tenantId = getTenantId(request);\r\n    const { searchParams } = new URL(request.url);\r\n    const floorId = searchParams.get('floorId');\r\n    \r\n    if (!floorId) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'MISSING_FLOOR_ID',\r\n          message: 'floorId query parameter is required'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const layout = await prisma.floorLayout.findUnique({\r\n      where: { floorId },\r\n      select: {\r\n        layoutDraft: true,\r\n        version: true,\r\n        updatedAt: true,\r\n        metadata: true,\r\n      },\r\n    });\r\n    \r\n    if (!layout) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'LAYOUT_NOT_FOUND',\r\n          message: 'Floor layout not found'\r\n        },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      layoutDraft: layout.layoutDraft,\r\n      version: layout.version,\r\n      updatedAt: layout.updatedAt.toISOString(),\r\n      metadata: layout.metadata,\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error loading draft:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: 'INTERNAL_ERROR',\r\n        message: 'Failed to load draft'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}