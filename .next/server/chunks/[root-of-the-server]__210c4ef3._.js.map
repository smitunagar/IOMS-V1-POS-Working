{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n}); "],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,yIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/inventoryService.ts"],"sourcesContent":["// Inventory Service\n// Provides functions to manage inventory in localStorage\n\nexport interface InventoryItem {\n  id: string;\n  name: string;\n  quantity: number;\n  unit: string;\n  category?: string;\n  lowStockThreshold?: number;\n  expiryDate?: string;\n  image?: string;\n  aiHint?: string;\n  quantityUsed?: number;\n  totalUsed?: number;\n}\n\nconst INVENTORY_KEY_PREFIX = 'inventory_';\n\nexport function getInventory(userId: string): InventoryItem[] {\n  if (typeof window === 'undefined') return [];\n  const data = localStorage.getItem(INVENTORY_KEY_PREFIX + userId);\n  if (!data) return [];\n  try {\n    return JSON.parse(data) as InventoryItem[];\n  } catch {\n    return [];\n  }\n}\n\nexport function addInventoryItem(userId: string, item: InventoryItem): InventoryItem | null {\n  if (typeof window === 'undefined') return null;\n  const inventory = getInventory(userId);\n  const newItem = { ...item, id: item.id || Date.now().toString(), quantityUsed: item.quantityUsed || 0, totalUsed: item.totalUsed || 0 };\n  inventory.push(newItem);\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\n  return newItem;\n}\n\nexport function updateInventoryItem(userId: string, item: InventoryItem): boolean {\n  if (typeof window === 'undefined') return false;\n  const inventory = getInventory(userId);\n  const idx = inventory.findIndex(i => i.id === item.id);\n  if (idx === -1) return false;\n  inventory[idx] = item;\n  // Always persist the updated inventory array\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\n  return true;\n}\n\nexport function removeInventoryItem(userId: string, itemId: string): boolean {\n  if (typeof window === 'undefined') return false;\n  const inventory = getInventory(userId);\n  const newInventory = inventory.filter(i => i.id !== itemId);\n  if (newInventory.length === inventory.length) return false;\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(newInventory));\n  return true;\n}\n\nexport function addOrUpdateIngredientInInventory(userId: string, ingredient: InventoryItem): InventoryItem {\n  const inventory = getInventory(userId);\n  const idx = inventory.findIndex(i => i.name.toLowerCase() === ingredient.name.toLowerCase());\n  if (idx !== -1) {\n    inventory[idx] = { ...inventory[idx], ...ingredient, quantityUsed: inventory[idx].quantityUsed || 0, totalUsed: inventory[idx].totalUsed || 0 };\n  } else {\n    inventory.push({ ...ingredient, id: ingredient.id || Date.now().toString(), quantityUsed: ingredient.quantityUsed || 0, totalUsed: ingredient.totalUsed || 0 });\n  }\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\n  return ingredient;\n}\n\nexport function addIngredientToInventoryIfNotExists(userId: string, ingredient: InventoryItem): boolean {\n  const inventory = getInventory(userId);\n  const exists = inventory.some(i => i.name.toLowerCase() === ingredient.name.toLowerCase());\n  if (!exists) {\n    addInventoryItem(userId, ingredient);\n    return true;\n  }\n  return false;\n}\n\nexport function getInventoryAlerts(userId: string): string[] {\n  const inventory = getInventory(userId);\n  return inventory.filter(i => i.lowStockThreshold && i.quantity <= i.lowStockThreshold)\n    .map(i => `Low stock: ${i.name} (${i.quantity} ${i.unit})`);\n}\n\nexport function updateInventoryAlerts(userId: string): void {\n  if (typeof window === 'undefined') return;\n  // Placeholder: In a real app, this would update alert state in a DB or context\n  // For now, just triggers a localStorage event\n  localStorage.setItem('inventory_alerts_' + userId, Date.now().toString());\n}\n\nexport function saveInventory(userId: string, inventory: InventoryItem[]): void {\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\n}\n\n// Inventory alert type for low stock notifications\nexport interface InventoryAlert {\n  itemId: string;\n  itemName: string;\n  quantity: number;\n  unit: string;\n  message: string;\n}\n\n// Generate inventory alerts for low stock items\nexport function getInventoryAlertsDetailed(userId: string): InventoryAlert[] {\n  const inventory = getInventory(userId);\n  return inventory\n    .filter(i => i.lowStockThreshold !== undefined && i.quantity <= (i.lowStockThreshold ?? 0))\n    .map(i => ({\n      itemId: i.id,\n      itemName: i.name,\n      quantity: i.quantity,\n      unit: i.unit,\n      message: `Low stock: ${i.name} (${i.quantity} ${i.unit})`,\n    }));\n}\n\n// Placeholder for recordIngredientUsage to resolve import in posInventoryIntegration\nexport function recordIngredientUsage(userId: string, dish: any, quantity: number): void {\n  // No-op placeholder\n} "],"names":[],"mappings":"AAAA,oBAAoB;AACpB,yDAAyD;;;;;;;;;;;;;;AAgBzD,MAAM,uBAAuB;AAEtB,SAAS,aAAa,MAAc;IACzC,wCAAmC,OAAO,EAAE;;IAC5C,MAAM;AAOR;AAEO,SAAS,iBAAiB,MAAc,EAAE,IAAmB;IAClE,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,oBAAoB,MAAc,EAAE,IAAmB;IACrE,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAMR;AAEO,SAAS,oBAAoB,MAAc,EAAE,MAAc;IAChE,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,iCAAiC,MAAc,EAAE,UAAyB;IACxF,MAAM,YAAY,aAAa;IAC/B,MAAM,MAAM,UAAU,SAAS,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,WAAW,OAAO,WAAW,IAAI,CAAC,WAAW;IACzF,IAAI,QAAQ,CAAC,GAAG;QACd,SAAS,CAAC,IAAI,GAAG;YAAE,GAAG,SAAS,CAAC,IAAI;YAAE,GAAG,UAAU;YAAE,cAAc,SAAS,CAAC,IAAI,CAAC,YAAY,IAAI;YAAG,WAAW,SAAS,CAAC,IAAI,CAAC,SAAS,IAAI;QAAE;IAChJ,OAAO;QACL,UAAU,IAAI,CAAC;YAAE,GAAG,UAAU;YAAE,IAAI,WAAW,EAAE,IAAI,KAAK,GAAG,GAAG,QAAQ;YAAI,cAAc,WAAW,YAAY,IAAI;YAAG,WAAW,WAAW,SAAS,IAAI;QAAE;IAC/J;IACA,aAAa,OAAO,CAAC,uBAAuB,QAAQ,KAAK,SAAS,CAAC;IACnE,OAAO;AACT;AAEO,SAAS,oCAAoC,MAAc,EAAE,UAAyB;IAC3F,MAAM,YAAY,aAAa;IAC/B,MAAM,SAAS,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,WAAW,OAAO,WAAW,IAAI,CAAC,WAAW;IACvF,IAAI,CAAC,QAAQ;QACX,iBAAiB,QAAQ;QACzB,OAAO;IACT;IACA,OAAO;AACT;AAEO,SAAS,mBAAmB,MAAc;IAC/C,MAAM,YAAY,aAAa;IAC/B,OAAO,UAAU,MAAM,CAAC,CAAA,IAAK,EAAE,iBAAiB,IAAI,EAAE,QAAQ,IAAI,EAAE,iBAAiB,EAClF,GAAG,CAAC,CAAA,IAAK,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;AAC9D;AAEO,SAAS,sBAAsB,MAAc;IAClD,wCAAmC;;AAIrC;AAEO,SAAS,cAAc,MAAc,EAAE,SAA0B;IACtE,aAAa,OAAO,CAAC,uBAAuB,QAAQ,KAAK,SAAS,CAAC;AACrE;AAYO,SAAS,2BAA2B,MAAc;IACvD,MAAM,YAAY,aAAa;IAC/B,OAAO,UACJ,MAAM,CAAC,CAAA,IAAK,EAAE,iBAAiB,KAAK,aAAa,EAAE,QAAQ,IAAI,CAAC,EAAE,iBAAiB,IAAI,CAAC,GACxF,GAAG,CAAC,CAAA,IAAK,CAAC;YACT,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,IAAI;YAChB,UAAU,EAAE,QAAQ;YACpB,MAAM,EAAE,IAAI;YACZ,SAAS,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3D,CAAC;AACL;AAGO,SAAS,sBAAsB,MAAc,EAAE,IAAS,EAAE,QAAgB;AAC/E,oBAAoB;AACtB","debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/menuService.ts"],"sourcesContent":["// Menu Service\n// Provides functions to manage menu items in localStorage\n\nexport interface IngredientQuantity {\n  inventoryItemName: string;\n  quantityPerDish: number;\n  unit: string;\n}\n\nexport interface MenuItem {\n  id: string;\n  name: string;\n  price: number;\n  category?: string;\n  ingredients?: (string | IngredientQuantity)[];\n  image?: string;\n  aiHint?: string;\n}\n\nexport interface Dish {\n  id: string;\n  name: string;\n  price: number;\n  category?: string;\n  ingredients?: (string | IngredientQuantity)[];\n  image?: string;\n  aiHint?: string;\n}\n\nconst MENU_KEY_PREFIX = 'menu_';\n\nexport function getDishes(userId: string): MenuItem[] {\n  if (typeof window === 'undefined') return [];\n  const data = localStorage.getItem(MENU_KEY_PREFIX + userId);\n  if (!data) return [];\n  try {\n    return JSON.parse(data) as MenuItem[];\n  } catch {\n    return [];\n  }\n}\n\nexport function saveDishes(userId: string, dishes: MenuItem[]): void {\n  localStorage.setItem(MENU_KEY_PREFIX + userId, JSON.stringify(dishes));\n}\n\nexport function addDish(userId: string, dish: MenuItem): MenuItem | null {\n  if (typeof window === 'undefined') return null;\n  const dishes = getDishes(userId);\n  const newDish = { ...dish, id: dish.id || Date.now().toString() };\n  dishes.push(newDish);\n  saveDishes(userId, dishes);\n  return newDish;\n}\n\nexport function updateDish(userId: string, dish: MenuItem): boolean {\n  if (typeof window === 'undefined') return false;\n  const dishes = getDishes(userId);\n  const idx = dishes.findIndex(d => d.id === dish.id);\n  if (idx === -1) return false;\n  dishes[idx] = dish;\n  saveDishes(userId, dishes);\n  return true;\n}\n\nexport function removeDish(userId: string, dishId: string): boolean {\n  if (typeof window === 'undefined') return false;\n  const dishes = getDishes(userId);\n  const newDishes = dishes.filter(d => d.id !== dishId);\n  if (newDishes.length === dishes.length) return false;\n  saveDishes(userId, newDishes);\n  return true;\n}\n\nexport const addDishToMenu = addDish; "],"names":[],"mappings":"AAAA,eAAe;AACf,0DAA0D;;;;;;;;;AA4B1D,MAAM,kBAAkB;AAEjB,SAAS,UAAU,MAAc;IACtC,wCAAmC,OAAO,EAAE;;IAC5C,MAAM;AAOR;AAEO,SAAS,WAAW,MAAc,EAAE,MAAkB;IAC3D,aAAa,OAAO,CAAC,kBAAkB,QAAQ,KAAK,SAAS,CAAC;AAChE;AAEO,SAAS,QAAQ,MAAc,EAAE,IAAc;IACpD,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,WAAW,MAAc,EAAE,IAAc;IACvD,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAKR;AAEO,SAAS,WAAW,MAAc,EAAE,MAAc;IACvD,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,MAAM,gBAAgB","debugId":null}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/ai/flows/ingredient-types.ts"],"sourcesContent":["import { z } from 'genkit';\n\nexport const GenerateIngredientsListInputSchema = z.object({\n  dishName: z.string().describe('The name of the dish to generate ingredients for.'),\n  numberOfServings: z.number().describe('The number of servings the ingredients should be for.'),\n});\nexport type GenerateIngredientsListInput = z.infer<typeof GenerateIngredientsListInputSchema>;\n\nexport const IngredientSchema = z.object({\n  name: z.string().describe('The name of the ingredient.'),\n  quantity: z.number().describe('The quantity of the ingredient (numeric value).'),\n  unit: z.string().describe('The unit for the quantity (e.g., \"g\", \"ml\", \"pcs\", \"kg\").'),\n});\n\nexport const GenerateIngredientsListOutputSchema = z.object({\n  ingredients: z.array(IngredientSchema).describe('A list of ingredients with their names, quantities, and units.'),\n});\nexport type GenerateIngredientsListOutput = z.infer<typeof GenerateIngredientsListOutputSchema>;\n\n// New schemas for expiry date suggestion\nexport const SuggestExpiryDateInputSchema = z.object({\n  productName: z.string().describe('The name of the product.'),\n  productCategory: z.string().optional().describe('The category of the product (e.g., \"Tea\", \"Spices\", \"Sweets\").'),\n  productWeight: z.string().optional().describe('The weight/unit of the product (e.g., \"500g\", \"1000g\", \"20 pkt\").'),\n  manufacturingDate: z.string().optional().describe('The manufacturing date if available.'),\n});\nexport type SuggestExpiryDateInput = z.infer<typeof SuggestExpiryDateInputSchema>;\n\nexport const SuggestExpiryDateOutputSchema = z.object({\n  suggestedExpiryDate: z.string().describe('The suggested expiry date in YYYY-MM-DD format.'),\n  shelfLifeDays: z.number().describe('The estimated shelf life in days.'),\n  storageRecommendation: z.string().describe('Storage recommendation for the product.'),\n  confidence: z.string().describe('Confidence level of the suggestion (High, Medium, Low).'),\n});\nexport type SuggestExpiryDateOutput = z.infer<typeof SuggestExpiryDateOutputSchema>;\n"],"names":[],"mappings":";;;;;;;AAAA;AAAA;;AAEO,MAAM,qCAAqC,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzD,UAAU,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,kBAAkB,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACxC;AAGO,MAAM,mBAAmB,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,MAAM,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,UAAU,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,MAAM,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAEO,MAAM,sCAAsC,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1D,aAAa,yIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kBAAkB,QAAQ,CAAC;AAClD;AAIO,MAAM,+BAA+B,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,aAAa,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,iBAAiB,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAChD,eAAe,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC9C,mBAAmB,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACpD;AAGO,MAAM,gCAAgC,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,qBAAqB,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,eAAe,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,uBAAuB,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3C,YAAY,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC","debugId":null}},
    {"offset": {"line": 552, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/ai/flows/generate-ingredients-list.ts"],"sourcesContent":["\"use server\";\n\nimport { ai } from '@/ai/genkit';\nimport {\n  GenerateIngredientsListInput,\n  GenerateIngredientsListOutput,\n  GenerateIngredientsListInputSchema,\n  GenerateIngredientsListOutputSchema,\n  IngredientSchema\n} from './ingredient-types';\n\nconst prompt = ai.definePrompt({\n  name: 'generateIngredientsListPrompt',\n  input: { schema: GenerateIngredientsListInputSchema },\n  output: { schema: GenerateIngredientsListOutputSchema },\n  prompt: `You are a chef. Generate a list of ingredients needed for the dish \"{{dishName}}\" for {{numberOfServings}} servings.\n\nIMPORTANT:\n- The language of the ingredient names and units must always match the language of the dish name. If the dish name is in German, all ingredient names and units must be in German. If the dish name is in English, use English. Do not translate or mix languages.\n- Always include the main protein or key ingredient (e.g., if the dish is \"Palak Chicken\" or \"Chicken Palak\", always include \"Chicken\" as an ingredient).\n\nFor each ingredient, provide its name, quantity (as a number), and unit (e.g., \"g\", \"ml\", \"pcs\", \"kg\").\nNever return a quantity of 0. If unsure, estimate a typical amount for one serving based on common recipes or chef experience.\nReturn the output as a JSON object with a single key \"ingredients\".\nThe \"ingredients\" key should have a value of an array of objects, where each object has \"name\" (string), \"quantity\" (number), and \"unit\" (string) fields.\nBe as accurate as possible.\n\nExample (English):\n{\n  \"ingredients\": [\n    { \"name\": \"Chicken Breast\", \"quantity\": 200, \"unit\": \"g\" },\n    { \"name\": \"Spinach\", \"quantity\": 150, \"unit\": \"g\" },\n    { \"name\": \"Onion\", \"quantity\": 50, \"unit\": \"g\" }\n  ]\n}\n\nExample (German):\n{\n  \"ingredients\": [\n    { \"name\": \"Hähnchenbrust\", \"quantity\": 200, \"unit\": \"g\" },\n    { \"name\": \"Spinat\", \"quantity\": 150, \"unit\": \"g\" },\n    { \"name\": \"Zwiebel\", \"quantity\": 50, \"unit\": \"g\" }\n  ]\n}\n\nEnsure the output strictly follows this JSON format.`,\n});\n\nconst generateIngredientsListFlow = ai.defineFlow(\n  {\n    name: 'generateIngredientsListFlow',\n    inputSchema: GenerateIngredientsListInputSchema,\n    outputSchema: GenerateIngredientsListOutputSchema,\n  },\n  async input => {\n    const { output } = await prompt(input);\n    if (!output) {\n      throw new Error('AI did not return an output.');\n    }\n    return output;\n  }\n);\n\nexport async function generateIngredientsList(input: GenerateIngredientsListInput): Promise<GenerateIngredientsListOutput> {\n  return generateIngredientsListFlow(input);\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAQA,MAAM,SAAS,qHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,2IAAA,CAAA,qCAAkC;IAAC;IACpD,QAAQ;QAAE,QAAQ,2IAAA,CAAA,sCAAmC;IAAC;IACtD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDA8ByC,CAAC;AACrD;AAEA,MAAM,8BAA8B,qHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa,2IAAA,CAAA,qCAAkC;IAC/C,cAAc,2IAAA,CAAA,sCAAmC;AACnD,GACA,OAAM;IACJ,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAGK,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;;;IAFsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 629, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/aiMenuExtractor.ts"],"sourcesContent":["import { ai } from '@/ai/genkit';\nimport { jsonrepair } from 'jsonrepair';\nimport { getInventory } from './inventoryService';\nimport { getDishes } from './menuService';\nimport { generateIngredientsList } from '@/ai/flows/generate-ingredients-list';\n\n/**\n * Last-ditch recovery for broken, truncated Gemini arrays.\n * Cuts off after last valid object and closes with a bracket.\n */\nfunction recoverLongestValidArray(jsonString: string): string {\n  jsonString = jsonString.replace(/,\\s*([\\]}])/g, '$1');\n  let arrStart = jsonString.indexOf('[');\n  let lastObjClose = jsonString.lastIndexOf('}');\n  if (arrStart === -1 || lastObjClose === -1 || lastObjClose < arrStart) return '[]';\n  let cut = jsonString.slice(arrStart, lastObjClose + 1);\n  if (!cut.trim().endsWith(']')) cut += \"\\n]\\n\";\n  return cut;\n}\n\n/**\n * Helper for batching with concurrency limit\n */\nasync function batchWithConcurrencyLimit<T, R>(items: T[], fn: (item: T) => Promise<R>, limit: number): Promise<R[]> {\n  const results: R[] = [];\n  let idx = 0;\n  const executing: Promise<void>[] = [];\n  async function run(item: T, i: number) {\n    results[i] = await fn(item);\n  }\n  while (idx < items.length) {\n    const i = idx;\n    const p = run(items[i], i);\n    executing.push(p);\n    idx++;\n    if (executing.length >= limit) {\n      await Promise.race(executing);\n      // Remove finished\n      for (let j = executing.length - 1; j >= 0; j--) {\n        if (typeof executing[j]?.then === 'function') {\n          executing.splice(j, 1);\n        }\n      }\n    }\n  }\n  await Promise.all(executing);\n  return results;\n}\n\n/**\n * Extracts menu data from a PDF using Gemini and robust post-processing.\n */\nexport async function extractMenuFromPdf({ pdfDataUri, userId, numberOfServings = 1 }: { pdfDataUri: string, userId?: string, numberOfServings?: number }) {\n  const prompt = `\nYou are an expert at reading restaurant menu PDFs in any language (e.g., German, English, French, etc.). Extract every dish, drink, or menu item as a JSON object.\n\nFor each menu item, extract:\n- \"name\": Dish or beverage name, exactly as printed, but **never include the price or currency in the name**. The name must NOT contain any price or currency. Only the actual name, in the original language.\n- \"price\": The price string for the item (e.g., \"3,20 €\", \"2.50 EUR\", \"$4.00\"). If no price, use an empty string.\n- \"category\": Section/category name (e.g., \"Pizza\", \"Biere\", \"Salate\", \"Getränke (Drinks)\"). If not shown, use \"Other\". Always preserve the original language.\n- \"ingredients\": Array of ingredient names if shown in menu. If not listed, use [].\n\n**If a menu item has multiple variants (e.g., sizes or volumes with different prices), group all variants under a single menu item object. Add a 'sizes' array: each entry should have 'size' (exactly as shown in the menu, e.g., '0.3 l') and 'price'. Do not convert, round, or change the size string.**\n\n**Return only a single valid JSON array of objects.** No explanations, no markdown, no text before or after the array.\n\nExample output:\n[\n  {\"name\":\"Coca-Cola\",\"category\":\"Soft Drinks\",\"sizes\":[{\"size\":\"0.3 l\",\"price\":\"2,00 €\"},{\"size\":\"0.5 l\",\"price\":\"3,00 €\"},{\"size\":\"1.0 l\",\"price\":\"5,00 €\"}],\"ingredients\":[]},\n  {\"name\":\"Zwiefalter-Engele, helles Bier\",\"price\":\"3,20 €\",\"category\":\"Biere\",\"ingredients\":[], \"size\": \"0,33l\"},\n  {\"name\":\"Zwiefalter-Urweizen Dunkel\",\"price\":\"4,20 €\",\"category\":\"Biere\",\"ingredients\":[], \"size\": \"0,5l\"},\n  {\"name\":\"Water Bottle\",\"price\":\"2,00 €\",\"category\":\"Getränke (Drinks)\",\"ingredients\":[], \"size\": \"0,3l\"},\n  {\"name\":\"Water Bottle\",\"price\":\"3,00 €\",\"category\":\"Getränke (Drinks)\",\"ingredients\":[], \"size\": \"0,5l\"},\n  {\"name\":\"Chicken Curry\",\"price\":\"10,00 €\",\"category\":\"Spezialitäten vom Huhn mit Reis\",\"ingredients\":[]},\n  {\"name\":\"Chicken Korma\",\"price\":\"10,00 €\",\"category\":\"Spezialitäten vom Huhn mit Reis\",\"ingredients\":[\"Mandeln\", \"Sahne\", \"Kokosnuss\", \"feinen Gewürzen\"]},\n  {\"name\":\"Glas Prosecco 15% vol\",\"price\":\"5,90 €\",\"category\":\"Aperitifs\",\"ingredients\":[], \"size\": \"0,2l\"},\n  {\"name\":\"Indischer Weißwein\",\"price\":\"6,90 €\",\"category\":\"Indische Weine\",\"ingredients\":[], \"size\": \"0,2l\"},\n  {\"name\":\"Indischer Weißwein\",\"price\":\"21,00 €\",\"category\":\"Indische Weine\",\"ingredients\":[], \"size\": \"0,75l\"}\n]\n\n// BAD EXAMPLE (do NOT do this!):\n// {\"name\": \"Water Bottle (0,3l) 2,00 € (0,5l) 3,00 €\", \"price\": \"\", ...}\n`;\n\n  // Call Gemini via Genkit\n  const result = await ai.generate([\n    { text: prompt },\n    { media: { url: pdfDataUri } }\n  ]);\n  console.log('GENKIT RAW RESULT:', result);\n\n  // Extract text, from code block or raw\n  let text = typeof result.text === 'string' ? result.text : '';\n  let cleanText = '';\n  const jsonMatch = text.match(/```json([\\s\\S]*?)```/) || text.match(/```([\\s\\S]*?)```/);\n  if (jsonMatch) {\n    cleanText = jsonMatch[1].trim();\n  } else {\n    cleanText = text.trim();\n  }\n\n  // Remove trailing code fences and comments, just in case\n  cleanText = cleanText\n    .replace(/```/g, '')\n    .replace(/^\\s*\\/\\/.*$/gm, '')\n    .trim();\n\n  // DEBUG: See what we are trying to parse\n  console.log('CLEAN JSON TO PARSE:', cleanText);\n\n  let items: any[] = [];\n  try {\n    // 1. Try straight parse\n    items = JSON.parse(cleanText);\n  } catch (e) {\n    // 2. Try jsonrepair\n    try {\n      items = JSON.parse(jsonrepair(cleanText));\n    } catch (e2) {\n      // 3. Try best-effort recovery for truncation\n      try {\n        const partial = recoverLongestValidArray(cleanText);\n        items = JSON.parse(partial);\n      } catch (e3) {\n        // 4. Give up, show nothing\n        items = [];\n      }\n    }\n  }\n\n  // Post-process: If a single item contains multiple variants in price or name, split them into separate items\n  const variantRegex = /([0-9]+[\\.,][0-9]+\\s*(l|cl|ml|g|kg|L|CL|ML|G|KG)?)[^\\d]*(\\d+[\\.,]\\d+\\s*(€|EUR|USD|GBP|\\$))/gi;\n  let expanded: any[] = [];\n  for (const item of items) {\n    if (item && typeof item.price === 'string' && variantRegex.test(item.price)) {\n      // e.g. price: \"(0,3l) 2,00 € (0,5l) 3,00 €\"\n      const matches = [...item.price.matchAll(variantRegex)];\n      if (matches.length > 1) {\n        for (const match of matches) {\n          expanded.push({\n            ...item,\n            price: match[3].trim(),\n            size: match[1].trim(),\n          });\n        }\n        continue;\n      }\n    }\n    expanded.push(item);\n  }\n\n  // Post-process: If price is missing but name contains a price, extract it\n  const priceRegex = /[-–—]\\s*(\\d+[\\.,]\\d+)\\s*(EUR|USD|GBP|€|\\$)?/i;\n  const processed = Array.isArray(expanded) ? expanded.map((item) => {\n    if (item && typeof item.name === 'string' && (!item.price || item.price === '')) {\n      const match = item.name.match(priceRegex);\n      if (match) {\n        const priceStr = match[1] + (match[2] ? ' ' + match[2] : '');\n        return {\n          ...item,\n          price: priceStr.trim(),\n          name: item.name.replace(priceRegex, '').trim().replace(/[-–—]\\s*$/, '').trim(),\n        };\n      }\n    }\n    return item;\n  }) : [];\n\n  // Only filter for valid name field\n  const filtered = Array.isArray(processed) ? processed.filter(\n    (item) => item && typeof item.name === 'string' && item.name.length > 0\n  ) : [];\n\n  // Merge items with same name/category into a single object with sizes array\n  const mergedMap = new Map();\n  for (const item of filtered) {\n    const key = `${item.name}||${item.category}`;\n    if (!mergedMap.has(key)) {\n      // Start new entry\n      mergedMap.set(key, {\n        ...item,\n        sizes: item.size || item.sizes ? [] : undefined,\n      });\n    }\n    const merged = mergedMap.get(key);\n    // If item has size/price, add to sizes array\n    if (item.size || (item.price && item.price !== '')) {\n      if (!merged.sizes) merged.sizes = [];\n      merged.sizes.push({\n        size: item.size || (item.sizes && item.sizes[0]?.size) || '',\n        price: item.price || (item.sizes && item.sizes[0]?.price) || '',\n      });\n    }\n  }\n  // Finalize merged list\n  const merged = Array.from(mergedMap.values()).map(item => {\n    if (item.sizes && item.sizes.length === 1 && (!item.sizes[0].size || item.sizes[0].size.trim() === '')) {\n      // Only one size and it's empty: move price to top-level\n      return { ...item, price: item.sizes[0].price, sizes: undefined };\n    } else if (item.sizes && item.sizes.length > 0) {\n      // Remove top-level price/size if multiple sizes\n      const { price, size, ...rest } = item;\n      return { ...rest, sizes: item.sizes };\n    } else {\n      // Single size or no sizes\n      return item;\n    }\n  });\n\n  // After merging and before returning, ensure every item has a unique id\n  const mergedWithIds = merged.map(item => {\n    if (item.id && typeof item.id === 'string' && item.id.length > 0) return item;\n    // Generate a unique id from name, category, price, and size (if present)\n    let id = `${item.name}__${item.category}`;\n    if (item.price) id += `__${item.price}`;\n    if (item.size) id += `__${item.size}`;\n    if (item.sizes && Array.isArray(item.sizes) && item.sizes.length > 0) {\n      id += '__' + item.sizes.map((sz: { size: string; price: string }) => `${sz.size}_${sz.price}`).join('__');\n    }\n    return { ...item, id };\n  });\n\n  // Ingredient enrichment logic\n  let inventory: any[] = [];\n  let menuDishes: any[] = [];\n  if (userId) {\n    try { inventory = getInventory(userId); } catch {}\n    try { menuDishes = getDishes(userId); } catch {}\n  }\n\n  // Helper to find ingredient with quantity in inventory or menu\n  function findIngredientWithQuantity(ingredientName: string): { name: string, quantity: number, unit: string } | null {\n    // Check inventory\n    if (inventory && Array.isArray(inventory)) {\n      const inv = inventory.find(i => i.name.toLowerCase() === ingredientName.toLowerCase());\n      if (inv && inv.quantity && inv.unit) {\n        return { name: inv.name, quantity: inv.quantity, unit: inv.unit };\n      }\n    }\n    // Check menu\n    if (menuDishes && Array.isArray(menuDishes)) {\n      for (const dish of menuDishes) {\n        if (dish.ingredients && Array.isArray(dish.ingredients)) {\n          for (const ing of dish.ingredients) {\n            if (typeof ing === 'object' && ing.inventoryItemName && ing.inventoryItemName.toLowerCase() === ingredientName.toLowerCase()) {\n              return { name: ing.inventoryItemName, quantity: ing.quantityPerDish, unit: ing.unit };\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  // Collect all AI ingredient generation tasks\n  const aiTasks: { idx: number, name: string, missing: string[] }[] = [];\n  for (let i = 0; i < mergedWithIds.length; i++) {\n    const item = mergedWithIds[i];\n    if (item.ingredients && Array.isArray(item.ingredients) && item.ingredients.length > 0) {\n      const missing: string[] = [];\n      for (const ing of item.ingredients) {\n        let found = findIngredientWithQuantity(ing);\n        if (!found) missing.push(ing);\n      }\n      if (missing.length > 0) {\n        aiTasks.push({ idx: i, name: item.name, missing });\n      }\n    } else if (item.name) {\n      aiTasks.push({ idx: i, name: item.name, missing: [] });\n    }\n  }\n\n  // Batch AI calls for ingredient generation (concurrency limit 5)\n  const aiResults = await batchWithConcurrencyLimit(aiTasks, async (task) => {\n    try {\n      return await generateIngredientsList({ dishName: task.name, numberOfServings });\n    } catch {\n      return { ingredients: [] };\n    }\n  }, 5);\n\n  // Map AI results back to menu items\n  for (let i = 0; i < aiTasks.length; i++) {\n    const { idx, missing } = aiTasks[i];\n    const aiResult = aiResults[i];\n    if (!mergedWithIds[idx].ingredients || mergedWithIds[idx].ingredients.length === 0) {\n      // No ingredients, use full AI list\n      // Normalize to { inventoryItemName, quantityPerDish, unit }\n      mergedWithIds[idx].ingredients = aiResult.ingredients.map((ing: any) => ({\n        inventoryItemName: ing.name,\n        quantityPerDish: ing.quantity,\n        unit: ing.unit\n      }));\n    } else {\n      // If original ingredients are just names (strings), and AI returns objects, use AI's list directly\n      if (\n        Array.isArray(mergedWithIds[idx].ingredients) &&\n        mergedWithIds[idx].ingredients.every((ing: any) => typeof ing === 'string') &&\n        Array.isArray(aiResult.ingredients) &&\n        aiResult.ingredients.length > 0 &&\n        aiResult.ingredients.every((aii: any) => typeof aii === 'object' && 'name' in aii && 'quantity' in aii && 'unit' in aii)\n      ) {\n        mergedWithIds[idx].ingredients = aiResult.ingredients;\n      } else {\n        // Only fill in missing ingredients\n        const enriched: any[] = [];\n        for (const ing of mergedWithIds[idx].ingredients) {\n          let found = findIngredientWithQuantity(ing);\n          if (found) {\n            enriched.push(found);\n          } else {\n            // Find in AI result\n            const aiIng = aiResult.ingredients.find(aii => aii.name.toLowerCase() === (typeof ing === 'string' ? ing.toLowerCase() : ''));\n            if (aiIng) {\n              enriched.push(aiIng);\n            } else {\n              enriched.push({ name: typeof ing === 'string' ? ing : '', quantity: 0, unit: '' });\n            }\n          }\n        }\n        // Normalize to { inventoryItemName, quantityPerDish, unit }\n        mergedWithIds[idx].ingredients = enriched.map((ing: any) => ({\n          inventoryItemName: ing.name,\n          quantityPerDish: ing.quantity,\n          unit: ing.unit\n        }));\n      }\n    }\n  }\n\n  return mergedWithIds;\n}\n\n// Alias for compatibility with API handler\nexport async function extractMenuItemsFromPdfWithGemini(buffer: Buffer): Promise<any[]> {\n  // Convert buffer to data URI\n  const pdfDataUri = `data:application/pdf;base64,${buffer.toString('base64')}`;\n  const items = await extractMenuFromPdf({ pdfDataUri });\n  return items;\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 996, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/menuCsv/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { parse as csvParse } from 'csv-parse/sync';\nimport { extractMenuItemsFromPdfWithGemini } from '@/lib/aiMenuExtractor';\nimport fs from 'fs';\nimport path from 'path';\n\nconst MENU_JSON_PATH = path.join(process.cwd(), 'menu-data.json');\n\nexport async function GET() {\n  // Return saved menu items for Order Entry\n  try {\n    if (fs.existsSync(MENU_JSON_PATH)) {\n      const data = fs.readFileSync(MENU_JSON_PATH, 'utf-8');\n      const menu = JSON.parse(data);\n      return NextResponse.json({ menu });\n    }\n    return NextResponse.json({ menu: [] });\n  } catch (err) {\n    return NextResponse.json({ menu: [] });\n  }\n}\n\nexport const runtime = 'nodejs'; // Ensure Node.js APIs are available\n\nexport async function POST(request: Request) {\n  // If JSON, handle save or delete\n  const url = new URL(request.url, 'http://localhost');\n  const action = url.searchParams.get('action');\n  if (action === 'delete') {\n    if (fs.existsSync(MENU_JSON_PATH)) {\n      fs.unlinkSync(MENU_JSON_PATH);\n    }\n    return NextResponse.json({ success: true });\n  }\n\n  const contentType = request.headers.get('content-type') || '';\n  if (contentType.includes('application/json')) {\n    const body = await request.json();\n    if (body.action === 'save' && Array.isArray(body.menuItems)) {\n      // Save menuItems to file\n      fs.writeFileSync(MENU_JSON_PATH, JSON.stringify(body.menuItems, null, 2), 'utf-8');\n      return NextResponse.json({ success: true });\n    }\n    return NextResponse.json({ error: 'Invalid save request' }, { status: 400 });\n  }\n\n  const formData = await request.formData();\n  const file = formData.get('file');\n\n  if (!file || typeof file === 'string') {\n    return NextResponse.json({ error: 'No file uploaded.' }, { status: 400 });\n  }\n\n  const arrayBuffer = await file.arrayBuffer();\n  const buffer = Buffer.from(arrayBuffer);\n  const filename = (file as any).name || '';\n  const isPdf = filename.toLowerCase().endsWith('.pdf');\n  const isCsv = filename.toLowerCase().endsWith('.csv');\n\n  let menuItems = [];\n  try {\n    if (isPdf) {\n      // Use Gemini for PDF extraction\n      menuItems = await extractMenuItemsFromPdfWithGemini(buffer);\n    } else if (isCsv) {\n      // Parse CSV\n      const csvText = buffer.toString('utf-8');\n      menuItems = csvParse(csvText, { columns: true, skip_empty_lines: true });\n    } else {\n      return NextResponse.json({ error: 'Unsupported file type. Please upload a PDF or CSV.' }, { status: 400 });\n    }\n    // Do NOT write extracted menuItems to file here (revert to old flow)\n    return NextResponse.json({ menuItems });\n  } catch (error) {\n    return NextResponse.json({ error: (error as Error).message || 'Failed to extract menu items.' }, { status: 500 });\n  }\n}\n\n// Function to clean menu item names by removing price information\nfunction cleanMenuItemName(name: string): string {\n  if (!name) return name;\n  \n  // Remove price patterns like \"- 12.90 EUR\", \"- $12.90\", \"- 12.90\", \"- \u001c12.90\"\n  return name\n    .replace(/\\s*-\\s*\\d+[\\.,]\\d+\\s*(EUR|USD|GBP|  |$  |  )\\s*$/i, '') // Remove \"- 12.90 EUR\" patterns\n    .replace(/\\s*-\\s*\\d+[\\.,]\\d+\\s*$/i, '') // Remove \"- 12.90\" patterns  \n    .replace(/\\s*\\(\\d+[\\.,]\\d+\\s*(EUR|USD|GBP|  |$  |  )\\)\\s*$/i, '') // Remove \"(12.90 EUR)\" patterns\n    .replace(/\\s*\\$\\d+[\\.,]\\d+\\s*$/i, '') // Remove \"$12.90\" patterns\n    .replace(/\\s*  \\d+[\\.,]\\d+\\s*$/i, '') // Remove \" 12.90\" patterns\n    .replace(/\\s*  \\d+[\\.,]\\d+\\s*$/i, '') // Remove \" 12.90\" patterns\n    .trim();\n}\n\n// ... (rest of the code from the Noman branch version) ... "],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAEA,MAAM,iBAAiB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAEzC,eAAe;IACpB,0CAA0C;IAC1C,IAAI;QACF,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,iBAAiB;YACjC,MAAM,OAAO,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,gBAAgB;YAC7C,MAAM,OAAO,KAAK,KAAK,CAAC;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE;YAAK;QAClC;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM,EAAE;QAAC;IACtC,EAAE,OAAO,KAAK;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM,EAAE;QAAC;IACtC;AACF;AAEO,MAAM,UAAU,UAAU,oCAAoC;AAE9D,eAAe,KAAK,OAAgB;IACzC,iCAAiC;IACjC,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG,EAAE;IACjC,MAAM,SAAS,IAAI,YAAY,CAAC,GAAG,CAAC;IACpC,IAAI,WAAW,UAAU;QACvB,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,iBAAiB;YACjC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC;QAChB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C;IAEA,MAAM,cAAc,QAAQ,OAAO,CAAC,GAAG,CAAC,mBAAmB;IAC3D,IAAI,YAAY,QAAQ,CAAC,qBAAqB;QAC5C,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,IAAI,KAAK,MAAM,KAAK,UAAU,MAAM,OAAO,CAAC,KAAK,SAAS,GAAG;YAC3D,yBAAyB;YACzB,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,gBAAgB,KAAK,SAAS,CAAC,KAAK,SAAS,EAAE,MAAM,IAAI;YAC1E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAK;QAC3C;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;IAEA,MAAM,WAAW,MAAM,QAAQ,QAAQ;IACvC,MAAM,OAAO,SAAS,GAAG,CAAC;IAE1B,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,cAAc,MAAM,KAAK,WAAW;IAC1C,MAAM,SAAS,OAAO,IAAI,CAAC;IAC3B,MAAM,WAAW,AAAC,KAAa,IAAI,IAAI;IACvC,MAAM,QAAQ,SAAS,WAAW,GAAG,QAAQ,CAAC;IAC9C,MAAM,QAAQ,SAAS,WAAW,GAAG,QAAQ,CAAC;IAE9C,IAAI,YAAY,EAAE;IAClB,IAAI;QACF,IAAI,OAAO;YACT,gCAAgC;YAChC,YAAY,MAAM,CAAA,GAAA,+HAAA,CAAA,oCAAiC,AAAD,EAAE;QACtD,OAAO,IAAI,OAAO;YAChB,YAAY;YACZ,MAAM,UAAU,OAAO,QAAQ,CAAC;YAChC,YAAY,CAAA,GAAA,6JAAA,CAAA,QAAQ,AAAD,EAAE,SAAS;gBAAE,SAAS;gBAAM,kBAAkB;YAAK;QACxE,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqD,GAAG;gBAAE,QAAQ;YAAI;QAC1G;QACA,qEAAqE;QACrE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAU;IACvC,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,AAAC,MAAgB,OAAO,IAAI;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACjH;AACF;AAEA,kEAAkE;AAClE,SAAS,kBAAkB,IAAY;IACrC,IAAI,CAAC,MAAM,OAAO;IAElB,8EAA8E;IAC9E,OAAO,KACJ,OAAO,CAAC,qDAAqD,IAAI,gCAAgC;KACjG,OAAO,CAAC,2BAA2B,IAAI,8BAA8B;KACrE,OAAO,CAAC,qDAAqD,IAAI,gCAAgC;KACjG,OAAO,CAAC,yBAAyB,IAAI,2BAA2B;KAChE,OAAO,CAAC,yBAAyB,IAAI,2BAA2B;KAChE,OAAO,CAAC,yBAAyB,IAAI,2BAA2B;KAChE,IAAI;AACT,EAEA,4DAA4D","debugId":null}}]
}