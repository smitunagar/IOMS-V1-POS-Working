{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/waste/seed/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction getRandomInt(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction getRandomElement<T>(array: T[]): T {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n\r\nfunction calculateCO2FromWaste(amountKg: number, type: string): number {\r\n  const co2Factors = {\r\n    food: 2.5,\r\n    oil: 3.2,\r\n    packaging: 1.8,\r\n    organic: 2.1\r\n  };\r\n  return amountKg * (co2Factors[type as keyof typeof co2Factors] || 2.0);\r\n}\r\n\r\nfunction calculateCostFromWaste(amountKg: number, type: string): number {\r\n  const costFactors = {\r\n    food: 12.50,\r\n    oil: 8.75,\r\n    packaging: 5.20,\r\n    organic: 6.80\r\n  };\r\n  return amountKg * (costFactors[type as keyof typeof costFactors] || 8.0);\r\n}\r\n\r\nexport async function POST() {\r\n  try {\r\n    // Clear existing data\r\n    await prisma.wasteEvent.deleteMany();\r\n    await prisma.coverCount.deleteMany();\r\n    await prisma.complianceCheck.deleteMany();\r\n\r\n    console.log('Creating sample waste events...');\r\n\r\n    const wasteTypes = ['food', 'oil', 'packaging', 'organic'];\r\n    const stations = ['kitchen', 'bar', 'dining'];\r\n    const now = new Date();\r\n    \r\n    // Create waste events for the last 30 days\r\n    const wasteEvents = [];\r\n    for (let i = 0; i < 30; i++) {\r\n      const date = new Date(now);\r\n      date.setDate(date.getDate() - i);\r\n      \r\n      // Create 3-8 events per day\r\n      const eventsPerDay = getRandomInt(3, 8);\r\n      \r\n      for (let j = 0; j < eventsPerDay; j++) {\r\n        const eventTime = new Date(date);\r\n        eventTime.setHours(getRandomInt(8, 23), getRandomInt(0, 59));\r\n        \r\n        const type = getRandomElement(wasteTypes);\r\n        const station = getRandomElement(stations);\r\n        const amountKg = getRandomFloat(0.5, 15.0);\r\n        const costEUR = calculateCostFromWaste(amountKg, type);\r\n        const co2Kg = calculateCO2FromWaste(amountKg, type);\r\n        \r\n        wasteEvents.push({\r\n          amountKg,\r\n          type,\r\n          station,\r\n          costEUR,\r\n          co2Kg,\r\n          occurredAt: eventTime,\r\n          createdAt: eventTime,\r\n          confidence: getRandomFloat(0.7, 0.95),\r\n          notes: `Waste logged from ${station} - ${type}`\r\n        });\r\n      }\r\n    }\r\n\r\n    // Insert waste events in batches\r\n    for (let i = 0; i < wasteEvents.length; i += 50) {\r\n      const batch = wasteEvents.slice(i, i + 50);\r\n      await prisma.wasteEvent.createMany({\r\n        data: batch\r\n      });\r\n    }\r\n\r\n    console.log(`Created ${wasteEvents.length} waste events`);\r\n\r\n    // Create cover counts for the last 30 days\r\n    const coverCounts = [];\r\n    for (let i = 0; i < 30; i++) {\r\n      const date = new Date(now);\r\n      date.setDate(date.getDate() - i);\r\n      date.setHours(0, 0, 0, 0);\r\n      \r\n      const covers = getRandomInt(45, 120);\r\n      const avgSpend = getRandomFloat(25, 45);\r\n      const revenue = covers * avgSpend;\r\n      \r\n      coverCounts.push({\r\n        date,\r\n        covers,\r\n        revenue,\r\n        createdAt: date\r\n      });\r\n    }\r\n\r\n    await prisma.coverCount.createMany({\r\n      data: coverCounts\r\n    });\r\n\r\n    console.log(`Created ${coverCounts.length} cover count records`);\r\n\r\n    // Create sample compliance checks\r\n    const complianceChecks = [\r\n      {\r\n        title: 'Daily waste logging completed',\r\n        description: 'Ensure all waste events are properly logged',\r\n        severity: 'major',\r\n        status: 'closed',\r\n        dueDate: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),\r\n        completedAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000)\r\n      },\r\n      {\r\n        title: 'Waste segregation audit',\r\n        description: 'Verify proper waste segregation practices',\r\n        severity: 'critical',\r\n        status: 'in_progress',\r\n        dueDate: new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000)\r\n      },\r\n      {\r\n        title: 'Staff training compliance',\r\n        description: 'Complete waste management training for new staff',\r\n        severity: 'minor',\r\n        status: 'open',\r\n        dueDate: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)\r\n      },\r\n      {\r\n        title: 'Monthly waste report submission',\r\n        description: 'Submit monthly waste report to authorities',\r\n        severity: 'major',\r\n        status: 'open',\r\n        dueDate: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000)\r\n      }\r\n    ];\r\n\r\n    await prisma.complianceCheck.createMany({\r\n      data: complianceChecks\r\n    });\r\n\r\n    console.log(`Created ${complianceChecks.length} compliance checks`);\r\n\r\n    // Calculate summary statistics\r\n    const totalEvents = await prisma.wasteEvent.count();\r\n    const totalWaste = await prisma.wasteEvent.aggregate({\r\n      _sum: {\r\n        amountKg: true,\r\n        costEUR: true,\r\n        co2Kg: true\r\n      }\r\n    });\r\n    \r\n    const totalCovers = await prisma.coverCount.aggregate({\r\n      _sum: {\r\n        covers: true,\r\n        revenue: true\r\n      }\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Sample data created successfully',\r\n      summary: {\r\n        wasteEvents: totalEvents,\r\n        totalWasteKg: totalWaste._sum.amountKg?.toFixed(2),\r\n        totalCostEUR: totalWaste._sum.costEUR?.toFixed(2),\r\n        totalCO2Kg: totalWaste._sum.co2Kg?.toFixed(2),\r\n        totalCovers: totalCovers._sum.covers,\r\n        totalRevenue: totalCovers._sum.revenue?.toFixed(2),\r\n        complianceChecks: complianceChecks.length\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error seeding data:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to seed data',\r\n        details: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}