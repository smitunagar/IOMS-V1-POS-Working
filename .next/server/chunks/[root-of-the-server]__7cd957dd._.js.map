{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/inventoryService.ts"],"sourcesContent":["// Inventory Service\n// Provides functions to manage inventory in localStorage\n\nexport interface InventoryItem {\n  id: string;\n  name: string;\n  quantity: number;\n  unit: string;\n  category?: string;\n  lowStockThreshold?: number;\n  expiryDate?: string;\n  image?: string;\n  aiHint?: string;\n  quantityUsed?: number;\n  totalUsed?: number;\n}\n\nconst INVENTORY_KEY_PREFIX = 'inventory_';\n\nexport function getInventory(userId: string): InventoryItem[] {\n  if (typeof window === 'undefined') return [];\n  const data = localStorage.getItem(INVENTORY_KEY_PREFIX + userId);\n  if (!data) return [];\n  try {\n    return JSON.parse(data) as InventoryItem[];\n  } catch {\n    return [];\n  }\n}\n\nexport function addInventoryItem(userId: string, item: InventoryItem): InventoryItem | null {\n  if (typeof window === 'undefined') return null;\n  const inventory = getInventory(userId);\n  const newItem = { ...item, id: item.id || Date.now().toString(), quantityUsed: item.quantityUsed || 0, totalUsed: item.totalUsed || 0 };\n  inventory.push(newItem);\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\n  return newItem;\n}\n\nexport function updateInventoryItem(userId: string, item: InventoryItem): boolean {\n  if (typeof window === 'undefined') return false;\n  const inventory = getInventory(userId);\n  const idx = inventory.findIndex(i => i.id === item.id);\n  if (idx === -1) return false;\n  inventory[idx] = item;\n  // Always persist the updated inventory array\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\n  return true;\n}\n\nexport function removeInventoryItem(userId: string, itemId: string): boolean {\n  if (typeof window === 'undefined') return false;\n  const inventory = getInventory(userId);\n  const newInventory = inventory.filter(i => i.id !== itemId);\n  if (newInventory.length === inventory.length) return false;\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(newInventory));\n  return true;\n}\n\nexport function addOrUpdateIngredientInInventory(userId: string, ingredient: InventoryItem): InventoryItem {\n  const inventory = getInventory(userId);\n  const idx = inventory.findIndex(i => i.name.toLowerCase() === ingredient.name.toLowerCase());\n  if (idx !== -1) {\n    inventory[idx] = { ...inventory[idx], ...ingredient, quantityUsed: inventory[idx].quantityUsed || 0, totalUsed: inventory[idx].totalUsed || 0 };\n  } else {\n    inventory.push({ ...ingredient, id: ingredient.id || Date.now().toString(), quantityUsed: ingredient.quantityUsed || 0, totalUsed: ingredient.totalUsed || 0 });\n  }\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\n  return ingredient;\n}\n\nexport function addIngredientToInventoryIfNotExists(userId: string, ingredient: InventoryItem): boolean {\n  const inventory = getInventory(userId);\n  const exists = inventory.some(i => i.name.toLowerCase() === ingredient.name.toLowerCase());\n  if (!exists) {\n    addInventoryItem(userId, ingredient);\n    return true;\n  }\n  return false;\n}\n\nexport function getInventoryAlerts(userId: string): string[] {\n  const inventory = getInventory(userId);\n  return inventory.filter(i => i.lowStockThreshold && i.quantity <= i.lowStockThreshold)\n    .map(i => `Low stock: ${i.name} (${i.quantity} ${i.unit})`);\n}\n\nexport function updateInventoryAlerts(userId: string): void {\n  if (typeof window === 'undefined') return;\n  // Placeholder: In a real app, this would update alert state in a DB or context\n  // For now, just triggers a localStorage event\n  localStorage.setItem('inventory_alerts_' + userId, Date.now().toString());\n}\n\nexport function saveInventory(userId: string, inventory: InventoryItem[]): void {\n  localStorage.setItem(INVENTORY_KEY_PREFIX + userId, JSON.stringify(inventory));\n}\n\n// Inventory alert type for low stock notifications\nexport interface InventoryAlert {\n  itemId: string;\n  itemName: string;\n  quantity: number;\n  unit: string;\n  message: string;\n}\n\n// Generate inventory alerts for low stock items\nexport function getInventoryAlertsDetailed(userId: string): InventoryAlert[] {\n  const inventory = getInventory(userId);\n  return inventory\n    .filter(i => i.lowStockThreshold !== undefined && i.quantity <= (i.lowStockThreshold ?? 0))\n    .map(i => ({\n      itemId: i.id,\n      itemName: i.name,\n      quantity: i.quantity,\n      unit: i.unit,\n      message: `Low stock: ${i.name} (${i.quantity} ${i.unit})`,\n    }));\n}\n\n// Placeholder for recordIngredientUsage to resolve import in posInventoryIntegration\nexport function recordIngredientUsage(userId: string, dish: any, quantity: number): void {\n  // No-op placeholder\n} "],"names":[],"mappings":"AAAA,oBAAoB;AACpB,yDAAyD;;;;;;;;;;;;;;AAgBzD,MAAM,uBAAuB;AAEtB,SAAS,aAAa,MAAc;IACzC,wCAAmC,OAAO,EAAE;;IAC5C,MAAM;AAOR;AAEO,SAAS,iBAAiB,MAAc,EAAE,IAAmB;IAClE,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,oBAAoB,MAAc,EAAE,IAAmB;IACrE,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAMR;AAEO,SAAS,oBAAoB,MAAc,EAAE,MAAc;IAChE,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,iCAAiC,MAAc,EAAE,UAAyB;IACxF,MAAM,YAAY,aAAa;IAC/B,MAAM,MAAM,UAAU,SAAS,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,WAAW,OAAO,WAAW,IAAI,CAAC,WAAW;IACzF,IAAI,QAAQ,CAAC,GAAG;QACd,SAAS,CAAC,IAAI,GAAG;YAAE,GAAG,SAAS,CAAC,IAAI;YAAE,GAAG,UAAU;YAAE,cAAc,SAAS,CAAC,IAAI,CAAC,YAAY,IAAI;YAAG,WAAW,SAAS,CAAC,IAAI,CAAC,SAAS,IAAI;QAAE;IAChJ,OAAO;QACL,UAAU,IAAI,CAAC;YAAE,GAAG,UAAU;YAAE,IAAI,WAAW,EAAE,IAAI,KAAK,GAAG,GAAG,QAAQ;YAAI,cAAc,WAAW,YAAY,IAAI;YAAG,WAAW,WAAW,SAAS,IAAI;QAAE;IAC/J;IACA,aAAa,OAAO,CAAC,uBAAuB,QAAQ,KAAK,SAAS,CAAC;IACnE,OAAO;AACT;AAEO,SAAS,oCAAoC,MAAc,EAAE,UAAyB;IAC3F,MAAM,YAAY,aAAa;IAC/B,MAAM,SAAS,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,WAAW,OAAO,WAAW,IAAI,CAAC,WAAW;IACvF,IAAI,CAAC,QAAQ;QACX,iBAAiB,QAAQ;QACzB,OAAO;IACT;IACA,OAAO;AACT;AAEO,SAAS,mBAAmB,MAAc;IAC/C,MAAM,YAAY,aAAa;IAC/B,OAAO,UAAU,MAAM,CAAC,CAAA,IAAK,EAAE,iBAAiB,IAAI,EAAE,QAAQ,IAAI,EAAE,iBAAiB,EAClF,GAAG,CAAC,CAAA,IAAK,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;AAC9D;AAEO,SAAS,sBAAsB,MAAc;IAClD,wCAAmC;;AAIrC;AAEO,SAAS,cAAc,MAAc,EAAE,SAA0B;IACtE,aAAa,OAAO,CAAC,uBAAuB,QAAQ,KAAK,SAAS,CAAC;AACrE;AAYO,SAAS,2BAA2B,MAAc;IACvD,MAAM,YAAY,aAAa;IAC/B,OAAO,UACJ,MAAM,CAAC,CAAA,IAAK,EAAE,iBAAiB,KAAK,aAAa,EAAE,QAAQ,IAAI,CAAC,EAAE,iBAAiB,IAAI,CAAC,GACxF,GAAG,CAAC,CAAA,IAAK,CAAC;YACT,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,IAAI;YAChB,UAAU,EAAE,QAAQ;YACpB,MAAM,EAAE,IAAI;YACZ,SAAS,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3D,CAAC;AACL;AAGO,SAAS,sBAAsB,MAAc,EAAE,IAAS,EAAE,QAAgB;AAC/E,oBAAoB;AACtB","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/lib/menuService.ts"],"sourcesContent":["// Menu Service\n// Provides functions to manage menu items in localStorage\n\nexport interface IngredientQuantity {\n  inventoryItemName: string;\n  quantityPerDish: number;\n  unit: string;\n}\n\nexport interface MenuItem {\n  id: string;\n  name: string;\n  price: number;\n  category?: string;\n  ingredients?: (string | IngredientQuantity)[];\n  image?: string;\n  aiHint?: string;\n}\n\nexport interface Dish {\n  id: string;\n  name: string;\n  price: number;\n  category?: string;\n  ingredients?: (string | IngredientQuantity)[];\n  image?: string;\n  aiHint?: string;\n}\n\nconst MENU_KEY_PREFIX = 'menu_';\n\nexport function getDishes(userId: string): MenuItem[] {\n  if (typeof window === 'undefined') return [];\n  const data = localStorage.getItem(MENU_KEY_PREFIX + userId);\n  if (!data) return [];\n  try {\n    return JSON.parse(data) as MenuItem[];\n  } catch {\n    return [];\n  }\n}\n\nexport function saveDishes(userId: string, dishes: MenuItem[]): void {\n  localStorage.setItem(MENU_KEY_PREFIX + userId, JSON.stringify(dishes));\n}\n\nexport function addDish(userId: string, dish: MenuItem): MenuItem | null {\n  if (typeof window === 'undefined') return null;\n  const dishes = getDishes(userId);\n  const newDish = { ...dish, id: dish.id || Date.now().toString() };\n  dishes.push(newDish);\n  saveDishes(userId, dishes);\n  return newDish;\n}\n\nexport function updateDish(userId: string, dish: MenuItem): boolean {\n  if (typeof window === 'undefined') return false;\n  const dishes = getDishes(userId);\n  const idx = dishes.findIndex(d => d.id === dish.id);\n  if (idx === -1) return false;\n  dishes[idx] = dish;\n  saveDishes(userId, dishes);\n  return true;\n}\n\nexport function removeDish(userId: string, dishId: string): boolean {\n  if (typeof window === 'undefined') return false;\n  const dishes = getDishes(userId);\n  const newDishes = dishes.filter(d => d.id !== dishId);\n  if (newDishes.length === dishes.length) return false;\n  saveDishes(userId, newDishes);\n  return true;\n}\n\nexport const addDishToMenu = addDish; "],"names":[],"mappings":"AAAA,eAAe;AACf,0DAA0D;;;;;;;;;AA4B1D,MAAM,kBAAkB;AAEjB,SAAS,UAAU,MAAc;IACtC,wCAAmC,OAAO,EAAE;;IAC5C,MAAM;AAOR;AAEO,SAAS,WAAW,MAAc,EAAE,MAAkB;IAC3D,aAAa,OAAO,CAAC,kBAAkB,QAAQ,KAAK,SAAS,CAAC;AAChE;AAEO,SAAS,QAAQ,MAAc,EAAE,IAAc;IACpD,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,SAAS,WAAW,MAAc,EAAE,IAAc;IACvD,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAKR;AAEO,SAAS,WAAW,MAAc,EAAE,MAAc;IACvD,wCAAmC,OAAO;;IAC1C,MAAM;IACN,MAAM;AAIR;AAEO,MAAM,gBAAgB","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/orders/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getInventory, updateInventoryAlerts } from '@/lib/inventoryService';\nimport { getDishes } from '@/lib/menuService';\n\n// Sample orders data\nlet orders = [\n  {\n    id: 'order_001',\n    orderType: 'dine-in',\n    status: 'Completed',\n    customerInfo: { tableNumber: '1' },\n    items: [\n      { name: 'Chicken Curry', quantity: 1, unitPrice: 10.00 },\n      { name: 'Naan Bread', quantity: 2, unitPrice: 2.00 }\n    ],\n    totalAmount: 14.00,\n    createdAt: '2024-01-15T10:30:00Z',\n    completedAt: '2024-01-15T11:15:00Z',\n    paymentMode: 'card',\n    tipAmount: 2.00,\n    amountPaid: 16.00\n  },\n  {\n    id: 'order_002',\n    orderType: 'delivery',\n    status: 'Completed',\n    customerInfo: { name: 'John Doe', address: '123 Main St' },\n    items: [\n      { name: 'Fish Curry', quantity: 1, unitPrice: 10.50 },\n      { name: 'Naan Bread', quantity: 2, unitPrice: 2.00 }\n    ],\n    totalAmount: 14.50,\n    createdAt: '2024-01-15T12:00:00Z',\n    completedAt: '2024-01-15T12:45:00Z',\n    paymentMode: 'cash',\n    tipAmount: 1.50,\n    amountPaid: 16.00\n  },\n  {\n    id: 'order_003',\n    orderType: 'dine-in',\n    status: 'Completed',\n    customerInfo: { tableNumber: '3' },\n    items: [\n      { name: 'Lamb Korma', quantity: 1, unitPrice: 11.00 },\n      { name: 'Dal Channa', quantity: 1, unitPrice: 10.00 },\n      { name: 'Coca Cola', quantity: 2, unitPrice: 2.50 }\n    ],\n    totalAmount: 26.00,\n    createdAt: '2024-01-15T13:15:00Z',\n    completedAt: '2024-01-15T14:30:00Z',\n    paymentMode: 'card',\n    tipAmount: 3.00,\n    amountPaid: 29.00\n  },\n  {\n    id: 'order_004',\n    orderType: 'take-away',\n    status: 'Pending',\n    customerInfo: { name: 'Sarah Johnson', phone: '+49 123 456 789' },\n    items: [\n      { name: 'Chicken Tikka Masala', quantity: 1, unitPrice: 12.00 },\n      { name: 'Rice', quantity: 1, unitPrice: 3.00 },\n      { name: 'Mango Lassi', quantity: 1, unitPrice: 4.50 }\n    ],\n    totalAmount: 19.50,\n    createdAt: '2024-01-15T15:00:00Z'\n  },\n  {\n    id: 'order_005',\n    orderType: 'take-away',\n    status: 'Pending',\n    customerInfo: { name: 'Michael Chen', phone: '+49 987 654 321' },\n    items: [\n      { name: 'Vegetable Biryani', quantity: 1, unitPrice: 11.00 },\n      { name: 'Raita', quantity: 1, unitPrice: 2.50 },\n      { name: 'Gulab Jamun', quantity: 2, unitPrice: 3.00 }\n    ],\n    totalAmount: 19.50,\n    createdAt: '2024-01-15T15:30:00Z'\n  },\n  {\n    id: 'order_006',\n    orderType: 'take-away',\n    status: 'Completed',\n    customerInfo: { name: 'Emma Wilson', phone: '+49 555 123 456' },\n    items: [\n      { name: 'Butter Chicken', quantity: 1, unitPrice: 13.00 },\n      { name: 'Garlic Naan', quantity: 2, unitPrice: 2.50 },\n      { name: 'Coca Cola', quantity: 1, unitPrice: 2.50 }\n    ],\n    totalAmount: 20.50,\n    createdAt: '2024-01-15T14:00:00Z',\n    completedAt: '2024-01-15T14:45:00Z',\n    paymentMode: 'cash',\n    tipAmount: 2.00,\n    amountPaid: 22.50\n  }\n];\n\n// Helper function to find inventory item by name (case-insensitive)\nfunction findInventoryItemByName(inventory: any[], searchName: string): any | null {\n  return inventory.find(item => \n    item.name.toLowerCase() === searchName.toLowerCase() ||\n    item.name.toLowerCase().includes(searchName.toLowerCase()) ||\n    searchName.toLowerCase().includes(item.name.toLowerCase())\n  ) || null;\n}\n\n// Helper function to convert units\nfunction convertUnits(fromAmount: number, fromUnit: string, toUnit: string): number {\n  // Normalize units\n  const normalizedFromUnit = fromUnit.toLowerCase().trim();\n  const normalizedToUnit = toUnit.toLowerCase().trim();\n\n  // If units are the same, no conversion needed\n  if (normalizedFromUnit === normalizedToUnit) {\n    return fromAmount;\n  }\n\n  // Common unit conversions\n  const conversions: Record<string, Record<string, number>> = {\n    'g': { 'kg': 0.001, 'oz': 0.035274, 'lb': 0.00220462 },\n    'kg': { 'g': 1000, 'oz': 35.274, 'lb': 2.20462 },\n    'ml': { 'l': 0.001, 'oz': 0.033814, 'cup': 0.00422675 },\n    'l': { 'ml': 1000, 'oz': 33.814, 'cup': 4.22675 },\n    'oz': { 'g': 28.3495, 'kg': 0.0283495, 'ml': 29.5735, 'l': 0.0295735, 'cup': 0.125 },\n    'cup': { 'ml': 236.588, 'l': 0.236588, 'oz': 8 },\n    'pcs': { 'piece': 1, 'unit': 1 },\n    'piece': { 'pcs': 1, 'unit': 1 },\n    'unit': { 'pcs': 1, 'piece': 1 }\n  };\n\n  if (conversions[normalizedFromUnit] && conversions[normalizedFromUnit][normalizedToUnit]) {\n    return fromAmount * conversions[normalizedFromUnit][normalizedToUnit];\n  }\n\n  // If no conversion found, assume 1:1 ratio\n  console.warn(`No unit conversion found from ${fromUnit} to ${toUnit}, using 1:1 ratio`);\n  return fromAmount;\n}\n\n// Helper type guard for IngredientQuantity\nfunction isIngredientQuantity(obj: any): obj is { inventoryItemName: string; quantityPerDish: number; unit: string } {\n  return (\n    obj && typeof obj === 'object' &&\n    typeof obj.inventoryItemName === 'string' &&\n    typeof obj.quantityPerDish === 'number' &&\n    typeof obj.unit === 'string'\n  );\n}\n\n/**\n * Update inventory based on order items\n */\nasync function updateInventoryFromOrder(order: any, userId: string) {\n  console.log('🔄 Updating inventory for order:', order.id);\n  \n  try {\n    // Get current inventory\n    const inventory = getInventory(userId);\n    const menu = getDishes(userId);\n    \n    console.log('📊 Current inventory items:', inventory.length);\n    console.log('🍽️ Available dishes:', menu.length);\n    \n    // Track inventory updates\n    const inventoryUpdates: any[] = [];\n    \n    // Process each order item\n    for (const orderItem of order.items) {\n      const dishName = orderItem.name;\n      const orderQuantity = orderItem.quantity;\n      \n      console.log(`🍽️ Processing dish: ${dishName} (quantity: ${orderQuantity})`);\n      \n      // Find the dish in menu\n      const dish = menu.find(d => d.name.toLowerCase() === dishName.toLowerCase());\n      \n      if (!dish) {\n        console.warn(`⚠️ Dish not found in menu: ${dishName}`);\n        continue;\n      }\n      \n      const ingredientCount = Array.isArray(dish.ingredients) ? dish.ingredients.length : 0;\n      console.log(`📋 Dish found: ${dish.name} with ${ingredientCount} ingredients`);\n      \n      // Process each ingredient in the dish\n      if (Array.isArray(dish.ingredients)) {\n        for (const ingredient of dish.ingredients) {\n          if (!isIngredientQuantity(ingredient)) {\n            console.warn(`⚠️ Ingredient is not a structured object:`, ingredient);\n            continue;\n          }\n          const ingredientName = ingredient.inventoryItemName;\n          const quantityPerDish = ingredient.quantityPerDish;\n          const unit = ingredient.unit;\n          \n          // Calculate total quantity needed for this order\n          const totalQuantityNeeded = quantityPerDish * orderQuantity;\n          \n          console.log(`🥘 Ingredient: ${ingredientName} - ${quantityPerDish} ${unit} per dish × ${orderQuantity} dishes = ${totalQuantityNeeded} ${unit} total`);\n          \n          // Find inventory item\n          const inventoryItem = inventory.find(item => \n            item.name.toLowerCase() === ingredientName.toLowerCase() ||\n            item.name.toLowerCase().includes(ingredientName.toLowerCase()) ||\n            ingredientName.toLowerCase().includes(item.name.toLowerCase())\n          );\n          \n          if (!inventoryItem) {\n            console.warn(`⚠️ Inventory item not found: ${ingredientName}`);\n            continue;\n          }\n          \n          console.log(`📦 Inventory item found: ${inventoryItem.name} (current: ${inventoryItem.quantity} ${inventoryItem.unit})`);\n          \n          // Convert units if needed\n          let convertedQuantity = totalQuantityNeeded;\n          if (unit.toLowerCase() !== inventoryItem.unit.toLowerCase()) {\n            convertedQuantity = convertUnits(totalQuantityNeeded, unit, inventoryItem.unit);\n            console.log(`🔄 Unit conversion: ${totalQuantityNeeded} ${unit} = ${convertedQuantity} ${inventoryItem.unit}`);\n          }\n          \n          // Check if enough stock\n          if (inventoryItem.quantity < convertedQuantity) {\n            console.warn(`⚠️ Insufficient stock for ${ingredientName}: available ${inventoryItem.quantity} ${inventoryItem.unit}, needed ${convertedQuantity} ${inventoryItem.unit}`);\n            continue;\n          }\n          \n          // Update inventory\n          const oldQuantity = inventoryItem.quantity;\n          inventoryItem.quantity -= convertedQuantity;\n          inventoryItem.quantityUsed = (inventoryItem.quantityUsed || 0) + convertedQuantity;\n          inventoryItem.totalUsed = (inventoryItem.totalUsed || 0) + convertedQuantity;\n          \n          console.log(`✅ Updated ${ingredientName}: ${oldQuantity} → ${inventoryItem.quantity} ${inventoryItem.unit} (used: +${convertedQuantity})`);\n          \n          inventoryUpdates.push({\n            item: ingredientName,\n            oldQuantity,\n            newQuantity: inventoryItem.quantity,\n            used: convertedQuantity,\n            unit: inventoryItem.unit\n          });\n        }\n      }\n    }\n    \n    // Update inventory alerts\n    updateInventoryAlerts(userId);\n    const newAlerts: string[] = [];\n    \n    console.log(`✅ Inventory update completed: ${inventoryUpdates.length} items updated`);\n    console.log(`🚨 New alerts generated: ${newAlerts.length}`);\n    \n    return {\n      success: true,\n      message: `Inventory updated successfully. ${inventoryUpdates.length} items modified.`,\n      updates: inventoryUpdates,\n      alerts: newAlerts\n    };\n    \n  } catch (error) {\n    console.error('❌ Error updating inventory:', error);\n    return {\n      success: false,\n      message: 'Error updating inventory',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json({ orders });\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const order = await request.json();\n    orders.push(order);\n    return NextResponse.json({ order }, { status: 201 });\n  } catch (error) {\n    return NextResponse.json({ error: 'Invalid request' }, { status: 400 });\n  }\n}\n\nexport async function PATCH(request: NextRequest) {\n  try {\n    const { id, status, paymentMode, tipAmount, amountPaid, userId } = await request.json();\n    const idx = orders.findIndex(order => order.id === id);\n    if (idx === -1) {\n      return NextResponse.json({ error: 'Order not found' }, { status: 404 });\n    }\n    \n    const order = orders[idx];\n    order.status = status;\n    \n    if (status === 'Completed') {\n      order.completedAt = new Date().toISOString();\n      \n      // Update inventory when order is completed\n      await updateInventoryFromOrder(order, userId);\n    }\n    \n    if (paymentMode) order.paymentMode = paymentMode;\n    if (typeof tipAmount !== 'undefined') order.tipAmount = tipAmount;\n    if (typeof amountPaid !== 'undefined') order.amountPaid = amountPaid;\n    \n    return NextResponse.json({ order: orders[idx] });\n  } catch (error) {\n    return NextResponse.json({ error: 'Invalid request' }, { status: 400 });\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}