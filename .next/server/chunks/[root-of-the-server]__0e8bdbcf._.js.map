{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/tables/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\nconst TABLES_FILE = path.resolve(process.cwd(), 'src/lib/tables.json');\r\n\r\nfunction readTables() {\r\n  try {\r\n    const data = fs.readFileSync(TABLES_FILE, 'utf-8');\r\n    return JSON.parse(data);\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction writeTables(tables: any[]) {\r\n  fs.writeFileSync(TABLES_FILE, JSON.stringify(tables, null, 2), 'utf-8');\r\n}\r\n\r\nexport async function GET(req: NextRequest) {\r\n  console.log('[API] /api/tables GET called at', new Date().toISOString(), '\\nStack:', new Error().stack);\r\n  const tables = readTables();\r\n  return NextResponse.json({ tables });\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  console.log('[API] /api/tables POST called at', new Date().toISOString(), '\\nStack:', new Error().stack);\r\n  try {\r\n    const body = await req.json();\r\n    const { action, tableId, number, capacity } = body;\r\n    const tables = readTables();\r\n\r\n    if (action === 'add') {\r\n      if (!number || !capacity) {\r\n        return NextResponse.json({ error: 'Missing number or capacity' }, { status: 400 });\r\n      }\r\n      const newTable = {\r\n        id: Date.now().toString(),\r\n        number: String(number),\r\n        capacity: Number(capacity),\r\n        status: 'available',\r\n        waiter: null,\r\n        occupiedSince: null\r\n      };\r\n      tables.push(newTable);\r\n      writeTables(tables);\r\n      return NextResponse.json({ tables });\r\n    }\r\n\r\n    if (!tableId) {\r\n      return NextResponse.json({ error: 'Missing tableId' }, { status: 400 });\r\n    }\r\n    const table = tables.find((t: any) => t.id === tableId);\r\n    if (!table) {\r\n      return NextResponse.json({ error: 'Table not found' }, { status: 404 });\r\n    }\r\n    if (action === 'occupy') {\r\n      table.status = 'occupied';\r\n      table.occupiedSince = new Date().toISOString();\r\n      if (body.waiter) table.waiter = body.waiter;\r\n    } else if (action === 'free') {\r\n      table.status = 'available';\r\n      table.occupiedSince = null;\r\n      table.waiter = null;\r\n    }\r\n    if (action === 'edit') {\r\n      if (!number || !capacity) {\r\n        return NextResponse.json({ error: 'Missing number or capacity' }, { status: 400 });\r\n      }\r\n      table.number = String(number);\r\n      table.capacity = Number(capacity);\r\n      if ('waiter' in body) table.waiter = body.waiter;\r\n      if ('occupiedSince' in body) table.occupiedSince = body.occupiedSince;\r\n      writeTables(tables);\r\n      return NextResponse.json({ tables });\r\n    }\r\n    if (action === 'delete') {\r\n      const idx = tables.findIndex((t: any) => t.id === tableId);\r\n      if (idx === -1) {\r\n        return NextResponse.json({ error: 'Table not found' }, { status: 404 });\r\n      }\r\n      tables.splice(idx, 1);\r\n      writeTables(tables);\r\n      return NextResponse.json({ tables });\r\n    }\r\n    writeTables(tables);\r\n    return NextResponse.json({ tables });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Invalid request' }, { status: 400 });\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}