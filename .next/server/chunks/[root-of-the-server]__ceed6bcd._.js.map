{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-1.5-flash',\r\n}); "],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,MAAM,KAAK,IAAA,mJAAM,EAAC;IACvB,SAAS;QAAC,IAAA,yLAAQ;KAAG;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/alvi/IOMS/IOMS_V1_POS_Working_main_20_08_2025/src/app/api/ai-ingredient/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { ai } from '@/ai/genkit';\r\n\r\nasync function generateIngredientsList(input: { dishName: string; numberOfServings: number; aiHint?: string }) {\r\n  const { dishName, numberOfServings, aiHint } = input;\r\n  \r\n  const prompt = `\r\nYou are an expert chef and nutritionist. Generate a detailed ingredient list for the dish: \"${dishName}\".\r\n\r\n${aiHint ? `Additional context: ${aiHint}` : ''}\r\n\r\nFor ${numberOfServings} serving(s), provide:\r\n- Ingredient name (be specific)\r\n- Quantity (appropriate for the serving size)\r\n- Unit of measurement\r\n\r\nReturn ONLY a valid JSON array of objects with this exact structure:\r\n[\r\n  {\"name\": \"Ingredient Name\", \"quantity\": number, \"unit\": \"unit\"},\r\n  {\"name\": \"Another Ingredient\", \"quantity\": number, \"unit\": \"unit\"}\r\n]\r\n\r\nNo explanations, no markdown, just the JSON array.\r\n`;\r\n\r\n  try {\r\n    const result = await ai.generate([{ text: prompt }]);\r\n    const text = typeof result.text === 'string' ? result.text : '';\r\n    \r\n    // Extract JSON from response\r\n    let cleanText = text.trim();\r\n    const jsonMatch = text.match(/```json([\\s\\S]*?)```/) || text.match(/```([\\s\\S]*?)```/);\r\n    if (jsonMatch) {\r\n      cleanText = jsonMatch[1].trim();\r\n    }\r\n    \r\n    // Remove code fences\r\n    cleanText = cleanText.replace(/```/g, '').trim();\r\n    \r\n    // Parse JSON\r\n    const ingredients = JSON.parse(cleanText);\r\n    \r\n    // Validate structure\r\n    if (!Array.isArray(ingredients)) {\r\n      throw new Error('Invalid response format');\r\n    }\r\n    \r\n    return { ingredients };\r\n    \r\n  } catch (error) {\r\n    console.error('AI ingredient generation failed:', error);\r\n    \r\n    // Fallback to mock data\r\n    const fallbackIngredients = [\r\n      { name: 'Main protein', quantity: 200 * numberOfServings, unit: 'g' },\r\n      { name: 'Vegetables', quantity: 150 * numberOfServings, unit: 'g' },\r\n      { name: 'Starch', quantity: 100 * numberOfServings, unit: 'g' },\r\n      { name: 'Oil', quantity: 2 * numberOfServings, unit: 'tbsp' },\r\n      { name: 'Salt', quantity: 1 * numberOfServings, unit: 'tsp' },\r\n      { name: 'Pepper', quantity: 1 * numberOfServings, unit: 'tsp' }\r\n    ];\r\n    \r\n    return { ingredients: fallbackIngredients };\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { name, aiHint } = body;\r\n    \r\n    if (!name) {\r\n      return NextResponse.json(\r\n        { error: 'Missing dish name' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    console.log('[AI-INGREDIENT] Request:', { name, aiHint });\r\n    \r\n    const result = await generateIngredientsList({ \r\n      dishName: name, \r\n      numberOfServings: 1,\r\n      aiHint\r\n    });\r\n    \r\n    console.log('[AI-INGREDIENT] Response:', result);\r\n    \r\n    return NextResponse.json({ ingredients: result.ingredients });\r\n    \r\n  } catch (error: any) {\r\n    console.error('[AI-INGREDIENT] Error:', error);\r\n    \r\n    // Check if it's an API key error\r\n    if (error instanceof Error && (error.message.includes('API key') || error.message.includes('FAILED_PRECONDITION'))) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'AI service unavailable. Please check your API key configuration.',\r\n          suggestion: 'Please ensure you have a valid Gemini API key in your .env.local file'\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: error?.message || 'Failed to generate ingredients' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,eAAe,wBAAwB,KAAsE;IAC3G,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,EAAE,GAAG;IAE/C,MAAM,SAAS,CAAC;4FAC0E,EAAE,SAAS;;AAEvG,EAAE,SAAS,CAAC,oBAAoB,EAAE,QAAQ,GAAG,GAAG;;IAE5C,EAAE,iBAAiB;;;;;;;;;;;;AAYvB,CAAC;IAEC,IAAI;QACF,MAAM,SAAS,MAAM,2HAAE,CAAC,QAAQ,CAAC;YAAC;gBAAE,MAAM;YAAO;SAAE;QACnD,MAAM,OAAO,OAAO,OAAO,IAAI,KAAK,WAAW,OAAO,IAAI,GAAG;QAE7D,6BAA6B;QAC7B,IAAI,YAAY,KAAK,IAAI;QACzB,MAAM,YAAY,KAAK,KAAK,CAAC,2BAA2B,KAAK,KAAK,CAAC;QACnE,IAAI,WAAW;YACb,YAAY,SAAS,CAAC,EAAE,CAAC,IAAI;QAC/B;QAEA,qBAAqB;QACrB,YAAY,UAAU,OAAO,CAAC,QAAQ,IAAI,IAAI;QAE9C,aAAa;QACb,MAAM,cAAc,KAAK,KAAK,CAAC;QAE/B,qBAAqB;QACrB,IAAI,CAAC,MAAM,OAAO,CAAC,cAAc;YAC/B,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;YAAE;QAAY;IAEvB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAElD,wBAAwB;QACxB,MAAM,sBAAsB;YAC1B;gBAAE,MAAM;gBAAgB,UAAU,MAAM;gBAAkB,MAAM;YAAI;YACpE;gBAAE,MAAM;gBAAc,UAAU,MAAM;gBAAkB,MAAM;YAAI;YAClE;gBAAE,MAAM;gBAAU,UAAU,MAAM;gBAAkB,MAAM;YAAI;YAC9D;gBAAE,MAAM;gBAAO,UAAU,IAAI;gBAAkB,MAAM;YAAO;YAC5D;gBAAE,MAAM;gBAAQ,UAAU,IAAI;gBAAkB,MAAM;YAAM;YAC5D;gBAAE,MAAM;gBAAU,UAAU,IAAI;gBAAkB,MAAM;YAAM;SAC/D;QAED,OAAO;YAAE,aAAa;QAAoB;IAC5C;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG;QAEzB,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,4BAA4B;YAAE;YAAM;QAAO;QAEvD,MAAM,SAAS,MAAM,wBAAwB;YAC3C,UAAU;YACV,kBAAkB;YAClB;QACF;QAEA,QAAQ,GAAG,CAAC,6BAA6B;QAEzC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,aAAa,OAAO,WAAW;QAAC;IAE7D,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,0BAA0B;QAExC,iCAAiC;QACjC,IAAI,iBAAiB,SAAS,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,cAAc,MAAM,OAAO,CAAC,QAAQ,CAAC,sBAAsB,GAAG;YAClH,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,YAAY;YACd,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO,OAAO,WAAW;QAAiC,GAC5D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}